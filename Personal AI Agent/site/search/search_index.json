{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Personal AI Agent","text":"<p>A privacy-first AI assistant for PDF documents and Gmail emails with advanced document classification and processing capabilities.</p>"},{"location":"#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>100% Privacy: Local LLM processing with no external API calls (except Gmail OAuth)</li> <li>PDF + Gmail Integration: Unified processing for PDF documents and Gmail emails  </li> <li>Smart Content Classification: Automatic categorization for documents and emails</li> <li>Category-Specific Processing: Optimized chunking and indexing per content type</li> <li>Thread-Aware Email Processing: Conversation context preservation</li> <li>Cross-Platform Queries: Search across PDFs and emails with unified results</li> </ul>"},{"location":"#system-overview","title":"\ud83d\udcca System Overview","text":"<p>The Personal AI Agent provides a complete personal knowledge base by intelligently processing and searching across both PDF documents and Gmail emails. The system uses specialized handling for different content types to ensure optimal relevance and accuracy.</p>"},{"location":"#document-categories","title":"Document Categories","text":"<ul> <li>Financial Documents: Bank statements, invoices, receipts with transaction-focused processing</li> <li>Long-format Documents: Research papers, reports, contracts with deep semantic analysis</li> <li>Generic Documents: Resumes, letters, notes with balanced processing approach</li> </ul>"},{"location":"#email-categories","title":"Email Categories","text":"<ul> <li>Business: Meeting invites, project updates, work communications</li> <li>Personal: Family/friend emails, personal communications</li> <li>Promotional: Marketing emails, newsletters, deals</li> <li>Transactional: Receipts, confirmations, account notifications</li> <li>Support: Customer service, technical support communications</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The application uses a modern, scalable architecture:</p> <ul> <li>FastAPI: High-performance async API framework</li> <li>SQLite/PostgreSQL: Metadata and user management</li> <li>FAISS: Vector similarity search for semantic queries</li> <li>Mistral 7B: Local language model for response generation</li> <li>OAuth2: Secure Gmail authentication</li> <li>Category-Based Storage: Organized vector indices for optimal performance</li> </ul>"},{"location":"#processing-pipeline","title":"\ud83d\udd04 Processing Pipeline","text":"<ol> <li>Content Ingestion: Upload PDFs or sync Gmail emails</li> <li>Classification: Automatic categorization based on content type</li> <li>Processing: Category-specific chunking and metadata extraction</li> <li>Embedding: Vector representation using MiniLM model</li> <li>Storage: Organized storage in FAISS vector databases</li> <li>Querying: Intelligent routing and cross-content search</li> <li>Response: LLM-generated answers with source attribution</li> </ol>"},{"location":"#privacy-security","title":"\ud83d\udee1\ufe0f Privacy &amp; Security","text":"<ul> <li>All document processing happens locally</li> <li>No external API calls for document analysis</li> <li>Gmail OAuth uses industry-standard security</li> <li>Local vector storage with user isolation</li> <li>Configurable data retention policies</li> </ul>"},{"location":"#quick-links","title":"\ud83d\udcda Quick Links","text":"<ul> <li>Installation Guide - Get started quickly</li> <li>Gmail Integration - Connect your Gmail account</li> <li>API Reference - Complete API documentation</li> <li>Architecture Guide - Technical deep dive</li> </ul>"},{"location":"#whats-new","title":"\ud83c\udd95 What's New","text":""},{"location":"#latest-updates","title":"Latest Updates","text":"<ul> <li>\u2705 Gmail Integration with OAuth2 authentication</li> <li>\u2705 Email classification and thread-aware processing</li> <li>\u2705 Cross-content queries spanning PDFs and emails</li> <li>\u2705 Enhanced source attribution and relevance scoring</li> <li>\ud83d\udd04 Security hardening and rate limiting (in progress)</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to get involved.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api/auth/","title":"Authentication API","text":"<p>The Personal AI Agent uses JWT-based authentication for API access.</p>"},{"location":"api/auth/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>Register a new user account (if needed)</li> <li>Login to receive JWT access token</li> <li>Include token in subsequent requests</li> <li>Refresh token when expired</li> </ol>"},{"location":"api/auth/#endpoints","title":"Endpoints","text":""},{"location":"api/auth/#register-user","title":"Register User","text":"<p>Create a new user account.</p> <pre><code>POST /api/v1/auth/register\n</code></pre> <p>Request Body: <pre><code>{\n  \"username\": \"string\",\n  \"email\": \"user@example.com\",\n  \"password\": \"string\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"username\": \"string\",\n  \"email\": \"user@example.com\",\n  \"is_active\": true,\n  \"created_at\": \"2024-01-01T00:00:00Z\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/register\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"johndoe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"securepassword123\"\n  }'\n</code></pre></p>"},{"location":"api/auth/#login","title":"Login","text":"<p>Authenticate and receive access token.</p> <pre><code>POST /api/v1/auth/login\n</code></pre> <p>Request Body: <pre><code>{\n  \"username\": \"string\",\n  \"password\": \"string\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 1800\n}\n</code></pre></p> <p>Example: <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"johndoe\",\n    \"password\": \"securepassword123\"\n  }'\n</code></pre></p>"},{"location":"api/auth/#get-current-user","title":"Get Current User","text":"<p>Retrieve current user information.</p> <pre><code>GET /api/v1/auth/me\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"username\": \"johndoe\",\n  \"email\": \"john@example.com\",\n  \"is_active\": true,\n  \"created_at\": \"2024-01-01T00:00:00Z\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -X GET \"http://localhost:8000/api/v1/auth/me\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p>"},{"location":"api/auth/#using-authentication-tokens","title":"Using Authentication Tokens","text":""},{"location":"api/auth/#include-in-headers","title":"Include in Headers","text":"<p>All authenticated requests must include the JWT token in the Authorization header:</p> <pre><code>Authorization: Bearer &lt;your_access_token&gt;\n</code></pre>"},{"location":"api/auth/#token-expiration","title":"Token Expiration","text":"<ul> <li>Default expiration: 30 minutes</li> <li>Configurable via <code>ACCESS_TOKEN_EXPIRE_MINUTES</code> environment variable</li> <li>No automatic refresh - clients must re-authenticate</li> </ul>"},{"location":"api/auth/#error-responses","title":"Error Responses","text":""},{"location":"api/auth/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n  \"detail\": \"Not authenticated\"\n}\n</code></pre>"},{"location":"api/auth/#403-forbidden","title":"403 Forbidden","text":"<pre><code>{\n  \"detail\": \"Not enough permissions\"\n}\n</code></pre>"},{"location":"api/auth/#422-validation-error","title":"422 Validation Error","text":"<pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\"body\", \"username\"],\n      \"msg\": \"field required\",\n      \"type\": \"value_error.missing\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/auth/#security-considerations","title":"Security Considerations","text":""},{"location":"api/auth/#password-requirements","title":"Password Requirements","text":"<ul> <li>Minimum 8 characters</li> <li>No specific complexity requirements (configurable)</li> <li>Passwords are hashed using bcrypt</li> </ul>"},{"location":"api/auth/#token-security","title":"Token Security","text":"<ul> <li>JWT tokens are signed with <code>SECRET_KEY</code></li> <li>Change <code>SECRET_KEY</code> in production</li> <li>Tokens contain user ID and expiration</li> <li>No sensitive data in token payload</li> </ul>"},{"location":"api/auth/#best-practices","title":"Best Practices","text":"<ol> <li>Store tokens securely on client side</li> <li>Use HTTPS in production</li> <li>Implement proper logout (client-side token removal)</li> <li>Monitor authentication attempts</li> <li>Use strong SECRET_KEY (32+ characters)</li> </ol>"},{"location":"api/auth/#example-integration","title":"Example Integration","text":""},{"location":"api/auth/#javascriptfetch","title":"JavaScript/Fetch","text":"<pre><code>// Login\nconst loginResponse = await fetch('/api/v1/auth/login', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    username: 'johndoe',\n    password: 'securepassword123'\n  })\n});\n\nconst { access_token } = await loginResponse.json();\n\n// Use token for authenticated requests\nconst response = await fetch('/api/v1/documents/', {\n  headers: {\n    'Authorization': `Bearer ${access_token}`\n  }\n});\n</code></pre>"},{"location":"api/auth/#pythonrequests","title":"Python/Requests","text":"<pre><code>import requests\n\n# Login\nlogin_data = {\n    \"username\": \"johndoe\",\n    \"password\": \"securepassword123\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/login\",\n    json=login_data\n)\ntoken = response.json()[\"access_token\"]\n\n# Use token\nheaders = {\"Authorization\": f\"Bearer {token}\"}\nresponse = requests.get(\n    \"http://localhost:8000/api/v1/documents/\",\n    headers=headers\n)\n</code></pre>"},{"location":"api/auth/#configuration","title":"Configuration","text":"<p>Authentication behavior can be configured via environment variables:</p> <pre><code># JWT Configuration\nSECRET_KEY=your_secret_key_here\nALGORITHM=HS256\nACCESS_TOKEN_EXPIRE_MINUTES=30\n\n# User Registration\nALLOW_REGISTRATION=true  # Set to false to disable registration\n</code></pre>"},{"location":"api/auth/#admin-user-setup","title":"Admin User Setup","text":"<p>Create an admin user using the setup script:</p> <pre><code>python create_admin.py\n</code></pre> <p>Or set environment variables:</p> <pre><code>ADMIN_USERNAME=admin\nADMIN_PASSWORD=secure_admin_password\nADMIN_EMAIL=admin@example.com\n</code></pre>"},{"location":"api/documents/","title":"Documents API","text":"<p>Manage PDF document uploads, processing, and retrieval.</p>"},{"location":"api/documents/#endpoints-overview","title":"Endpoints Overview","text":"Method Endpoint Description POST <code>/api/v1/documents/upload</code> Upload and process PDF GET <code>/api/v1/documents/</code> List user documents GET <code>/api/v1/documents/{id}</code> Get document details DELETE <code>/api/v1/documents/{id}</code> Delete document"},{"location":"api/documents/#upload-document","title":"Upload Document","text":"<p>Upload and process a PDF document.</p> <pre><code>POST /api/v1/documents/upload\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: multipart/form-data\n</code></pre></p> <p>Request Body: - <code>file</code>: PDF file (multipart/form-data)</p> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"filename\": \"document.pdf\",\n  \"original_filename\": \"My Document.pdf\",\n  \"file_size\": 1048576,\n  \"document_type\": \"financial\",\n  \"processing_status\": \"completed\",\n  \"created_at\": \"2024-01-01T00:00:00Z\",\n  \"processed_at\": \"2024-01-01T00:01:30Z\",\n  \"chunk_count\": 45,\n  \"metadata\": {\n    \"page_count\": 10,\n    \"classification_confidence\": 0.92,\n    \"processing_time\": 90.5\n  }\n}\n</code></pre></p> <p>Example: <pre><code>curl -X POST \"http://localhost:8000/api/v1/documents/upload\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -F \"file=@/path/to/document.pdf\"\n</code></pre></p>"},{"location":"api/documents/#document-types","title":"Document Types","text":"<p>The system automatically classifies documents:</p> <ul> <li>financial: Bank statements, invoices, receipts</li> <li>long_form: Research papers, reports, contracts (20+ pages)</li> <li>generic: Resumes, letters, personal documents</li> </ul>"},{"location":"api/documents/#processing-status","title":"Processing Status","text":"<ul> <li><code>pending</code>: Upload received, processing not started</li> <li><code>processing</code>: Document being analyzed and chunked</li> <li><code>completed</code>: Ready for queries</li> <li><code>failed</code>: Processing error occurred</li> </ul>"},{"location":"api/documents/#list-documents","title":"List Documents","text":"<p>Retrieve user's uploaded documents.</p> <pre><code>GET /api/v1/documents/\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Query Parameters: - <code>skip</code> (optional): Number of records to skip (default: 0) - <code>limit</code> (optional): Maximum records to return (default: 100) - <code>document_type</code> (optional): Filter by type (<code>financial</code>, <code>long_form</code>, <code>generic</code>) - <code>status</code> (optional): Filter by processing status</p> <p>Response: <pre><code>{\n  \"documents\": [\n    {\n      \"id\": 1,\n      \"filename\": \"bank_statement.pdf\",\n      \"original_filename\": \"Chase Bank Statement Jan 2024.pdf\",\n      \"file_size\": 856432,\n      \"document_type\": \"financial\",\n      \"processing_status\": \"completed\",\n      \"created_at\": \"2024-01-01T00:00:00Z\",\n      \"processed_at\": \"2024-01-01T00:01:15Z\",\n      \"chunk_count\": 23\n    }\n  ],\n  \"total\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n}\n</code></pre></p> <p>Example: <pre><code>curl -X GET \"http://localhost:8000/api/v1/documents/?document_type=financial&amp;limit=10\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\"\n</code></pre></p>"},{"location":"api/documents/#get-document-details","title":"Get Document Details","text":"<p>Retrieve detailed information about a specific document.</p> <pre><code>GET /api/v1/documents/{id}\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"filename\": \"document.pdf\",\n  \"original_filename\": \"My Document.pdf\",\n  \"file_size\": 1048576,\n  \"document_type\": \"financial\",\n  \"processing_status\": \"completed\",\n  \"created_at\": \"2024-01-01T00:00:00Z\",\n  \"processed_at\": \"2024-01-01T00:01:30Z\",\n  \"chunk_count\": 45,\n  \"metadata\": {\n    \"page_count\": 10,\n    \"classification_confidence\": 0.92,\n    \"processing_time\": 90.5,\n    \"text_length\": 15420,\n    \"language\": \"en\"\n  },\n  \"chunks\": [\n    {\n      \"id\": 1,\n      \"content_preview\": \"Account Summary for January 2024...\",\n      \"chunk_index\": 0,\n      \"chunk_size\": 500\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/documents/#delete-document","title":"Delete Document","text":"<p>Remove a document and its associated data.</p> <pre><code>DELETE /api/v1/documents/{id}\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: <pre><code>{\n  \"message\": \"Document deleted successfully\",\n  \"deleted_id\": 1\n}\n</code></pre></p> <p>Example: <pre><code>curl -X DELETE \"http://localhost:8000/api/v1/documents/1\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\"\n</code></pre></p> <p>Permanent Deletion</p> <p>Deleting a document removes the file, all chunks, and vector embeddings. This action cannot be undone.</p>"},{"location":"api/documents/#error-responses","title":"Error Responses","text":""},{"location":"api/documents/#400-bad-request-invalid-file","title":"400 Bad Request - Invalid File","text":"<pre><code>{\n  \"detail\": \"Invalid file type. Only PDF files are supported.\"\n}\n</code></pre>"},{"location":"api/documents/#413-request-entity-too-large","title":"413 Request Entity Too Large","text":"<pre><code>{\n  \"detail\": \"File size exceeds maximum allowed size of 10MB\"\n}\n</code></pre>"},{"location":"api/documents/#422-processing-failed","title":"422 Processing Failed","text":"<pre><code>{\n  \"detail\": \"Document processing failed: Unable to extract text from PDF\"\n}\n</code></pre>"},{"location":"api/documents/#404-not-found","title":"404 Not Found","text":"<pre><code>{\n  \"detail\": \"Document not found\"\n}\n</code></pre>"},{"location":"api/documents/#file-requirements","title":"File Requirements","text":""},{"location":"api/documents/#supported-formats","title":"Supported Formats","text":"<ul> <li>PDF: Primary format, all versions supported</li> <li>Text extraction: Must contain selectable text (not scanned images)</li> <li>Size limit: Configurable, default 10MB</li> <li>Page limit: No hard limit, but processing time increases</li> </ul>"},{"location":"api/documents/#file-validation","title":"File Validation","text":"<p>The system validates:</p> <ol> <li>File type: Must be PDF (MIME type check)</li> <li>File size: Must be under configured limit</li> <li>Content: Must contain extractable text</li> <li>Structure: Must be valid PDF format</li> </ol>"},{"location":"api/documents/#processing-pipeline","title":"Processing Pipeline","text":"<ol> <li>Upload Validation: File type, size, format checks</li> <li>Text Extraction: PDF content extraction using PyPDF</li> <li>Classification: Automatic document type detection</li> <li>Chunking: Category-specific text segmentation</li> <li>Embedding: Vector representation generation</li> <li>Storage: Database and vector store persistence</li> </ol>"},{"location":"api/documents/#processing-times","title":"Processing Times","text":"Document Type Size Typical Processing Time Financial (1-5 pages) 1MB 30-60 seconds Generic (5-20 pages) 3MB 1-2 minutes Long-form (50+ pages) 10MB 3-5 minutes"},{"location":"api/documents/#integration-examples","title":"Integration Examples","text":""},{"location":"api/documents/#javascript-upload","title":"JavaScript Upload","text":"<pre><code>const uploadDocument = async (file) =&gt; {\n  const formData = new FormData();\n  formData.append('file', file);\n\n  const response = await fetch('/api/v1/documents/upload', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n\n  return response.json();\n};\n</code></pre>"},{"location":"api/documents/#python-upload","title":"Python Upload","text":"<pre><code>import requests\n\ndef upload_document(file_path, token):\n    with open(file_path, 'rb') as file:\n        files = {'file': file}\n        headers = {'Authorization': f'Bearer {token}'}\n\n        response = requests.post(\n            'http://localhost:8000/api/v1/documents/upload',\n            files=files,\n            headers=headers\n        )\n\n        return response.json()\n</code></pre>"},{"location":"api/documents/#best-practices","title":"Best Practices","text":"<ol> <li>Check file size before upload</li> <li>Monitor processing status for large files</li> <li>Use appropriate error handling for failed uploads</li> <li>Validate PDF text content before upload</li> <li>Consider batch uploads for multiple files</li> <li>Clean up old documents periodically</li> </ol>"},{"location":"api/emails/","title":"Email Search API","text":"<p>Search and query processed Gmail emails with advanced filtering and semantic search.</p>"},{"location":"api/emails/#endpoints-overview","title":"Endpoints Overview","text":"Method Endpoint Description POST <code>/api/v1/emails/search</code> Search emails with natural language GET <code>/api/v1/emails/</code> List processed emails GET <code>/api/v1/emails/{id}</code> Get specific email details GET <code>/api/v1/emails/categories</code> Get email category statistics"},{"location":"api/emails/#search-emails","title":"Search Emails","text":"<p>Perform semantic search across processed emails.</p> <pre><code>POST /api/v1/emails/search\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"query\": \"emails about Apple purchases\",\n  \"categories\": [\"business\", \"transactional\"],\n  \"date_from\": \"2024-01-01\",\n  \"date_to\": \"2024-03-31\",\n  \"sender\": \"apple@apple.com\",\n  \"limit\": 10,\n  \"include_content\": true\n}\n</code></pre></p> <p>Parameters: - <code>query</code> (required): Natural language search query - <code>categories</code> (optional): Filter by email categories - <code>date_from</code> (optional): Start date filter (ISO date) - <code>date_to</code> (optional): End date filter (ISO date) - <code>sender</code> (optional): Filter by sender email - <code>subject_contains</code> (optional): Filter by subject keywords - <code>limit</code> (optional): Maximum results (default: 10, max: 100) - <code>include_content</code> (optional): Include full email content (default: false)</p> <p>Response: <pre><code>{\n  \"results\": [\n    {\n      \"id\": \"email_123\",\n      \"subject\": \"Your Apple Purchase Receipt\",\n      \"sender\": \"noreply@apple.com\",\n      \"date\": \"2024-03-15T10:30:00Z\",\n      \"category\": \"transactional\",\n      \"relevance_score\": 0.94,\n      \"snippet\": \"Thank you for your purchase of iPhone 15 Pro...\",\n      \"thread_id\": \"thread_abc123\",\n      \"labels\": [\"INBOX\", \"CATEGORY_PURCHASES\"],\n      \"content\": \"Full email content here...\",\n      \"attachments\": [\n        {\n          \"filename\": \"receipt.pdf\",\n          \"type\": \"application/pdf\",\n          \"processed\": true\n        }\n      ]\n    }\n  ],\n  \"total_results\": 15,\n  \"query_time\": 0.45,\n  \"categories_found\": {\n    \"business\": 3,\n    \"transactional\": 12\n  }\n}\n</code></pre></p> <p>Example: <pre><code>curl -X POST \"http://localhost:8000/api/v1/emails/search\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"meeting about quarterly review\",\n    \"categories\": [\"business\"],\n    \"limit\": 5\n  }'\n</code></pre></p>"},{"location":"api/emails/#list-emails","title":"List Emails","text":"<p>Retrieve processed emails with filtering options.</p> <pre><code>GET /api/v1/emails/\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Query Parameters: - <code>skip</code> (optional): Number of records to skip (default: 0) - <code>limit</code> (optional): Maximum records to return (default: 50, max: 200) - <code>category</code> (optional): Filter by category - <code>sender</code> (optional): Filter by sender email - <code>date_from</code> (optional): Start date filter - <code>date_to</code> (optional): End date filter - <code>has_attachments</code> (optional): Filter emails with attachments</p> <p>Response: <pre><code>{\n  \"emails\": [\n    {\n      \"id\": \"email_123\",\n      \"subject\": \"Quarterly Review Meeting\",\n      \"sender\": \"manager@company.com\",\n      \"date\": \"2024-03-20T14:00:00Z\",\n      \"category\": \"business\",\n      \"thread_id\": \"thread_def456\",\n      \"has_attachments\": true,\n      \"labels\": [\"INBOX\", \"IMPORTANT\"],\n      \"snippet\": \"Please find attached the quarterly review agenda...\"\n    }\n  ],\n  \"total\": 1247,\n  \"skip\": 0,\n  \"limit\": 50,\n  \"filters_applied\": {\n    \"category\": \"business\",\n    \"date_range\": \"2024-01-01 to 2024-03-31\"\n  }\n}\n</code></pre></p>"},{"location":"api/emails/#get-email-details","title":"Get Email Details","text":"<p>Retrieve complete details for a specific email.</p> <pre><code>GET /api/v1/emails/{id}\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"email_123\",\n  \"gmail_id\": \"17a8b2c3d4e5f6g7\",\n  \"thread_id\": \"thread_abc123\",\n  \"subject\": \"Your Apple Purchase Receipt\",\n  \"sender\": \"noreply@apple.com\",\n  \"sender_name\": \"Apple Store\",\n  \"recipients\": [\"user@example.com\"],\n  \"date\": \"2024-03-15T10:30:00Z\",\n  \"category\": \"transactional\",\n  \"classification_confidence\": 0.89,\n  \"labels\": [\"INBOX\", \"CATEGORY_PURCHASES\"],\n  \"content\": {\n    \"text\": \"Full plain text content...\",\n    \"html\": \"&lt;html&gt;Full HTML content...&lt;/html&gt;\"\n  },\n  \"attachments\": [\n    {\n      \"filename\": \"receipt.pdf\",\n      \"type\": \"application/pdf\",\n      \"size\": 45632,\n      \"processed\": true,\n      \"text_content\": \"Extracted text from attachment...\"\n    }\n  ],\n  \"thread_context\": [\n    {\n      \"email_id\": \"email_122\",\n      \"subject\": \"Order Confirmation\",\n      \"date\": \"2024-03-14T15:20:00Z\",\n      \"sender\": \"orders@apple.com\"\n    }\n  ],\n  \"processing_metadata\": {\n    \"processed_at\": \"2024-03-15T10:35:00Z\",\n    \"chunk_count\": 3,\n    \"embedding_version\": \"v1.0\"\n  }\n}\n</code></pre></p>"},{"location":"api/emails/#get-category-statistics","title":"Get Category Statistics","text":"<p>Retrieve email category distribution and statistics.</p> <pre><code>GET /api/v1/emails/categories\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Query Parameters: - <code>date_from</code> (optional): Start date for statistics - <code>date_to</code> (optional): End date for statistics</p> <p>Response: <pre><code>{\n  \"total_emails\": 1247,\n  \"date_range\": {\n    \"from\": \"2024-01-01T00:00:00Z\",\n    \"to\": \"2024-03-31T23:59:59Z\"\n  },\n  \"categories\": {\n    \"business\": {\n      \"count\": 387,\n      \"percentage\": 31.04,\n      \"top_senders\": [\n        \"team@company.com\",\n        \"calendar@company.com\"\n      ]\n    },\n    \"personal\": {\n      \"count\": 245,\n      \"percentage\": 19.65,\n      \"top_senders\": [\n        \"family@gmail.com\",\n        \"friend@yahoo.com\"\n      ]\n    },\n    \"promotional\": {\n      \"count\": 423,\n      \"percentage\": 33.92,\n      \"top_senders\": [\n        \"deals@amazon.com\",\n        \"newsletter@medium.com\"\n      ]\n    },\n    \"transactional\": {\n      \"count\": 156,\n      \"percentage\": 12.51,\n      \"top_senders\": [\n        \"noreply@apple.com\",\n        \"receipts@uber.com\"\n      ]\n    },\n    \"support\": {\n      \"count\": 36,\n      \"percentage\": 2.89,\n      \"top_senders\": [\n        \"support@stripe.com\",\n        \"help@github.com\"\n      ]\n    }\n  },\n  \"trends\": {\n    \"most_active_day\": \"Tuesday\",\n    \"peak_hours\": [\"9:00\", \"14:00\", \"18:00\"],\n    \"monthly_distribution\": {\n      \"2024-01\": 421,\n      \"2024-02\": 389,\n      \"2024-03\": 437\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/emails/#email-categories","title":"Email Categories","text":""},{"location":"api/emails/#business","title":"Business","text":"<p>Work-related emails including: - Meeting invitations and updates - Project communications - Team notifications - Work-related announcements</p>"},{"location":"api/emails/#personal","title":"Personal","text":"<p>Personal communications including: - Family and friend emails - Personal correspondence - Social invitations - Personal updates</p>"},{"location":"api/emails/#promotional","title":"Promotional","text":"<p>Marketing and promotional content: - Newsletter subscriptions - Product announcements - Sales and deals - Marketing campaigns</p>"},{"location":"api/emails/#transactional","title":"Transactional","text":"<p>Account and purchase notifications: - Purchase receipts - Account notifications - Service confirmations - Billing statements</p>"},{"location":"api/emails/#support","title":"Support","text":"<p>Customer service communications: - Technical support tickets - Help desk responses - Service inquiries - Problem resolution</p>"},{"location":"api/emails/#search-capabilities","title":"Search Capabilities","text":""},{"location":"api/emails/#semantic-search","title":"Semantic Search","text":"<p>The system understands context and meaning:</p> <pre><code># These queries will find similar results:\n\"Apple purchase receipts\"\n\"iPhone buying confirmations\"\n\"transactions from Apple Store\"\n</code></pre>"},{"location":"api/emails/#natural-language-queries","title":"Natural Language Queries","text":"<ul> <li>\"Find emails about my quarterly performance review\"</li> <li>\"Show me all receipts from last month\"</li> <li>\"What did John say about the project timeline?\"</li> <li>\"Find customer support conversations about billing issues\"</li> </ul>"},{"location":"api/emails/#advanced-filtering","title":"Advanced Filtering","text":"<p>Combine multiple filters for precise results:</p> <pre><code>{\n  \"query\": \"meeting notes\",\n  \"categories\": [\"business\"],\n  \"sender\": \"team@company.com\",\n  \"date_from\": \"2024-03-01\",\n  \"date_to\": \"2024-03-31\"\n}\n</code></pre>"},{"location":"api/emails/#error-responses","title":"Error Responses","text":""},{"location":"api/emails/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n  \"detail\": \"Query parameter is required\"\n}\n</code></pre>"},{"location":"api/emails/#404-not-found","title":"404 Not Found","text":"<pre><code>{\n  \"detail\": \"Email not found or not accessible\"\n}\n</code></pre>"},{"location":"api/emails/#422-invalid-parameters","title":"422 Invalid Parameters","text":"<pre><code>{\n  \"detail\": \"Invalid date format. Use ISO date format (YYYY-MM-DD)\"\n}\n</code></pre>"},{"location":"api/emails/#integration-examples","title":"Integration Examples","text":""},{"location":"api/emails/#javascript-search","title":"JavaScript Search","text":"<pre><code>const searchEmails = async (query, filters = {}) =&gt; {\n  const requestBody = {\n    query,\n    limit: 20,\n    include_content: false,\n    ...filters\n  };\n\n  const response = await fetch('/api/v1/emails/search', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(requestBody)\n  });\n\n  return response.json();\n};\n\n// Example usage\nconst results = await searchEmails('Apple purchases', {\n  categories: ['transactional'],\n  date_from: '2024-01-01'\n});\n</code></pre>"},{"location":"api/emails/#python-search","title":"Python Search","text":"<pre><code>import requests\nfrom datetime import datetime, timedelta\n\ndef search_emails(query, token, **filters):\n    data = {\n        \"query\": query,\n        \"limit\": 20,\n        **filters\n    }\n\n    response = requests.post(\n        \"http://localhost:8000/api/v1/emails/search\",\n        json=data,\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n\n    return response.json()\n\n# Example: Find recent business emails\nresults = search_emails(\n    \"project update\",\n    token,\n    categories=[\"business\"],\n    date_from=(datetime.now() - timedelta(days=30)).isoformat()\n)\n</code></pre>"},{"location":"api/emails/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/emails/#search-optimization","title":"Search Optimization","text":"<ul> <li>Specific queries perform better than broad searches</li> <li>Category filtering significantly improves speed</li> <li>Date ranges help narrow search scope</li> <li>Limit results to reasonable numbers (10-50)</li> </ul>"},{"location":"api/emails/#response-times","title":"Response Times","text":"Search Type Typical Response Time Simple query 0.2-0.8 seconds Filtered search 0.5-1.5 seconds Complex semantic search 1-3 seconds"},{"location":"api/emails/#best-practices","title":"Best Practices","text":"<ol> <li>Use category filters when possible</li> <li>Limit date ranges for better performance</li> <li>Avoid very broad queries like \"email\"</li> <li>Use pagination for large result sets</li> <li>Cache frequent searches on client side</li> </ol>"},{"location":"api/gmail/","title":"Gmail API","text":"<p>Integrate Gmail emails for unified search and querying capabilities.</p>"},{"location":"api/gmail/#endpoints-overview","title":"Endpoints Overview","text":"Method Endpoint Description GET <code>/api/v1/gmail/auth-url</code> Get OAuth2 authorization URL GET <code>/api/v1/gmail/callback</code> Handle OAuth2 callback POST <code>/api/v1/gmail/sync</code> Sync emails from Gmail GET <code>/api/v1/gmail/status</code> Get connection status DELETE <code>/api/v1/gmail/disconnect</code> Disconnect Gmail account"},{"location":"api/gmail/#gmail-oauth-setup","title":"Gmail OAuth Setup","text":"<p>Before using Gmail integration, set up OAuth2 credentials:</p> <ol> <li>Go to Google Cloud Console</li> <li>Create or select a project</li> <li>Enable Gmail API</li> <li>Create OAuth2 credentials (Web Application)</li> <li>Add redirect URI: <code>http://localhost:8000/api/v1/gmail/callback</code></li> <li>Configure environment variables:</li> </ol> <pre><code>GMAIL_CLIENT_ID=your_client_id_here\nGMAIL_CLIENT_SECRET=your_client_secret_here\nGMAIL_REDIRECT_URI=http://localhost:8000/api/v1/gmail/callback\n</code></pre>"},{"location":"api/gmail/#get-authorization-url","title":"Get Authorization URL","text":"<p>Get the URL for Gmail OAuth2 authorization.</p> <pre><code>GET /api/v1/gmail/auth-url\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: <pre><code>{\n  \"auth_url\": \"https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=...\",\n  \"state\": \"random_state_string\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -X GET \"http://localhost:8000/api/v1/gmail/auth-url\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\"\n</code></pre></p>"},{"location":"api/gmail/#authorization-flow","title":"Authorization Flow","text":"<ol> <li>Get auth URL from this endpoint</li> <li>Redirect user to the returned URL</li> <li>User authorizes access to Gmail</li> <li>Google redirects to callback URL with authorization code</li> <li>Callback endpoint exchanges code for access tokens</li> </ol>"},{"location":"api/gmail/#oauth2-callback","title":"OAuth2 Callback","text":"<p>Handle the OAuth2 callback from Google.</p> <pre><code>GET /api/v1/gmail/callback?code=&lt;auth_code&gt;&amp;state=&lt;state&gt;\n</code></pre> <p>Query Parameters: - <code>code</code>: Authorization code from Google - <code>state</code>: State parameter for CSRF protection</p> <p>Response: <pre><code>{\n  \"message\": \"Gmail connected successfully\",\n  \"email\": \"user@gmail.com\",\n  \"status\": \"connected\"\n}\n</code></pre></p> <p>Automatic Handling</p> <p>This endpoint is called automatically by Google after user authorization. You typically don't call it directly.</p>"},{"location":"api/gmail/#sync-emails","title":"Sync Emails","text":"<p>Fetch and process emails from Gmail.</p> <pre><code>POST /api/v1/gmail/sync\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"limit\": 100,\n  \"query\": \"in:inbox after:2024/01/01\",\n  \"force_resync\": false\n}\n</code></pre></p> <p>Parameters: - <code>limit</code> (optional): Number of emails to sync (default: 100, max: 1000) - <code>query</code> (optional): Gmail search query (default: recent emails) - <code>force_resync</code> (optional): Re-process existing emails (default: false)</p> <p>Response: <pre><code>{\n  \"sync_id\": \"sync_12345\",\n  \"status\": \"completed\",\n  \"emails_processed\": 87,\n  \"emails_new\": 23,\n  \"emails_updated\": 4,\n  \"emails_skipped\": 60,\n  \"categories\": {\n    \"business\": 15,\n    \"personal\": 8,\n    \"promotional\": 35,\n    \"transactional\": 12,\n    \"support\": 3\n  },\n  \"processing_time\": 45.67,\n  \"started_at\": \"2024-01-01T00:00:00Z\",\n  \"completed_at\": \"2024-01-01T00:00:45Z\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -X POST \"http://localhost:8000/api/v1/gmail/sync\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"limit\": 200,\n    \"query\": \"in:inbox after:2024/01/01 before:2024/02/01\"\n  }'\n</code></pre></p>"},{"location":"api/gmail/#gmail-search-queries","title":"Gmail Search Queries","text":"<p>Use Gmail search syntax for targeted syncing:</p> <pre><code># Recent emails (default)\n\"in:inbox after:2024/01/01\"\n\n# Specific sender\n\"from:apple@apple.com\"\n\n# Subject keywords\n\"subject:invoice OR subject:receipt\"\n\n# Date range\n\"after:2024/01/01 before:2024/02/01\"\n\n# Labels\n\"label:important\"\n\n# Exclude promotions\n\"-category:promotions\"\n</code></pre>"},{"location":"api/gmail/#get-connection-status","title":"Get Connection Status","text":"<p>Check Gmail connection and sync status.</p> <pre><code>GET /api/v1/gmail/status\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"connected\",\n  \"email\": \"user@gmail.com\",\n  \"connected_at\": \"2024-01-01T00:00:00Z\",\n  \"last_sync\": \"2024-01-02T10:30:00Z\",\n  \"total_emails\": 1247,\n  \"sync_history\": [\n    {\n      \"sync_id\": \"sync_12345\",\n      \"started_at\": \"2024-01-02T10:30:00Z\",\n      \"emails_processed\": 87,\n      \"status\": \"completed\"\n    }\n  ],\n  \"token_status\": \"valid\",\n  \"permissions\": [\n    \"https://www.googleapis.com/auth/gmail.readonly\"\n  ]\n}\n</code></pre></p> <p>Status Values: - <code>not_connected</code>: No Gmail account linked - <code>connected</code>: Active connection with valid tokens - <code>expired</code>: Connection exists but tokens expired - <code>error</code>: Connection error or permission issues</p>"},{"location":"api/gmail/#disconnect-gmail","title":"Disconnect Gmail","text":"<p>Remove Gmail connection and delete associated data.</p> <pre><code>DELETE /api/v1/gmail/disconnect\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"delete_emails\": true,\n  \"revoke_access\": true\n}\n</code></pre></p> <p>Parameters: - <code>delete_emails</code> (optional): Delete processed emails (default: false) - <code>revoke_access</code> (optional): Revoke Google OAuth tokens (default: true)</p> <p>Response: <pre><code>{\n  \"message\": \"Gmail disconnected successfully\",\n  \"emails_deleted\": 1247,\n  \"access_revoked\": true\n}\n</code></pre></p> <p>Data Deletion</p> <p>Disconnecting with <code>delete_emails: true</code> permanently removes all processed emails and their vector embeddings.</p>"},{"location":"api/gmail/#email-processing","title":"Email Processing","text":""},{"location":"api/gmail/#automatic-classification","title":"Automatic Classification","text":"<p>Emails are automatically classified into categories:</p> <ul> <li>Business: Work-related communications, meetings, project updates</li> <li>Personal: Family, friends, personal communications</li> <li>Promotional: Marketing emails, newsletters, deals</li> <li>Transactional: Receipts, confirmations, account notifications</li> <li>Support: Customer service, technical support</li> </ul>"},{"location":"api/gmail/#thread-processing","title":"Thread Processing","text":"<ul> <li>Thread Awareness: Related emails grouped together</li> <li>Context Preservation: Full conversation context maintained</li> <li>Chronological Order: Emails processed in temporal sequence</li> <li>Attachment Handling: Text extraction from supported attachments</li> </ul>"},{"location":"api/gmail/#data-storage","title":"Data Storage","text":"<ul> <li>Vector Embeddings: Semantic search capabilities</li> <li>Metadata: Sender, subject, date, labels, thread ID</li> <li>Content: Full email body with formatting preserved</li> <li>Attachments: Text content extracted and indexed</li> </ul>"},{"location":"api/gmail/#error-responses","title":"Error Responses","text":""},{"location":"api/gmail/#401-unauthorized-no-gmail-connection","title":"401 Unauthorized - No Gmail Connection","text":"<pre><code>{\n  \"detail\": \"Gmail account not connected. Please authorize access first.\"\n}\n</code></pre>"},{"location":"api/gmail/#403-forbidden-insufficient-permissions","title":"403 Forbidden - Insufficient Permissions","text":"<pre><code>{\n  \"detail\": \"Insufficient Gmail permissions. Please re-authorize with required scopes.\"\n}\n</code></pre>"},{"location":"api/gmail/#429-rate-limited","title":"429 Rate Limited","text":"<pre><code>{\n  \"detail\": \"Gmail API rate limit exceeded. Please wait before retrying.\",\n  \"retry_after\": 60\n}\n</code></pre>"},{"location":"api/gmail/#422-invalid-query","title":"422 Invalid Query","text":"<pre><code>{\n  \"detail\": \"Invalid Gmail search query: Unexpected search operator\"\n}\n</code></pre>"},{"location":"api/gmail/#integration-examples","title":"Integration Examples","text":""},{"location":"api/gmail/#complete-oauth-flow-javascript","title":"Complete OAuth Flow (JavaScript)","text":"<pre><code>// Step 1: Get authorization URL\nconst getAuthUrl = async () =&gt; {\n  const response = await fetch('/api/v1/gmail/auth-url', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  const { auth_url } = await response.json();\n\n  // Redirect user to Google authorization\n  window.location.href = auth_url;\n};\n\n// Step 2: Handle callback (automatic)\n// Google redirects to /api/v1/gmail/callback\n\n// Step 3: Sync emails\nconst syncEmails = async () =&gt; {\n  const response = await fetch('/api/v1/gmail/sync', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      limit: 200,\n      query: 'in:inbox after:2024/01/01'\n    })\n  });\n\n  return response.json();\n};\n</code></pre>"},{"location":"api/gmail/#python-integration","title":"Python Integration","text":"<pre><code>import requests\n\nclass GmailIntegration:\n    def __init__(self, token):\n        self.token = token\n        self.base_url = \"http://localhost:8000/api/v1\"\n        self.headers = {\"Authorization\": f\"Bearer {token}\"}\n\n    def get_auth_url(self):\n        response = requests.get(\n            f\"{self.base_url}/gmail/auth-url\",\n            headers=self.headers\n        )\n        return response.json()[\"auth_url\"]\n\n    def sync_emails(self, limit=100, query=None):\n        data = {\"limit\": limit}\n        if query:\n            data[\"query\"] = query\n\n        response = requests.post(\n            f\"{self.base_url}/gmail/sync\",\n            json=data,\n            headers=self.headers\n        )\n        return response.json()\n\n    def get_status(self):\n        response = requests.get(\n            f\"{self.base_url}/gmail/status\",\n            headers=self.headers\n        )\n        return response.json()\n</code></pre>"},{"location":"api/gmail/#best-practices","title":"Best Practices","text":""},{"location":"api/gmail/#sync-strategy","title":"Sync Strategy","text":"<ol> <li>Initial Sync: Start with recent emails (<code>limit: 500</code>)</li> <li>Incremental Sync: Regular small syncs for new emails</li> <li>Targeted Sync: Use queries for specific content</li> <li>Scheduled Sync: Automate regular email fetching</li> </ol>"},{"location":"api/gmail/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Batch Processing: Sync in reasonable batches (100-500 emails)</li> <li>Query Filtering: Use Gmail queries to reduce processing</li> <li>Avoid Re-processing: Use <code>force_resync: false</code> for existing emails</li> <li>Monitor Rate Limits: Respect Gmail API quotas</li> </ol>"},{"location":"api/gmail/#security-considerations","title":"Security Considerations","text":"<ol> <li>Minimal Permissions: Request only required OAuth scopes</li> <li>Token Security: Store refresh tokens securely</li> <li>Regular Cleanup: Remove old or unused connections</li> <li>Audit Access: Monitor sync activities and permissions</li> </ol>"},{"location":"api/queries/","title":"Queries API","text":"<p>Search and query across PDF documents and emails using natural language.</p>"},{"location":"api/queries/#endpoints-overview","title":"Endpoints Overview","text":"Method Endpoint Description POST <code>/api/v1/queries/</code> Submit a new query GET <code>/api/v1/queries/</code> List query history GET <code>/api/v1/queries/{id}</code> Get specific query result"},{"location":"api/queries/#submit-query","title":"Submit Query","text":"<p>Ask questions about your documents and emails.</p> <pre><code>POST /api/v1/queries/\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"query\": \"string\",\n  \"include_sources\": true,\n  \"content_types\": [\"pdf\", \"email\"],\n  \"document_types\": [\"financial\", \"generic\"],\n  \"max_results\": 5\n}\n</code></pre></p> <p>Parameters: - <code>query</code> (required): Natural language question - <code>include_sources</code> (optional): Include source citations (default: true) - <code>content_types</code> (optional): Filter by content type (<code>[\"pdf\", \"email\"]</code>) - <code>document_types</code> (optional): Filter by document type (<code>[\"financial\", \"long_form\", \"generic\"]</code>) - <code>max_results</code> (optional): Maximum number of source chunks (default: 5)</p> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"query\": \"What were my Apple expenses in March?\",\n  \"response\": \"Based on your financial documents, you had $1,247.89 in Apple-related expenses in March 2024. This includes: iPhone purchase ($899.00), App Store purchases ($67.89), and Apple Music subscription ($281.00).\",\n  \"sources\": [\n    {\n      \"id\": \"doc_1_chunk_5\",\n      \"content\": \"03/15/2024 APPLE STORE PURCHASE $899.00\",\n      \"source_type\": \"pdf\",\n      \"document_type\": \"financial\",\n      \"filename\": \"bank_statement_march.pdf\",\n      \"relevance_score\": 0.92,\n      \"page\": 2\n    },\n    {\n      \"id\": \"email_42_chunk_1\",\n      \"content\": \"Your Apple Music subscription has been renewed for $10.99/month\",\n      \"source_type\": \"email\",\n      \"email_subject\": \"Apple Music Subscription Renewed\",\n      \"sender\": \"noreply@apple.com\",\n      \"date\": \"2024-03-01T08:00:00Z\",\n      \"relevance_score\": 0.78\n    }\n  ],\n  \"query_type\": \"cross_content\",\n  \"processing_time\": 2.34,\n  \"created_at\": \"2024-01-01T00:00:00Z\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -X POST \"http://localhost:8000/api/v1/queries/\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"What were my Apple expenses in March?\",\n    \"include_sources\": true,\n    \"content_types\": [\"pdf\", \"email\"]\n  }'\n</code></pre></p>"},{"location":"api/queries/#query-types","title":"Query Types","text":"<p>The system automatically determines the appropriate query strategy:</p>"},{"location":"api/queries/#content-specific-queries","title":"Content-Specific Queries","text":"<ul> <li>PDF Only: \"Find information in my bank statement\"</li> <li>Email Only: \"Show me emails from Apple\"</li> <li>Cross-Content: \"Find all Apple expenses\" (searches both PDFs and emails)</li> </ul>"},{"location":"api/queries/#document-type-specific","title":"Document-Type Specific","text":"<ul> <li>Financial: Optimized for transaction and expense queries</li> <li>Long-form: Deep semantic search for research and analysis</li> <li>Generic: Balanced approach for general information</li> </ul>"},{"location":"api/queries/#list-query-history","title":"List Query History","text":"<p>Retrieve previous queries and results.</p> <pre><code>GET /api/v1/queries/\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Query Parameters: - <code>skip</code> (optional): Number of records to skip (default: 0) - <code>limit</code> (optional): Maximum records to return (default: 50) - <code>query_type</code> (optional): Filter by query type - <code>start_date</code> (optional): Filter queries after date (ISO format) - <code>end_date</code> (optional): Filter queries before date (ISO format)</p> <p>Response: <pre><code>{\n  \"queries\": [\n    {\n      \"id\": 1,\n      \"query\": \"What were my Apple expenses in March?\",\n      \"response_preview\": \"Based on your financial documents, you had $1,247.89...\",\n      \"query_type\": \"cross_content\",\n      \"source_count\": 3,\n      \"processing_time\": 2.34,\n      \"created_at\": \"2024-01-01T00:00:00Z\"\n    }\n  ],\n  \"total\": 1,\n  \"skip\": 0,\n  \"limit\": 50\n}\n</code></pre></p>"},{"location":"api/queries/#get-query-details","title":"Get Query Details","text":"<p>Retrieve complete details for a specific query.</p> <pre><code>GET /api/v1/queries/{id}\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: Returns the same detailed structure as the POST response, including full response text and all sources.</p>"},{"location":"api/queries/#query-optimization","title":"Query Optimization","text":""},{"location":"api/queries/#financial-queries","title":"Financial Queries","text":"<p>Best for transaction and expense analysis:</p> <pre><code>{\n  \"query\": \"How much did I spend on groceries last month?\",\n  \"document_types\": [\"financial\"],\n  \"max_results\": 10\n}\n</code></pre>"},{"location":"api/queries/#research-queries","title":"Research Queries","text":"<p>Best for long-form document analysis:</p> <pre><code>{\n  \"query\": \"Summarize the key findings about machine learning\",\n  \"document_types\": [\"long_form\"],\n  \"max_results\": 8\n}\n</code></pre>"},{"location":"api/queries/#email-communication-queries","title":"Email Communication Queries","text":"<p>Best for email-specific searches:</p> <pre><code>{\n  \"query\": \"Find emails about the quarterly review meeting\",\n  \"content_types\": [\"email\"],\n  \"max_results\": 5\n}\n</code></pre>"},{"location":"api/queries/#cross-content-queries","title":"Cross-Content Queries","text":"<p>Search across all content types:</p> <pre><code>{\n  \"query\": \"Find all information about Project Alpha\",\n  \"content_types\": [\"pdf\", \"email\"],\n  \"max_results\": 10\n}\n</code></pre>"},{"location":"api/queries/#advanced-query-patterns","title":"Advanced Query Patterns","text":""},{"location":"api/queries/#temporal-queries","title":"Temporal Queries","text":"<ul> <li>\"What were my expenses in March 2024?\"</li> <li>\"Show me emails from last week\"</li> <li>\"Find documents created after January 1st\"</li> </ul>"},{"location":"api/queries/#entity-based-queries","title":"Entity-Based Queries","text":"<ul> <li>\"Find all Apple-related transactions\"</li> <li>\"Show communications with John Smith\"</li> <li>\"What projects mention machine learning?\"</li> </ul>"},{"location":"api/queries/#analytical-queries","title":"Analytical Queries","text":"<ul> <li>\"Summarize my monthly spending patterns\"</li> <li>\"What are the main topics in my research papers?\"</li> <li>\"Analyze my email communication trends\"</li> </ul>"},{"location":"api/queries/#comparison-queries","title":"Comparison Queries","text":"<ul> <li>\"Compare Q1 and Q2 expenses\"</li> <li>\"How do my March and April spending differ?\"</li> <li>\"Compare email volume by month\"</li> </ul>"},{"location":"api/queries/#response-structure","title":"Response Structure","text":""},{"location":"api/queries/#source-attribution","title":"Source Attribution","text":"<p>Each response includes detailed source information:</p> <ul> <li>PDF Sources: Document name, page number, chunk content</li> <li>Email Sources: Subject, sender, date, snippet</li> <li>Relevance Score: 0.0-1.0 confidence rating</li> <li>Context: Surrounding text for better understanding</li> </ul>"},{"location":"api/queries/#response-quality","title":"Response Quality","text":"<ul> <li>Factual Accuracy: Responses based only on provided documents</li> <li>Source Citations: All claims linked to specific sources</li> <li>Confidence Indicators: Uncertainty acknowledged when appropriate</li> <li>Hallucination Prevention: Built-in safeguards against false information</li> </ul>"},{"location":"api/queries/#error-responses","title":"Error Responses","text":""},{"location":"api/queries/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n  \"detail\": \"Query cannot be empty\"\n}\n</code></pre>"},{"location":"api/queries/#404-no-results","title":"404 No Results","text":"<pre><code>{\n  \"detail\": \"No relevant content found for the query\"\n}\n</code></pre>"},{"location":"api/queries/#422-processing-error","title":"422 Processing Error","text":"<pre><code>{\n  \"detail\": \"Query processing failed: Invalid content type specified\"\n}\n</code></pre>"},{"location":"api/queries/#integration-examples","title":"Integration Examples","text":""},{"location":"api/queries/#javascript-query","title":"JavaScript Query","text":"<pre><code>const submitQuery = async (queryText) =&gt; {\n  const response = await fetch('/api/v1/queries/', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: queryText,\n      include_sources: true,\n      content_types: ['pdf', 'email']\n    })\n  });\n\n  return response.json();\n};\n</code></pre>"},{"location":"api/queries/#python-query","title":"Python Query","text":"<pre><code>import requests\n\ndef query_documents(query_text, token):\n    data = {\n        \"query\": query_text,\n        \"include_sources\": True,\n        \"content_types\": [\"pdf\", \"email\"]\n    }\n\n    response = requests.post(\n        \"http://localhost:8000/api/v1/queries/\",\n        json=data,\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n\n    return response.json()\n</code></pre>"},{"location":"api/queries/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/queries/#query-optimization_1","title":"Query Optimization","text":"<ul> <li>Specific queries perform better than vague ones</li> <li>Filtered queries (by type/date) are faster</li> <li>Shorter queries process more quickly</li> <li>Semantic similarity improves with more context</li> </ul>"},{"location":"api/queries/#response-times","title":"Response Times","text":"Query Type Typical Response Time Simple PDF query 1-3 seconds Complex cross-content 3-8 seconds Large result set 5-15 seconds"},{"location":"api/queries/#best-practices","title":"Best Practices","text":"<ol> <li>Be specific in your queries</li> <li>Use filters to narrow search scope</li> <li>Check source attribution for accuracy</li> <li>Iterate queries for better results</li> <li>Monitor processing times for optimization</li> </ol>"},{"location":"deployment/local/","title":"Local Development Setup","text":"<p>Complete guide for setting up Personal AI Agent for local development.</p>"},{"location":"deployment/local/#prerequisites","title":"Prerequisites","text":""},{"location":"deployment/local/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: macOS, Linux, or Windows</li> <li>Python: 3.8 or higher (3.9+ recommended)</li> <li>Memory: 8GB RAM minimum, 16GB recommended</li> <li>Storage: 15GB free space for models and data</li> <li>Network: Internet connection for initial setup</li> </ul>"},{"location":"deployment/local/#development-tools","title":"Development Tools","text":"<ul> <li>Git for version control</li> <li>Code editor (VS Code, PyCharm, etc.)</li> <li>Terminal/command line access</li> <li>PDF viewer for testing document uploads</li> </ul>"},{"location":"deployment/local/#installation-steps","title":"Installation Steps","text":""},{"location":"deployment/local/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/your-username/personal-ai-agent.git\ncd personal-ai-agent\n</code></pre>"},{"location":"deployment/local/#2-python-environment-setup","title":"2. Python Environment Setup","text":"<pre><code># Create virtual environment\npython -m venv .venv\n\n# Activate virtual environment\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate     # Windows\n\n# Upgrade pip\npip install --upgrade pip\n</code></pre>"},{"location":"deployment/local/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install Python packages\npip install -r requirements.txt\n\n# Verify installation\npip list | grep -E \"(fastapi|llama|faiss)\"\n</code></pre>"},{"location":"deployment/local/#4-download-ai-models","title":"4. Download AI Models","text":"<pre><code># Download LLM model (this may take time)\npython download_model.py\n\n# Download embedding model\npython download_embedding_model.py\n\n# Verify models\nls -la models/\n</code></pre>"},{"location":"deployment/local/#5-environment-configuration","title":"5. Environment Configuration","text":"<pre><code># Copy environment template\ncp .env.example .env\n\n# Edit configuration (see Configuration section below)\nnano .env  # or your preferred editor\n</code></pre>"},{"location":"deployment/local/#6-database-setup","title":"6. Database Setup","text":"<pre><code># Initialize database\npython setup_db.py\n\n# Create admin user\npython create_admin.py\n\n# Verify setup\npython list_documents.py\n</code></pre>"},{"location":"deployment/local/#configuration","title":"Configuration","text":""},{"location":"deployment/local/#basic-configuration-env","title":"Basic Configuration (.env)","text":"<pre><code># Server Settings\nHOST=localhost\nPORT=8000\nDEBUG=true\n\n# Database\nDATABASE_URL=sqlite:///./personal_ai_agent.db\n\n# Security\nSECRET_KEY=your_development_secret_key_here\nACCESS_TOKEN_EXPIRE_MINUTES=30\n\n# LLM Settings\nLLM_MODEL_PATH=./models/mistral-7b-instruct-v0.1.Q4_K_M.gguf\nUSE_METAL=true  # macOS only\nMETAL_N_GPU_LAYERS=1\n\n# File Uploads\nMAX_FILE_SIZE=10485760  # 10MB\nUPLOAD_DIR=./static/uploads\n\n# Logging\nLOG_LEVEL=DEBUG\n</code></pre>"},{"location":"deployment/local/#gmail-integration-optional","title":"Gmail Integration (Optional)","text":"<pre><code># Gmail OAuth (if using email features)\nGMAIL_CLIENT_ID=your_client_id\nGMAIL_CLIENT_SECRET=your_client_secret\nGMAIL_REDIRECT_URI=http://localhost:8000/api/v1/gmail/callback\n</code></pre>"},{"location":"deployment/local/#running-the-application","title":"Running the Application","text":""},{"location":"deployment/local/#start-development-server","title":"Start Development Server","text":"<pre><code># Basic startup\npython main.py\n\n# Alternative with uvicorn\nuvicorn app.main:app --host localhost --port 8000 --reload\n\n# With specific environment\nENV=development python main.py\n</code></pre>"},{"location":"deployment/local/#verify-installation","title":"Verify Installation","text":"<ol> <li>Health Check: Visit <code>http://localhost:8000/api/v1/health-check</code></li> <li>Web Interface: Open <code>http://localhost:8000</code></li> <li>API Documentation: Visit <code>http://localhost:8000/docs</code></li> </ol>"},{"location":"deployment/local/#development-workflow","title":"Development Workflow","text":""},{"location":"deployment/local/#code-changes","title":"Code Changes","text":"<ol> <li>Make code modifications</li> <li>Server auto-reloads (with --reload flag)</li> <li>Test changes in browser/API client</li> <li>Run tests to verify functionality</li> </ol>"},{"location":"deployment/local/#testing","title":"Testing","text":"<pre><code># Run all tests\npython -m pytest tests/\n\n# Run specific test file\npython test_model_loading.py\n\n# Test document processing\npython test_direct_question.py\n\n# Test email functionality\npython test_email_search.py\n</code></pre>"},{"location":"deployment/local/#database-operations","title":"Database Operations","text":"<pre><code># Reset database\nrm personal_ai_agent.db\npython setup_db.py\n\n# Run migrations\npython migrate_db.py\n\n# View data\npython list_documents.py\n</code></pre>"},{"location":"deployment/local/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"deployment/local/#adding-new-features","title":"Adding New Features","text":"<ol> <li>Create feature branch</li> <li>Implement changes following architecture patterns</li> <li>Add tests for new functionality</li> <li>Update documentation</li> <li>Test thoroughly</li> </ol>"},{"location":"deployment/local/#debugging","title":"Debugging","text":"<pre><code># Enable debug logging\n# In .env: LOG_LEVEL=DEBUG\n\n# Check logs\ntail -f logs/app.log\n\n# Test specific components\npython test_model_loading.py\npython test_config_system.py\n</code></pre>"},{"location":"deployment/local/#ide-configuration","title":"IDE Configuration","text":""},{"location":"deployment/local/#vs-code-setup","title":"VS Code Setup","text":"<pre><code>// .vscode/settings.json\n{\n  \"python.defaultInterpreterPath\": \".venv/bin/python\",\n  \"python.linting.enabled\": true,\n  \"python.linting.pylintEnabled\": true,\n  \"python.formatting.provider\": \"black\"\n}\n</code></pre>"},{"location":"deployment/local/#pycharm-setup","title":"PyCharm Setup","text":"<ol> <li>Open project in PyCharm</li> <li>Configure Python interpreter to <code>.venv/bin/python</code></li> <li>Set up run configuration for <code>main.py</code></li> <li>Configure debugger for FastAPI</li> </ol>"},{"location":"deployment/local/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/local/#common-issues","title":"Common Issues","text":"<p>Port Already in Use <pre><code># Find process using port\nlsof -i :8000\n\n# Kill process\nkill -9 &lt;PID&gt;\n\n# Use different port\nPORT=8001 python main.py\n</code></pre></p> <p>Model Loading Issues <pre><code># Check model files\nls -la models/\n\n# Test model loading\npython test_model_loading.py\n\n# Re-download if corrupted\nrm -rf models/\npython download_model.py\n</code></pre></p> <p>Database Problems <pre><code># Reset database\nrm personal_ai_agent.db\npython setup_db.py\n\n# Check database integrity\nsqlite3 personal_ai_agent.db \"PRAGMA integrity_check;\"\n</code></pre></p>"},{"location":"deployment/local/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/local/#development-performance","title":"Development Performance","text":"<ul> <li>Use SSD storage for better I/O</li> <li>Allocate sufficient RAM (8GB+)</li> <li>Enable hardware acceleration when available</li> <li>Close unnecessary applications</li> </ul>"},{"location":"deployment/local/#code-performance","title":"Code Performance","text":"<ul> <li>Use profiling tools to identify bottlenecks</li> <li>Monitor memory usage during development</li> <li>Test with realistic data volumes</li> <li>Optimize database queries</li> </ul> <p>This local setup guide provides the foundation for Personal AI Agent development. For production deployment, see the Production Deployment guide.</p>"},{"location":"deployment/production/","title":"Production Deployment","text":"<p>Guide for deploying Personal AI Agent in production environments.</p>"},{"location":"deployment/production/#production-considerations","title":"Production Considerations","text":""},{"location":"deployment/production/#infrastructure-requirements","title":"Infrastructure Requirements","text":"<ul> <li>CPU: 4+ cores recommended</li> <li>Memory: 16GB+ RAM for optimal performance</li> <li>Storage: 50GB+ SSD storage</li> <li>Network: Stable internet for Gmail integration</li> <li>OS: Ubuntu 20.04 LTS or CentOS 8+ recommended</li> </ul>"},{"location":"deployment/production/#security-requirements","title":"Security Requirements","text":"<ul> <li>SSL/TLS certificates for HTTPS</li> <li>Firewall configuration</li> <li>Regular security updates</li> <li>Backup and disaster recovery</li> <li>Access control and monitoring</li> </ul>"},{"location":"deployment/production/#deployment-options","title":"Deployment Options","text":""},{"location":"deployment/production/#option-1-single-server-deployment","title":"Option 1: Single Server Deployment","text":"<p>Best for small to medium organizations with controlled user base.</p> <p>Architecture: - Single server running all components - PostgreSQL database - Nginx reverse proxy - SSL termination - Local file storage</p>"},{"location":"deployment/production/#option-2-container-deployment","title":"Option 2: Container Deployment","text":"<p>Recommended for scalable and maintainable deployments.</p> <p>Components: - Docker containers for application - Docker Compose or Kubernetes orchestration - Persistent volumes for data - Load balancing capabilities</p>"},{"location":"deployment/production/#option-3-cloud-deployment","title":"Option 3: Cloud Deployment","text":"<p>For organizations requiring high availability and scalability.</p> <p>Platforms: - AWS EC2 with RDS - Google Cloud Platform - Azure Virtual Machines - Digital Ocean Droplets</p>"},{"location":"deployment/production/#production-configuration","title":"Production Configuration","text":""},{"location":"deployment/production/#environment-variables","title":"Environment Variables","text":"<pre><code># Production Settings\nDEBUG=false\nENV=production\nHOST=0.0.0.0\nPORT=8000\n\n# Database (PostgreSQL recommended)\nDATABASE_URL=postgresql://user:password@localhost:5432/personal_ai_agent\n\n# Security\nSECRET_KEY=your_very_secure_production_key_32_chars_minimum\nACCESS_TOKEN_EXPIRE_MINUTES=15\n\n# CORS (restrict to your domain)\nALLOWED_ORIGINS=https://yourdomain.com,https://app.yourdomain.com\n\n# File Storage\nMAX_FILE_SIZE=10485760\nUPLOAD_DIR=/opt/personal-ai-agent/uploads\n\n# Logging\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"deployment/production/#database-setup-postgresql","title":"Database Setup (PostgreSQL)","text":"<pre><code># Install PostgreSQL\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\n# Create database and user\nsudo -u postgres psql\nCREATE DATABASE personal_ai_agent;\nCREATE USER aiagent WITH PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE personal_ai_agent TO aiagent;\n</code></pre>"},{"location":"deployment/production/#nginx-configuration","title":"Nginx Configuration","text":"<pre><code>server {\n    listen 80;\n    server_name yourdomain.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com;\n\n    ssl_certificate /path/to/certificate.crt;\n    ssl_certificate_key /path/to/private.key;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static/ {\n        alias /opt/personal-ai-agent/static/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n}\n</code></pre>"},{"location":"deployment/production/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/production/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements and install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create directories\nRUN mkdir -p data/vector_db static/uploads logs\n\n# Download models (in production, consider using volume mounts)\nRUN python download_model.py\n\n# Expose port\nEXPOSE 8000\n\n# Run application\nCMD [\"python\", \"main.py\"]\n</code></pre>"},{"location":"deployment/production/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql://aiagent:password@db:5432/personal_ai_agent\n      - DEBUG=false\n    volumes:\n      - ./data:/app/data\n      - ./static:/app/static\n      - ./logs:/app/logs\n    depends_on:\n      - db\n\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=personal_ai_agent\n      - POSTGRES_USER=aiagent\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - app\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"deployment/production/#system-service-setup","title":"System Service Setup","text":""},{"location":"deployment/production/#systemd-service","title":"Systemd Service","text":"<pre><code># /etc/systemd/system/personal-ai-agent.service\n[Unit]\nDescription=Personal AI Agent\nAfter=network.target\n\n[Service]\nType=simple\nUser=aiagent\nWorkingDirectory=/opt/personal-ai-agent\nEnvironment=PATH=/opt/personal-ai-agent/.venv/bin\nExecStart=/opt/personal-ai-agent/.venv/bin/python main.py\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <pre><code># Enable and start service\nsudo systemctl enable personal-ai-agent\nsudo systemctl start personal-ai-agent\nsudo systemctl status personal-ai-agent\n</code></pre>"},{"location":"deployment/production/#security-hardening","title":"Security Hardening","text":""},{"location":"deployment/production/#firewall-configuration","title":"Firewall Configuration","text":"<pre><code># UFW (Ubuntu Firewall)\nsudo ufw allow ssh\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n</code></pre>"},{"location":"deployment/production/#ssl-certificate-lets-encrypt","title":"SSL Certificate (Let's Encrypt)","text":"<pre><code># Install Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d yourdomain.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"deployment/production/#application-security","title":"Application Security","text":"<pre><code># Create dedicated user\nsudo useradd -r -s /bin/false aiagent\n\n# Set file permissions\nsudo chown -R aiagent:aiagent /opt/personal-ai-agent\nsudo chmod -R 750 /opt/personal-ai-agent\n</code></pre>"},{"location":"deployment/production/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/production/#log-management","title":"Log Management","text":"<pre><code># Logrotate configuration\n# /etc/logrotate.d/personal-ai-agent\n/opt/personal-ai-agent/logs/*.log {\n    daily\n    missingok\n    rotate 30\n    compress\n    delaycompress\n    notifempty\n    create 644 aiagent aiagent\n}\n</code></pre>"},{"location":"deployment/production/#health-monitoring","title":"Health Monitoring","text":"<pre><code># Health check script\n#!/bin/bash\n# /opt/personal-ai-agent/health-check.sh\ncurl -f http://localhost:8000/api/v1/health-check || exit 1\n</code></pre>"},{"location":"deployment/production/#application-monitoring","title":"Application Monitoring","text":"<p>Consider implementing: - Prometheus: Metrics collection - Grafana: Visualization and alerting - ELK Stack: Centralized logging - Uptime monitoring: External service monitoring</p>"},{"location":"deployment/production/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment/production/#database-backup","title":"Database Backup","text":"<pre><code># Automated backup script\n#!/bin/bash\n# /opt/personal-ai-agent/backup.sh\nDATE=$(date +%Y%m%d_%H%M%S)\npg_dump personal_ai_agent &gt; /backups/db_backup_$DATE.sql\ngzip /backups/db_backup_$DATE.sql\n\n# Keep only last 30 days\nfind /backups -name \"db_backup_*.sql.gz\" -mtime +30 -delete\n</code></pre>"},{"location":"deployment/production/#file-system-backup","title":"File System Backup","text":"<pre><code># Backup data and uploads\ntar -czf /backups/files_backup_$DATE.tar.gz \\\n    /opt/personal-ai-agent/data \\\n    /opt/personal-ai-agent/static/uploads\n</code></pre>"},{"location":"deployment/production/#recovery-procedures","title":"Recovery Procedures","text":"<pre><code># Database recovery\ngunzip -c /backups/db_backup_YYYYMMDD_HHMMSS.sql.gz | \\\n    psql personal_ai_agent\n\n# File recovery\ntar -xzf /backups/files_backup_YYYYMMDD_HHMMSS.tar.gz -C /\n</code></pre>"},{"location":"deployment/production/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/production/#application-performance","title":"Application Performance","text":"<ul> <li>Use Gunicorn with multiple workers</li> <li>Implement caching (Redis)</li> <li>Optimize database queries</li> <li>Monitor resource usage</li> </ul>"},{"location":"deployment/production/#database-optimization","title":"Database Optimization","text":"<pre><code>-- PostgreSQL optimizations\n-- Increase shared_buffers\n-- Tune work_mem\n-- Configure checkpoint settings\n-- Add appropriate indexes\n</code></pre>"},{"location":"deployment/production/#hardware-optimization","title":"Hardware Optimization","text":"<ul> <li>Use SSD storage for database and vector indexes</li> <li>Ensure sufficient RAM for model loading</li> <li>Consider GPU acceleration where available</li> <li>Network optimization for Gmail API calls</li> </ul>"},{"location":"deployment/production/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"deployment/production/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Load balancer configuration</li> <li>Shared storage for uploads</li> <li>Database clustering</li> <li>Session management</li> </ul>"},{"location":"deployment/production/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>CPU and memory upgrades</li> <li>Storage expansion</li> <li>Network bandwidth increase</li> <li>GPU addition for AI acceleration</li> </ul> <p>This production deployment guide provides comprehensive guidance for enterprise-ready deployments of Personal AI Agent.</p>"},{"location":"deployment/security/","title":"Security Guide","text":"<p>Comprehensive security considerations and best practices for Personal AI Agent deployment.</p>"},{"location":"deployment/security/#security-architecture","title":"Security Architecture","text":"<p>Personal AI Agent is designed with privacy and security as core principles:</p> <ul> <li>Local Processing: All document analysis happens locally</li> <li>Data Isolation: User data is strictly separated</li> <li>Minimal External Calls: Only Gmail OAuth requires external access</li> <li>Encrypted Communications: HTTPS for all web communications</li> <li>Secure Authentication: JWT-based with configurable expiration</li> </ul>"},{"location":"deployment/security/#authentication-security","title":"Authentication Security","text":""},{"location":"deployment/security/#jwt-token-security","title":"JWT Token Security","text":"<pre><code># Use strong, random secret keys (32+ characters)\nSECRET_KEY=your_cryptographically_secure_random_key_here\nALGORITHM=HS256\nACCESS_TOKEN_EXPIRE_MINUTES=15  # Short expiration for security\n</code></pre>"},{"location":"deployment/security/#password-security","title":"Password Security","text":"<ul> <li>Bcrypt Hashing: Industry-standard password hashing</li> <li>Configurable Rounds: Adjustable computational cost</li> <li>No Plain Text Storage: Passwords never stored in plain text</li> </ul> <pre><code># Password hashing configuration\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n</code></pre>"},{"location":"deployment/security/#session-management","title":"Session Management","text":"<ul> <li>Stateless JWT: No server-side session storage</li> <li>Automatic Expiration: Configurable token lifetime</li> <li>Secure Headers: HTTP-only, secure cookie attributes</li> </ul>"},{"location":"deployment/security/#data-privacy","title":"Data Privacy","text":""},{"location":"deployment/security/#local-data-processing","title":"Local Data Processing","text":"<ul> <li>No External AI APIs: All LLM processing happens locally</li> <li>Local Vector Storage: FAISS indices stored locally</li> <li>Local Database: User data in local SQLite/PostgreSQL</li> </ul>"},{"location":"deployment/security/#user-data-isolation","title":"User Data Isolation","text":"<pre><code># All database queries include user isolation\nuser_documents = session.query(Document).filter(\n    Document.user_id == current_user.id\n).all()\n\n# Vector store namespacing\nnamespace = f\"user_{user_id}_doc_{document_id}\"\n</code></pre>"},{"location":"deployment/security/#data-encryption","title":"Data Encryption","text":"<ul> <li>OAuth Tokens: Encrypted at rest</li> <li>Database Encryption: Optional full database encryption</li> <li>File System: Recommend encrypted storage volumes</li> </ul>"},{"location":"deployment/security/#gmail-integration-security","title":"Gmail Integration Security","text":""},{"location":"deployment/security/#oauth2-implementation","title":"OAuth2 Implementation","text":"<ul> <li>Standard OAuth2 Flow: Industry-standard authentication</li> <li>Minimal Scopes: Request only necessary permissions</li> <li>Secure Token Storage: Encrypted refresh tokens</li> <li>Token Rotation: Automatic token refresh</li> </ul> <pre><code># OAuth scopes (read-only)\nGMAIL_SCOPES = [\n    'https://www.googleapis.com/auth/gmail.readonly'\n]\n</code></pre>"},{"location":"deployment/security/#api-security","title":"API Security","text":"<ul> <li>Rate Limiting: Respect Gmail API quotas</li> <li>Error Handling: Secure error messages</li> <li>Token Validation: Verify token authenticity</li> <li>Secure Callbacks: HTTPS-only redirect URIs</li> </ul>"},{"location":"deployment/security/#network-security","title":"Network Security","text":""},{"location":"deployment/security/#https-configuration","title":"HTTPS Configuration","text":"<pre><code># Force HTTPS\nserver {\n    listen 80;\n    server_name yourdomain.com;\n    return 301 https://$server_name$request_uri;\n}\n\n# SSL configuration\nserver {\n    listen 443 ssl http2;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n}\n</code></pre>"},{"location":"deployment/security/#cors-security","title":"CORS Security","text":"<pre><code># Restrict CORS to specific domains\nALLOWED_ORIGINS = [\n    \"https://yourdomain.com\",\n    \"https://app.yourdomain.com\"\n]\n</code></pre>"},{"location":"deployment/security/#firewall-configuration","title":"Firewall Configuration","text":"<pre><code># UFW (Ubuntu)\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n</code></pre>"},{"location":"deployment/security/#input-validation-and-sanitization","title":"Input Validation and Sanitization","text":""},{"location":"deployment/security/#file-upload-security","title":"File Upload Security","text":"<pre><code># File type validation\nALLOWED_MIME_TYPES = ['application/pdf']\nMAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB\n\ndef validate_upload(file):\n    # Check file type\n    if file.content_type not in ALLOWED_MIME_TYPES:\n        raise ValueError(\"Invalid file type\")\n\n    # Check file size\n    if len(file.file.read()) &gt; MAX_FILE_SIZE:\n        raise ValueError(\"File too large\")\n\n    # Reset file pointer\n    file.file.seek(0)\n</code></pre>"},{"location":"deployment/security/#query-input-sanitization","title":"Query Input Sanitization","text":"<pre><code># Sanitize user queries\ndef sanitize_query(query: str) -&gt; str:\n    # Remove potentially dangerous characters\n    sanitized = re.sub(r'[&lt;&gt;\"\\']', '', query)\n\n    # Limit length\n    if len(sanitized) &gt; 1000:\n        sanitized = sanitized[:1000]\n\n    return sanitized.strip()\n</code></pre>"},{"location":"deployment/security/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<ul> <li>Parameterized Queries: Always use SQLAlchemy ORM</li> <li>Input Validation: Validate all user inputs</li> <li>Least Privilege: Database users with minimal permissions</li> </ul> <pre><code># Safe query example\ndocuments = session.query(Document).filter(\n    Document.user_id == user_id,\n    Document.filename.like(f\"%{search_term}%\")\n).all()\n</code></pre>"},{"location":"deployment/security/#system-security","title":"System Security","text":""},{"location":"deployment/security/#file-system-security","title":"File System Security","text":"<pre><code># Secure file permissions\nsudo chown -R aiagent:aiagent /opt/personal-ai-agent\nsudo chmod -R 750 /opt/personal-ai-agent\n\n# Sensitive files\nsudo chmod 600 /opt/personal-ai-agent/.env\nsudo chmod 600 /opt/personal-ai-agent/personal_ai_agent.db\n</code></pre>"},{"location":"deployment/security/#process-security","title":"Process Security","text":"<pre><code># Run as non-root user\nsudo useradd -r -s /bin/false aiagent\n\n# Systemd service with restricted permissions\n[Service]\nUser=aiagent\nGroup=aiagent\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\n</code></pre>"},{"location":"deployment/security/#log-security","title":"Log Security","text":"<pre><code># Secure logging configuration\nimport logging\n\n# Avoid logging sensitive data\nclass SecureFormatter(logging.Formatter):\n    def format(self, record):\n        # Sanitize log messages\n        record.msg = self.sanitize_message(record.msg)\n        return super().format(record)\n\n    def sanitize_message(self, message):\n        # Remove tokens, passwords, etc.\n        return re.sub(r'token=\\w+', 'token=***', str(message))\n</code></pre>"},{"location":"deployment/security/#vulnerability-management","title":"Vulnerability Management","text":""},{"location":"deployment/security/#security-headers","title":"Security Headers","text":"<pre><code># FastAPI security headers\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(TrustedHostMiddleware, allowed_hosts=[\"yourdomain.com\"])\n\n# Custom security headers\n@app.middleware(\"http\")\nasync def add_security_headers(request: Request, call_next):\n    response = await call_next(request)\n    response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n    response.headers[\"X-Frame-Options\"] = \"DENY\"\n    response.headers[\"X-XSS-Protection\"] = \"1; mode=block\"\n    return response\n</code></pre>"},{"location":"deployment/security/#dependency-security","title":"Dependency Security","text":"<pre><code># Regular security updates\npip install --upgrade pip\npip install --upgrade -r requirements.txt\n\n# Security scanning\npip install safety\nsafety check\n\n# Vulnerability scanning\npip install bandit\nbandit -r app/\n</code></pre>"},{"location":"deployment/security/#regular-security-audits","title":"Regular Security Audits","text":"<pre><code># Automated security checks\n#!/bin/bash\n# security-audit.sh\n\necho \"Running security audit...\"\n\n# Check for updates\necho \"Checking for system updates...\"\nsudo apt list --upgradable\n\n# Python security check\necho \"Checking Python dependencies...\"\nsafety check\n\n# File permission check\necho \"Checking file permissions...\"\nfind /opt/personal-ai-agent -type f -perm /o+w\n\n# Log file analysis\necho \"Checking logs for suspicious activity...\"\ngrep -i \"error\\|fail\\|attack\" /opt/personal-ai-agent/logs/app.log\n</code></pre>"},{"location":"deployment/security/#backup-security","title":"Backup Security","text":""},{"location":"deployment/security/#encrypted-backups","title":"Encrypted Backups","text":"<pre><code># Encrypted database backup\npg_dump personal_ai_agent | gpg --cipher-algo AES256 --compress-algo 1 \\\n    --symmetric --output backup_$(date +%Y%m%d).sql.gpg\n\n# Encrypted file backup\ntar -czf - /opt/personal-ai-agent/data | gpg --cipher-algo AES256 \\\n    --symmetric --output data_backup_$(date +%Y%m%d).tar.gz.gpg\n</code></pre>"},{"location":"deployment/security/#secure-backup-storage","title":"Secure Backup Storage","text":"<ul> <li>Off-site Storage: Store backups in different location</li> <li>Access Control: Limit backup access to authorized personnel</li> <li>Encryption: Always encrypt sensitive backups</li> <li>Rotation: Regular backup rotation and testing</li> </ul>"},{"location":"deployment/security/#incident-response","title":"Incident Response","text":""},{"location":"deployment/security/#security-monitoring","title":"Security Monitoring","text":"<pre><code># Security event logging\ndef log_security_event(event_type: str, user_id: int, details: str):\n    security_logger.warning(\n        f\"Security event: {event_type} for user {user_id}: {details}\"\n    )\n</code></pre>"},{"location":"deployment/security/#incident-response-plan","title":"Incident Response Plan","text":"<ol> <li>Detection: Monitoring and alerting systems</li> <li>Assessment: Determine scope and impact</li> <li>Containment: Isolate affected systems</li> <li>Eradication: Remove threats and vulnerabilities</li> <li>Recovery: Restore normal operations</li> <li>Lessons Learned: Improve security measures</li> </ol>"},{"location":"deployment/security/#security-alerts","title":"Security Alerts","text":"<pre><code># Failed login monitoring\ntail -f /opt/personal-ai-agent/logs/app.log | \\\n    grep \"authentication failed\" | \\\n    while read line; do\n        echo \"Security Alert: $line\" | mail -s \"Failed Login\" admin@domain.com\n    done\n</code></pre>"},{"location":"deployment/security/#compliance-and-privacy","title":"Compliance and Privacy","text":""},{"location":"deployment/security/#data-protection-principles","title":"Data Protection Principles","text":"<ul> <li>Data Minimization: Collect only necessary data</li> <li>Purpose Limitation: Use data only for stated purposes</li> <li>Storage Limitation: Retain data only as long as necessary</li> <li>Accuracy: Keep data accurate and up-to-date</li> <li>Security: Implement appropriate technical measures</li> </ul>"},{"location":"deployment/security/#user-rights","title":"User Rights","text":"<ul> <li>Access: Users can view their data</li> <li>Rectification: Users can correct inaccurate data</li> <li>Erasure: Users can delete their data</li> <li>Portability: Users can export their data</li> </ul> <pre><code># Data deletion implementation\nasync def delete_user_data(user_id: int):\n    # Delete database records\n    session.query(Document).filter(Document.user_id == user_id).delete()\n    session.query(EmailMessage).filter(EmailMessage.user_id == user_id).delete()\n\n    # Delete vector indices\n    user_vector_pattern = f\"user_{user_id}_*\"\n    for vector_file in glob.glob(f\"data/vector_db/**/{user_vector_pattern}\"):\n        os.remove(vector_file)\n\n    # Delete uploaded files\n    user_upload_dir = f\"static/uploads/{user_id}\"\n    if os.path.exists(user_upload_dir):\n        shutil.rmtree(user_upload_dir)\n</code></pre>"},{"location":"deployment/security/#security-testing","title":"Security Testing","text":""},{"location":"deployment/security/#penetration-testing-checklist","title":"Penetration Testing Checklist","text":"<ul> <li>[ ] Authentication bypass attempts</li> <li>[ ] SQL injection testing</li> <li>[ ] Cross-site scripting (XSS) tests</li> <li>[ ] File upload vulnerabilities</li> <li>[ ] API endpoint security</li> <li>[ ] Session management testing</li> <li>[ ] Input validation testing</li> </ul>"},{"location":"deployment/security/#security-automation","title":"Security Automation","text":"<pre><code># Automated security testing\n#!/bin/bash\n# security-test.sh\n\n# OWASP ZAP automated scan\nzap-baseline.py -t http://localhost:8000\n\n# SQLMap testing\nsqlmap -u \"http://localhost:8000/api/v1/login\" --batch\n\n# SSL testing\nsslyze --regular localhost:8000\n</code></pre> <p>This security guide provides comprehensive coverage of security considerations for Personal AI Agent. Regular security reviews and updates are essential for maintaining a secure deployment.</p>"},{"location":"development/architecture/","title":"Architecture Overview","text":"<p>Personal AI Agent is built with a modern, modular architecture designed for scalability, maintainability, and privacy.</p>"},{"location":"development/architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    UI[Web Interface] --&gt; API[FastAPI Server]\n    API --&gt; Auth[Authentication Layer]\n    API --&gt; Routes[API Routes]\n\n    Routes --&gt; DocAPI[Documents API]\n    Routes --&gt; QueryAPI[Queries API]\n    Routes --&gt; GmailAPI[Gmail API]\n    Routes --&gt; EmailAPI[Email Search API]\n\n    DocAPI --&gt; DocProcessor[Document Processor]\n    GmailAPI --&gt; EmailProcessor[Email Processor]\n    QueryAPI --&gt; QueryRouter[Query Router]\n\n    DocProcessor --&gt; Classifier[Document Classifier]\n    EmailProcessor --&gt; EmailClassifier[Email Classifier]\n\n    Classifier --&gt; Financial[Financial Processor]\n    Classifier --&gt; LongForm[Long-form Processor]\n    Classifier --&gt; Generic[Generic Processor]\n\n    EmailClassifier --&gt; Business[Business Category]\n    EmailClassifier --&gt; Personal[Personal Category]\n    EmailClassifier --&gt; Promotional[Promotional Category]\n    EmailClassifier --&gt; Transactional[Transactional Category]\n    EmailClassifier --&gt; Support[Support Category]\n\n    Financial --&gt; EmbedService[Embedding Service]\n    LongForm --&gt; EmbedService\n    Generic --&gt; EmbedService\n    Business --&gt; EmbedService\n    Personal --&gt; EmbedService\n    Promotional --&gt; EmbedService\n    Transactional --&gt; EmbedService\n    Support --&gt; EmbedService\n\n    EmbedService --&gt; VectorStore[Vector Store Service]\n    VectorStore --&gt; FAISS[(FAISS Indices)]\n\n    QueryRouter --&gt; VectorStore\n    QueryRouter --&gt; LLM[LLM Service]\n    LLM --&gt; Response[Response Generation]\n\n    API --&gt; Database[(SQLite/PostgreSQL)]\n    GmailAPI --&gt; GoogleAPI[Google OAuth2]\n</code></pre>"},{"location":"development/architecture/#core-components","title":"Core Components","text":""},{"location":"development/architecture/#1-fastapi-application-layer","title":"1. FastAPI Application Layer","text":"<p>Location: <code>app/main.py</code></p> <p>The main application entry point with: - Modern lifespan management - CORS configuration - Static file serving - Exception handling - Health check endpoints</p> <p>Key Features: - Async/await support for high performance - Automatic API documentation generation - Request/response validation - Middleware for logging and security</p>"},{"location":"development/architecture/#2-authentication-system","title":"2. Authentication System","text":"<p>Location: <code>app/api/endpoints/auth.py</code>, <code>app/core/security.py</code></p> <p>JWT-based authentication with: - User registration and login - Password hashing with bcrypt - Token generation and validation - User session management</p> <p>Security Features: - Configurable token expiration - Secure password storage - CSRF protection - Rate limiting (planned)</p>"},{"location":"development/architecture/#3-document-processing-pipeline","title":"3. Document Processing Pipeline","text":"<p>Location: <code>app/utils/processors/</code></p> <p>Multi-stage document processing:</p>"},{"location":"development/architecture/#document-classification-apputilsdocument_classifierpy","title":"Document Classification (<code>app/utils/document_classifier.py</code>)","text":"<p>Automatically categorizes documents: - Financial: Bank statements, invoices (transaction patterns, dollar amounts) - Long-form: Research papers, reports (50+ pages, academic structure) - Generic: Resumes, letters (default classification)</p>"},{"location":"development/architecture/#category-specific-processors","title":"Category-Specific Processors","text":"<ul> <li>Financial Processor: Small chunks (500 chars) for precise transaction matching</li> <li>PDF Processor: Large chunks (1500 chars) for comprehensive context</li> <li>Base Processor: Balanced approach (1000 chars) for general documents</li> </ul>"},{"location":"development/architecture/#4-gmail-integration-system","title":"4. Gmail Integration System","text":"<p>Location: <code>app/services/email/</code>, <code>app/api/endpoints/gmail.py</code></p> <p>Complete email processing pipeline:</p>"},{"location":"development/architecture/#oauth2-authentication","title":"OAuth2 Authentication","text":"<ul> <li>Google Cloud Console integration</li> <li>Secure token management</li> <li>Refresh token handling</li> <li>Permission scoping</li> </ul>"},{"location":"development/architecture/#email-classification-appservicesemailemail_classifierpy","title":"Email Classification (<code>app/services/email/email_classifier.py</code>)","text":"<p>Categorizes emails into: - Business: Meeting invites, project updates - Personal: Family, friends communications - Promotional: Marketing, newsletters - Transactional: Receipts, confirmations - Support: Customer service interactions</p>"},{"location":"development/architecture/#thread-processing","title":"Thread Processing","text":"<ul> <li>Conversation context preservation</li> <li>Chronological message ordering</li> <li>Thread-aware chunking</li> <li>Attachment text extraction</li> </ul>"},{"location":"development/architecture/#5-vector-storage-system","title":"5. Vector Storage System","text":"<p>Location: <code>app/services/vector_store_service.py</code></p> <p>Organized vector database architecture:</p>"},{"location":"development/architecture/#storage-structure","title":"Storage Structure","text":"<pre><code>data/vector_db/\n\u251c\u2500\u2500 financial/\n\u2502   \u251c\u2500\u2500 user_{id}_doc_{filename}.index\n\u2502   \u2514\u2500\u2500 user_{id}_doc_{filename}.pkl\n\u251c\u2500\u2500 long_form/\n\u251c\u2500\u2500 generic/\n\u2514\u2500\u2500 emails/\n    \u251c\u2500\u2500 user_{id}_email_{source}_{id}.index\n    \u2514\u2500\u2500 user_{id}_email_{source}_{id}.pkl\n</code></pre>"},{"location":"development/architecture/#faiss-integration","title":"FAISS Integration","text":"<ul> <li>Category-specific indices</li> <li>User isolation</li> <li>Optimized search performance</li> <li>Scalable storage</li> </ul>"},{"location":"development/architecture/#6-query-processing-engine","title":"6. Query Processing Engine","text":"<p>Location: <code>app/services/query_router.py</code>, <code>app/utils/llm.py</code></p> <p>Intelligent query routing and processing:</p>"},{"location":"development/architecture/#query-router","title":"Query Router","text":"<ul> <li>Content type determination (PDF, email, both)</li> <li>Category-aware search routing</li> <li>Context assembly from multiple sources</li> <li>Cross-content ranking</li> </ul>"},{"location":"development/architecture/#llm-integration","title":"LLM Integration","text":"<ul> <li>Mistral 7B local model</li> <li>Metal acceleration (macOS)</li> <li>Context-aware response generation</li> <li>Source attribution and citation</li> </ul>"},{"location":"development/architecture/#7-embedding-service","title":"7. Embedding Service","text":"<p>Location: <code>app/services/embedding_service.py</code></p> <p>Vector embedding generation: - Sentence Transformers (MiniLM-L6-v2) - Batch processing optimization - Normalized embeddings - Consistent vector dimensions</p>"},{"location":"development/architecture/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"development/architecture/#1-document-upload-flow","title":"1. Document Upload Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant API as FastAPI\n    participant C as Classifier\n    participant P as Processor\n    participant E as Embedding\n    participant V as Vector Store\n    participant DB as Database\n\n    U-&gt;&gt;API: Upload PDF\n    API-&gt;&gt;C: Classify document\n    C-&gt;&gt;P: Route to appropriate processor\n    P-&gt;&gt;E: Generate embeddings\n    E-&gt;&gt;V: Store vectors\n    P-&gt;&gt;DB: Store metadata\n    API-&gt;&gt;U: Processing complete\n</code></pre>"},{"location":"development/architecture/#2-gmail-sync-flow","title":"2. Gmail Sync Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant API as FastAPI\n    participant G as Gmail API\n    participant EC as Email Classifier\n    participant EP as Email Processor\n    participant E as Embedding\n    participant V as Vector Store\n\n    U-&gt;&gt;API: Initiate sync\n    API-&gt;&gt;G: Fetch emails\n    G-&gt;&gt;EC: Classify emails\n    EC-&gt;&gt;EP: Process by category\n    EP-&gt;&gt;E: Generate embeddings\n    E-&gt;&gt;V: Store email vectors\n    API-&gt;&gt;U: Sync complete\n</code></pre>"},{"location":"development/architecture/#3-query-processing-flow","title":"3. Query Processing Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant API as FastAPI\n    participant QR as Query Router\n    participant V as Vector Store\n    participant LLM as LLM Service\n    participant RF as Response Filter\n\n    U-&gt;&gt;API: Submit query\n    API-&gt;&gt;QR: Route query\n    QR-&gt;&gt;V: Vector search\n    V-&gt;&gt;QR: Return sources\n    QR-&gt;&gt;LLM: Generate response\n    LLM-&gt;&gt;RF: Filter response\n    RF-&gt;&gt;API: Final response\n    API-&gt;&gt;U: Return answer\n</code></pre>"},{"location":"development/architecture/#database-schema","title":"Database Schema","text":""},{"location":"development/architecture/#core-tables","title":"Core Tables","text":""},{"location":"development/architecture/#users","title":"Users","text":"<pre><code>CREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    hashed_password VARCHAR(100),\n    is_active BOOLEAN,\n    created_at TIMESTAMP\n);\n</code></pre>"},{"location":"development/architecture/#documents","title":"Documents","text":"<pre><code>CREATE TABLE documents (\n    id INTEGER PRIMARY KEY,\n    user_id INTEGER REFERENCES users(id),\n    filename VARCHAR(255),\n    original_filename VARCHAR(255),\n    file_path VARCHAR(500),\n    file_size INTEGER,\n    document_type VARCHAR(50),\n    processing_status VARCHAR(50),\n    created_at TIMESTAMP,\n    processed_at TIMESTAMP\n);\n</code></pre>"},{"location":"development/architecture/#document-chunks","title":"Document Chunks","text":"<pre><code>CREATE TABLE document_chunks (\n    id INTEGER PRIMARY KEY,\n    document_id INTEGER REFERENCES documents(id),\n    chunk_index INTEGER,\n    content TEXT,\n    chunk_size INTEGER,\n    metadata JSONB\n);\n</code></pre>"},{"location":"development/architecture/#email-messages","title":"Email Messages","text":"<pre><code>CREATE TABLE email_messages (\n    id INTEGER PRIMARY KEY,\n    user_id INTEGER REFERENCES users(id),\n    gmail_id VARCHAR(100),\n    thread_id VARCHAR(100),\n    subject TEXT,\n    sender VARCHAR(255),\n    date TIMESTAMP,\n    category VARCHAR(50),\n    processed_at TIMESTAMP\n);\n</code></pre>"},{"location":"development/architecture/#queries","title":"Queries","text":"<pre><code>CREATE TABLE queries (\n    id INTEGER PRIMARY KEY,\n    user_id INTEGER REFERENCES users(id),\n    query_text TEXT,\n    response TEXT,\n    query_type VARCHAR(50),\n    processing_time FLOAT,\n    created_at TIMESTAMP\n);\n</code></pre>"},{"location":"development/architecture/#configuration-architecture","title":"Configuration Architecture","text":""},{"location":"development/architecture/#environment-based-configuration","title":"Environment-Based Configuration","text":"<p>Location: <code>app/core/config.py</code></p> <p>Hierarchical configuration system: 1. Default values 2. Environment variables 3. Configuration files 4. Runtime overrides</p>"},{"location":"development/architecture/#configuration-categories","title":"Configuration Categories","text":""},{"location":"development/architecture/#server-configuration","title":"Server Configuration","text":"<ul> <li>Host, port, debug mode</li> <li>CORS settings</li> <li>Static file paths</li> </ul>"},{"location":"development/architecture/#security-configuration","title":"Security Configuration","text":"<ul> <li>JWT secret keys</li> <li>Token expiration</li> <li>Password hashing parameters</li> </ul>"},{"location":"development/architecture/#llm-configuration","title":"LLM Configuration","text":"<ul> <li>Model paths and parameters</li> <li>Hardware acceleration settings</li> <li>Context window sizes</li> </ul>"},{"location":"development/architecture/#database-configuration","title":"Database Configuration","text":"<ul> <li>Connection strings</li> <li>Pool settings</li> <li>Migration parameters</li> </ul>"},{"location":"development/architecture/#gmail-integration","title":"Gmail Integration","text":"<ul> <li>OAuth2 credentials</li> <li>API quotas and limits</li> <li>Sync parameters</li> </ul>"},{"location":"development/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"development/architecture/#authentication-security","title":"Authentication Security","text":"<ul> <li>JWT token-based authentication</li> <li>Bcrypt password hashing</li> <li>Configurable token expiration</li> <li>CSRF protection</li> </ul>"},{"location":"development/architecture/#data-security","title":"Data Security","text":"<ul> <li>User data isolation</li> <li>Encrypted token storage</li> <li>Local processing (no external API calls)</li> <li>Configurable data retention</li> </ul>"},{"location":"development/architecture/#api-security","title":"API Security","text":"<ul> <li>Request validation</li> <li>Rate limiting (planned)</li> <li>Input sanitization</li> <li>Error message sanitization</li> </ul>"},{"location":"development/architecture/#gmail-security","title":"Gmail Security","text":"<ul> <li>OAuth2 flow with minimal permissions</li> <li>Secure token refresh</li> <li>Revocable access tokens</li> <li>Audit logging</li> </ul>"},{"location":"development/architecture/#performance-architecture","title":"Performance Architecture","text":""},{"location":"development/architecture/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Vector embedding caching</li> <li>Query result caching</li> <li>Model loading optimization</li> <li>Database connection pooling</li> </ul>"},{"location":"development/architecture/#optimization-techniques","title":"Optimization Techniques","text":"<ul> <li>Async/await throughout</li> <li>Batch processing for embeddings</li> <li>Category-specific search optimization</li> <li>Hardware acceleration (Metal/CUDA)</li> </ul>"},{"location":"development/architecture/#scalability-considerations","title":"Scalability Considerations","text":"<ul> <li>User data isolation</li> <li>Horizontal scaling support</li> <li>Database optimization</li> <li>Vector store partitioning</li> </ul>"},{"location":"development/architecture/#development-architecture","title":"Development Architecture","text":""},{"location":"development/architecture/#modular-design","title":"Modular Design","text":"<ul> <li>Clear separation of concerns</li> <li>Dependency injection</li> <li>Interface-based design</li> <li>Testable components</li> </ul>"},{"location":"development/architecture/#code-organization","title":"Code Organization","text":"<pre><code>app/\n\u251c\u2500\u2500 api/           # API endpoints\n\u251c\u2500\u2500 core/          # Core configuration\n\u251c\u2500\u2500 db/            # Database models\n\u251c\u2500\u2500 services/      # Business logic\n\u251c\u2500\u2500 utils/         # Utilities\n\u2514\u2500\u2500 schemas/       # Pydantic models\n</code></pre>"},{"location":"development/architecture/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit tests for components</li> <li>Integration tests for workflows</li> <li>API endpoint testing</li> <li>Performance testing</li> </ul>"},{"location":"development/architecture/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"development/architecture/#planned-enhancements","title":"Planned Enhancements","text":"<ul> <li>Notion integration</li> <li>Advanced analytics</li> <li>Multi-tenant support</li> <li>Cloud deployment options</li> </ul>"},{"location":"development/architecture/#scalability-roadmap","title":"Scalability Roadmap","text":"<ul> <li>Microservices architecture</li> <li>Container orchestration</li> <li>Distributed vector storage</li> <li>Advanced caching layers</li> </ul>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>Welcome to the Personal AI Agent project! This guide will help you contribute effectively to the codebase.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>4GB+ RAM for local LLM testing</li> <li>Basic knowledge of FastAPI, SQLAlchemy, and modern Python</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork and Clone <pre><code>git clone https://github.com/your-username/personal-ai-agent.git\ncd personal-ai-agent\n</code></pre></p> </li> <li> <p>Set Up Environment <pre><code>python -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Configure Environment <pre><code>cp .env.example .env\n# Edit .env with your settings\n</code></pre></p> </li> <li> <p>Download Models <pre><code>python download_model.py\npython download_embedding_model.py\n</code></pre></p> </li> <li> <p>Initialize Database <pre><code>python setup_db.py\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#2-make-changes","title":"2. Make Changes","text":"<p>Follow our coding standards and architecture patterns.</p>"},{"location":"development/contributing/#3-test-your-changes","title":"3. Test Your Changes","text":"<pre><code># Run relevant tests\npython -m pytest tests/\n\n# Test specific functionality\npython test_your_feature.py\n\n# Manual testing\npython main.py\n</code></pre>"},{"location":"development/contributing/#4-commit-changes","title":"4. Commit Changes","text":"<pre><code>git add .\ngit commit -m \"feat: add new feature description\"\n</code></pre>"},{"location":"development/contributing/#5-submit-pull-request","title":"5. Submit Pull Request","text":"<ul> <li>Push to your fork</li> <li>Create pull request from your feature branch</li> <li>Fill out the PR template</li> <li>Wait for review</li> </ul>"},{"location":"development/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"development/contributing/#python-style-guide","title":"Python Style Guide","text":"<p>We follow PEP 8 with some modifications:</p> <pre><code># Good: Clear function names and docstrings\nasync def classify_document(content: str, page_count: int = None) -&gt; DocumentClassification:\n    \"\"\"\n    Classify a document based on its content and metadata.\n\n    Args:\n        content: The text content of the document\n        page_count: Number of pages (optional)\n\n    Returns:\n        DocumentClassification with type and confidence\n    \"\"\"\n    pass\n\n# Good: Type hints\ndef process_financial_document(\n    content: str, \n    chunk_size: int = 500\n) -&gt; List[DocumentChunk]:\n    pass\n\n# Good: Constants\nFINANCIAL_CHUNK_SIZE = 500\nLONG_FORM_CHUNK_SIZE = 1500\nGENERIC_CHUNK_SIZE = 1000\n</code></pre>"},{"location":"development/contributing/#import-organization","title":"Import Organization","text":"<pre><code># Standard library imports\nimport os\nimport logging\nfrom typing import List, Optional, Dict\n\n# Third-party imports\nfrom fastapi import FastAPI, HTTPException\nfrom sqlalchemy import Column, Integer, String\nimport numpy as np\n\n# Local imports\nfrom app.core.config import settings\nfrom app.db.models import Document\nfrom app.utils.processors import BaseProcessor\n</code></pre>"},{"location":"development/contributing/#error-handling","title":"Error Handling","text":"<pre><code># Good: Specific exceptions with context\nclass DocumentProcessingError(Exception):\n    \"\"\"Raised when document processing fails\"\"\"\n    def __init__(self, message: str, document_id: int = None):\n        self.message = message\n        self.document_id = document_id\n        super().__init__(self.message)\n\n# Good: Proper exception handling\ntry:\n    result = process_document(content)\nexcept DocumentProcessingError as e:\n    logger.error(f\"Document processing failed: {e.message}\")\n    raise HTTPException(status_code=422, detail=e.message)\n</code></pre>"},{"location":"development/contributing/#asyncawait-best-practices","title":"Async/Await Best Practices","text":"<pre><code># Good: Async functions for I/O operations\nasync def save_document_chunks(chunks: List[DocumentChunk]) -&gt; None:\n    async with get_db_session() as session:\n        for chunk in chunks:\n            session.add(chunk)\n        await session.commit()\n\n# Good: Use async context managers\nasync def process_with_timeout(content: str) -&gt; str:\n    async with asyncio.timeout(30):\n        return await slow_processing_function(content)\n</code></pre>"},{"location":"development/contributing/#architecture-guidelines","title":"Architecture Guidelines","text":""},{"location":"development/contributing/#component-structure","title":"Component Structure","text":"<p>When adding new features, follow our modular architecture:</p> <pre><code>app/\n\u251c\u2500\u2500 api/endpoints/      # API routes\n\u251c\u2500\u2500 core/              # Configuration and core utilities\n\u251c\u2500\u2500 db/                # Database models and connections\n\u251c\u2500\u2500 services/          # Business logic services\n\u251c\u2500\u2500 utils/             # Utility functions and processors\n\u2514\u2500\u2500 schemas/           # Pydantic models\n</code></pre>"},{"location":"development/contributing/#adding-new-processors","title":"Adding New Processors","text":"<ol> <li> <p>Inherit from BaseProcessor <pre><code>from app.utils.processors.base_processor import BaseProcessor\n\nclass YourProcessor(BaseProcessor):\n    def __init__(self):\n        super().__init__(chunk_size=1000, overlap=200)\n\n    def process_content(self, content: str) -&gt; List[str]:\n        # Your processing logic\n        pass\n</code></pre></p> </li> <li> <p>Register in DocumentClassifier <pre><code># In app/utils/document_classifier.py\ndef get_processor(self, document_type: str) -&gt; BaseProcessor:\n    processors = {\n        \"financial\": FinancialProcessor(),\n        \"long_form\": PDFProcessor(),\n        \"generic\": BaseProcessor(),\n        \"your_type\": YourProcessor(),  # Add here\n    }\n    return processors.get(document_type, BaseProcessor())\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#adding-new-api-endpoints","title":"Adding New API Endpoints","text":"<ol> <li> <p>Create endpoint file <pre><code># app/api/endpoints/your_feature.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom app.api.dependencies import get_current_user\nfrom app.schemas.your_feature import YourFeatureSchema\n\nrouter = APIRouter()\n\n@router.post(\"/\")\nasync def create_your_feature(\n    data: YourFeatureSchema,\n    current_user = Depends(get_current_user)\n):\n    # Implementation\n    pass\n</code></pre></p> </li> <li> <p>Register in main app <pre><code># app/main.py\nfrom app.api.endpoints import your_feature\n\napp.include_router(\n    your_feature.router, \n    prefix=f\"{settings.API_V1_STR}/your-feature\", \n    tags=[\"your-feature\"]\n)\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#database-migrations","title":"Database Migrations","text":"<ol> <li> <p>Create migration script <pre><code># migrate_your_feature.py\nfrom app.db.database import engine\nfrom sqlalchemy import text\n\ndef migrate():\n    with engine.connect() as conn:\n        conn.execute(text(\"\"\"\n            ALTER TABLE your_table \n            ADD COLUMN new_field VARCHAR(100)\n        \"\"\"))\n        conn.commit()\n\nif __name__ == \"__main__\":\n    migrate()\n</code></pre></p> </li> <li> <p>Test migration <pre><code>python migrate_your_feature.py\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<pre><code># tests/test_your_feature.py\nimport pytest\nfrom app.services.your_service import YourService\n\nclass TestYourFeature:\n    @pytest.fixture\n    def your_service(self):\n        return YourService()\n\n    def test_basic_functionality(self, your_service):\n        result = your_service.process(\"test input\")\n        assert result is not None\n        assert result.status == \"success\"\n\n    @pytest.mark.asyncio\n    async def test_async_functionality(self, your_service):\n        result = await your_service.async_process(\"test input\")\n        assert result is not None\n</code></pre>"},{"location":"development/contributing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test individual components</li> <li>Integration Tests: Test component interactions</li> <li>API Tests: Test endpoint functionality</li> <li>Performance Tests: Test response times and memory usage</li> </ol>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># All tests\npython -m pytest tests/\n\n# Specific test file\npython -m pytest tests/test_your_feature.py\n\n# With coverage\npython -m pytest tests/ --cov=app\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<pre><code>class DocumentProcessor:\n    \"\"\"\n    Processes documents for vector storage and search.\n\n    This class handles the complete document processing pipeline including\n    classification, chunking, embedding generation, and storage.\n\n    Attributes:\n        chunk_size: Default chunk size for processing\n        overlap: Overlap between chunks for context preservation\n\n    Example:\n        processor = DocumentProcessor()\n        chunks = processor.process_document(content, document_type=\"financial\")\n    \"\"\"\n\n    async def process_document(\n        self, \n        content: str, \n        document_type: str = \"generic\"\n    ) -&gt; List[DocumentChunk]:\n        \"\"\"\n        Process document content into searchable chunks.\n\n        Args:\n            content: The document text content\n            document_type: Type of document for processing strategy\n\n        Returns:\n            List of processed document chunks\n\n        Raises:\n            DocumentProcessingError: If processing fails\n            ValueError: If content is empty or invalid\n        \"\"\"\n        pass\n</code></pre>"},{"location":"development/contributing/#api-documentation","title":"API Documentation","text":"<p>FastAPI automatically generates OpenAPI documentation, but add examples:</p> <pre><code>@router.post(\"/\", response_model=DocumentResponse)\nasync def upload_document(\n    file: UploadFile = File(..., description=\"PDF file to process\"),\n    current_user = Depends(get_current_user)\n):\n    \"\"\"\n    Upload and process a PDF document.\n\n    - **file**: PDF file (max 10MB)\n    - **returns**: Document metadata and processing status\n\n    The document will be automatically classified and processed according to its type:\n    - Financial documents use small chunks for transaction precision\n    - Long-form documents use large chunks for context preservation\n    - Generic documents use balanced chunking strategy\n    \"\"\"\n    pass\n</code></pre>"},{"location":"development/contributing/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>Use conventional commits format:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre>"},{"location":"development/contributing/#types","title":"Types","text":"<ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Code style changes (formatting, etc.)</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Adding or updating tests</li> <li><code>chore</code>: Maintenance tasks</li> </ul>"},{"location":"development/contributing/#examples","title":"Examples","text":"<pre><code>git commit -m \"feat(email): add Gmail OAuth2 integration\"\ngit commit -m \"fix(vector): resolve FAISS index corruption issue\"\ngit commit -m \"docs(api): update authentication endpoint documentation\"\ngit commit -m \"test(classifier): add unit tests for document classification\"\n</code></pre>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"development/contributing/#pr-title-format","title":"PR Title Format","text":"<p>Use the same format as commit messages: <pre><code>feat(scope): brief description of changes\n</code></pre></p>"},{"location":"development/contributing/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Description\nBrief description of what this PR does.\n\n## Changes\n- List of specific changes made\n- Another change\n- Third change\n\n## Testing\n- [ ] Unit tests pass\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n- [ ] Performance impact assessed\n\n## Documentation\n- [ ] Code is documented\n- [ ] API documentation updated\n- [ ] User documentation updated (if needed)\n\n## Screenshots (if applicable)\n[Add screenshots for UI changes]\n\n## Related Issues\nCloses #123\nRelated to #456\n</code></pre>"},{"location":"development/contributing/#review-checklist","title":"Review Checklist","text":"<p>Before submitting:</p> <ul> <li>[ ] Code follows style guidelines</li> <li>[ ] Tests are included and passing</li> <li>[ ] Documentation is updated</li> <li>[ ] No sensitive information in commits</li> <li>[ ] Performance impact considered</li> <li>[ ] Backward compatibility maintained</li> </ul>"},{"location":"development/contributing/#security-guidelines","title":"Security Guidelines","text":""},{"location":"development/contributing/#sensitive-information","title":"Sensitive Information","text":"<ul> <li>Never commit API keys, passwords, or tokens</li> <li>Use environment variables for configuration</li> <li>Sanitize user inputs</li> <li>Validate file uploads properly</li> </ul>"},{"location":"development/contributing/#authentication","title":"Authentication","text":"<ul> <li>Always use proper authentication for API endpoints</li> <li>Validate user permissions for operations</li> <li>Use secure password hashing (bcrypt)</li> <li>Implement proper session management</li> </ul>"},{"location":"development/contributing/#data-privacy","title":"Data Privacy","text":"<ul> <li>Ensure user data isolation</li> <li>Implement proper access controls</li> <li>Follow privacy-by-design principles</li> <li>Document data handling practices</li> </ul>"},{"location":"development/contributing/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/contributing/#vector-operations","title":"Vector Operations","text":"<ul> <li>Use batch processing for embeddings</li> <li>Implement proper caching strategies</li> <li>Monitor memory usage during processing</li> <li>Optimize database queries</li> </ul>"},{"location":"development/contributing/#api-performance","title":"API Performance","text":"<ul> <li>Use async/await for I/O operations</li> <li>Implement request timeout limits</li> <li>Monitor response times</li> <li>Use appropriate data pagination</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#resources","title":"Resources","text":"<ul> <li>Architecture Documentation</li> <li>API Reference</li> <li>Testing Guide</li> <li>CLAUDE.md - Development commands and workflows (in project root)</li> </ul>"},{"location":"development/contributing/#communication","title":"Communication","text":"<ul> <li>Open GitHub issues for bugs or feature requests</li> <li>Use discussions for questions and ideas</li> <li>Follow the code of conduct in all interactions</li> <li>Be respectful and constructive in reviews</li> </ul>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#version-numbering","title":"Version Numbering","text":"<p>We follow semantic versioning (SemVer): - <code>MAJOR.MINOR.PATCH</code> - Major: Breaking changes - Minor: New features (backward compatible) - Patch: Bug fixes</p>"},{"location":"development/contributing/#release-checklist","title":"Release Checklist","text":"<ul> <li>[ ] All tests pass</li> <li>[ ] Documentation updated</li> <li>[ ] Version number incremented</li> <li>[ ] Changelog updated</li> <li>[ ] Performance benchmarks run</li> <li>[ ] Security review completed</li> </ul> <p>Thank you for contributing to Personal AI Agent!</p>"},{"location":"development/database/","title":"Database Schema and Management","text":"<p>Detailed information about the database structure, models, and management operations.</p>"},{"location":"development/database/#database-architecture","title":"Database Architecture","text":"<p>Personal AI Agent uses a relational database for metadata storage with vector databases for semantic search.</p>"},{"location":"development/database/#supported-database-systems","title":"Supported Database Systems","text":"<ul> <li>SQLite: Default for development and single-user deployments</li> <li>PostgreSQL: Recommended for production and multi-user systems</li> </ul>"},{"location":"development/database/#core-database-schema","title":"Core Database Schema","text":""},{"location":"development/database/#users-table","title":"Users Table","text":"<p>Stores user account information and authentication data.</p> <pre><code>CREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    hashed_password VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <p>Key Features: - Unique username and email constraints - Bcrypt hashed passwords - Soft delete capability with is_active flag - Automatic timestamp tracking</p>"},{"location":"development/database/#documents-table","title":"Documents Table","text":"<p>Tracks uploaded PDF documents and their processing status.</p> <pre><code>CREATE TABLE documents (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    filename VARCHAR(255) NOT NULL,\n    original_filename VARCHAR(255) NOT NULL,\n    file_path VARCHAR(500) NOT NULL,\n    file_size INTEGER NOT NULL,\n    document_type VARCHAR(50) NOT NULL,\n    processing_status VARCHAR(50) DEFAULT 'pending',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL,\n    chunk_count INTEGER DEFAULT 0,\n    metadata TEXT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Document Types: - <code>financial</code>: Bank statements, invoices, receipts - <code>long_form</code>: Research papers, reports, contracts - <code>generic</code>: Resumes, letters, personal documents</p> <p>Processing Status: - <code>pending</code>: Upload received, processing not started - <code>processing</code>: Active text extraction and analysis - <code>completed</code>: Ready for queries - <code>failed</code>: Processing error occurred</p>"},{"location":"development/database/#document-chunks-table","title":"Document Chunks Table","text":"<p>Stores processed text chunks for vector search and retrieval.</p> <pre><code>CREATE TABLE document_chunks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    document_id INTEGER NOT NULL,\n    chunk_index INTEGER NOT NULL,\n    content TEXT NOT NULL,\n    chunk_size INTEGER NOT NULL,\n    metadata TEXT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE CASCADE\n);\n</code></pre>"},{"location":"development/database/#email-messages-table","title":"Email Messages Table","text":"<p>Tracks processed Gmail messages and their metadata.</p> <pre><code>CREATE TABLE email_messages (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    gmail_id VARCHAR(100) NOT NULL,\n    thread_id VARCHAR(100) NOT NULL,\n    subject TEXT NOT NULL,\n    sender VARCHAR(255) NOT NULL,\n    recipient VARCHAR(255) NOT NULL,\n    date TIMESTAMP NOT NULL,\n    category VARCHAR(50) NOT NULL,\n    labels TEXT NULL,\n    has_attachments BOOLEAN DEFAULT FALSE,\n    content TEXT NOT NULL,\n    processing_status VARCHAR(50) DEFAULT 'pending',\n    processed_at TIMESTAMP NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    UNIQUE(user_id, gmail_id)\n);\n</code></pre> <p>Email Categories: - <code>business</code>: Work-related communications - <code>personal</code>: Family and friends - <code>promotional</code>: Marketing and newsletters - <code>transactional</code>: Receipts and confirmations - <code>support</code>: Customer service interactions</p>"},{"location":"development/database/#queries-table","title":"Queries Table","text":"<p>Logs user queries and system responses for analytics and debugging.</p> <pre><code>CREATE TABLE queries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    query_text TEXT NOT NULL,\n    response TEXT NOT NULL,\n    query_type VARCHAR(50) NOT NULL,\n    sources_used TEXT NULL,\n    processing_time FLOAT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre>"},{"location":"development/database/#oauth-tokens-table","title":"OAuth Tokens Table","text":"<p>Securely stores Gmail OAuth2 tokens for authenticated API access.</p> <pre><code>CREATE TABLE oauth_tokens (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    service VARCHAR(50) NOT NULL,\n    access_token TEXT NOT NULL,\n    refresh_token TEXT NULL,\n    token_expiry TIMESTAMP NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    UNIQUE(user_id, service)\n);\n</code></pre>"},{"location":"development/database/#database-operations","title":"Database Operations","text":""},{"location":"development/database/#initial-setup","title":"Initial Setup","text":"<p>Create the database and tables:</p> <pre><code># Initialize database\npython setup_db.py\n\n# Verify setup\npython -c \"from app.db.database import engine; print('Database ready')\"\n</code></pre>"},{"location":"development/database/#migrations","title":"Migrations","text":"<p>Apply database schema changes:</p> <pre><code># General migrations\npython migrate_db.py\n\n# Add constraints and indexes\npython migrate_db_constraints.py\n\n# Email-specific migrations\npython migrate_email_db.py\n\n# Performance optimizations\npython migrate_add_performance_indexes.py\n</code></pre>"},{"location":"development/database/#maintenance-operations","title":"Maintenance Operations","text":"<pre><code># List all documents\npython list_documents.py\n\n# Check database integrity\npython -c \"\nfrom app.db.database import engine\nfrom sqlalchemy import text\nwith engine.connect() as conn:\n    result = conn.execute(text('PRAGMA integrity_check'))\n    print(result.fetchall())\n\"\n\n# Backup database (SQLite)\ncp personal_ai_agent.db personal_ai_agent.db.backup\n\n# Compact database\npython -c \"\nfrom app.db.database import engine\nfrom sqlalchemy import text\nwith engine.connect() as conn:\n    conn.execute(text('VACUUM'))\n\"\n</code></pre>"},{"location":"development/database/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/database/#indexing-strategy","title":"Indexing Strategy","text":"<p>Key indexes for optimal performance:</p> <pre><code>-- User lookup optimization\nCREATE INDEX idx_users_username ON users(username);\nCREATE INDEX idx_users_email ON users(email);\n\n-- Document queries\nCREATE INDEX idx_documents_user_id ON documents(user_id);\nCREATE INDEX idx_documents_type ON documents(document_type);\nCREATE INDEX idx_documents_status ON documents(processing_status);\nCREATE INDEX idx_documents_created ON documents(created_at);\n\n-- Chunk retrieval\nCREATE INDEX idx_chunks_document_id ON document_chunks(document_id);\nCREATE INDEX idx_chunks_index ON document_chunks(document_id, chunk_index);\n\n-- Email queries\nCREATE INDEX idx_emails_user_id ON email_messages(user_id);\nCREATE INDEX idx_emails_category ON email_messages(category);\nCREATE INDEX idx_emails_date ON email_messages(date);\nCREATE INDEX idx_emails_sender ON email_messages(sender);\nCREATE INDEX idx_emails_thread ON email_messages(thread_id);\n\n-- Query analytics\nCREATE INDEX idx_queries_user_id ON queries(user_id);\nCREATE INDEX idx_queries_created ON queries(created_at);\nCREATE INDEX idx_queries_type ON queries(query_type);\n</code></pre>"},{"location":"development/database/#query-optimization","title":"Query Optimization","text":"<p>Common query patterns and optimizations:</p> <pre><code># Efficient document retrieval\ndef get_user_documents(user_id: int, document_type: str = None):\n    query = session.query(Document).filter(Document.user_id == user_id)\n    if document_type:\n        query = query.filter(Document.document_type == document_type)\n    return query.order_by(Document.created_at.desc()).all()\n\n# Optimized email search\ndef get_user_emails(user_id: int, category: str = None, limit: int = 50):\n    query = session.query(EmailMessage).filter(EmailMessage.user_id == user_id)\n    if category:\n        query = query.filter(EmailMessage.category == category)\n    return query.order_by(EmailMessage.date.desc()).limit(limit).all()\n</code></pre>"},{"location":"development/database/#data-management","title":"Data Management","text":""},{"location":"development/database/#user-data-isolation","title":"User Data Isolation","text":"<p>Each user's data is strictly isolated:</p> <pre><code># All queries include user_id filter\nuser_documents = session.query(Document).filter(\n    Document.user_id == current_user.id\n).all()\n\n# Vector stores use user-specific namespaces\nvector_namespace = f\"user_{user_id}_doc_{document_id}\"\n</code></pre>"},{"location":"development/database/#data-cleanup","title":"Data Cleanup","text":"<p>Automated cleanup procedures:</p> <pre><code># Remove orphaned chunks\ndef cleanup_orphaned_chunks():\n    session.execute(text(\"\"\"\n        DELETE FROM document_chunks \n        WHERE document_id NOT IN (SELECT id FROM documents)\n    \"\"\"))\n\n# Clean old query logs (optional)\ndef cleanup_old_queries(days: int = 90):\n    cutoff_date = datetime.now() - timedelta(days=days)\n    session.query(Query).filter(\n        Query.created_at &lt; cutoff_date\n    ).delete()\n</code></pre>"},{"location":"development/database/#backup-strategies","title":"Backup Strategies","text":"<p>Development (SQLite): <pre><code># Simple file copy\ncp personal_ai_agent.db backup_$(date +%Y%m%d).db\n\n# With compression\ntar -czf backup_$(date +%Y%m%d).tar.gz personal_ai_agent.db data/\n</code></pre></p> <p>Production (PostgreSQL): <pre><code># Full database dump\npg_dump personal_ai_agent &gt; backup_$(date +%Y%m%d).sql\n\n# Compressed backup\npg_dump personal_ai_agent | gzip &gt; backup_$(date +%Y%m%d).sql.gz\n\n# Schema-only backup\npg_dump --schema-only personal_ai_agent &gt; schema_backup.sql\n</code></pre></p>"},{"location":"development/database/#security-considerations","title":"Security Considerations","text":""},{"location":"development/database/#data-protection","title":"Data Protection","text":"<ul> <li>Password Hashing: Bcrypt with configurable rounds</li> <li>Token Encryption: OAuth tokens encrypted at rest</li> <li>SQL Injection Prevention: Parameterized queries only</li> <li>Access Control: User-based data isolation</li> </ul>"},{"location":"development/database/#audit-logging","title":"Audit Logging","text":"<p>Query logging for security and debugging:</p> <pre><code>def log_query(user_id: int, query_text: str, response: str):\n    query_log = Query(\n        user_id=user_id,\n        query_text=query_text,\n        response=response,\n        query_type=determine_query_type(query_text),\n        created_at=datetime.utcnow()\n    )\n    session.add(query_log)\n    session.commit()\n</code></pre>"},{"location":"development/database/#development-tools","title":"Development Tools","text":""},{"location":"development/database/#database-inspection","title":"Database Inspection","text":"<pre><code># Check table schema\nfrom sqlalchemy import inspect\ninspector = inspect(engine)\nprint(inspector.get_columns('documents'))\n\n# Analyze table sizes\ndef analyze_table_sizes():\n    tables = ['users', 'documents', 'document_chunks', 'email_messages', 'queries']\n    for table in tables:\n        count = session.execute(text(f\"SELECT COUNT(*) FROM {table}\")).scalar()\n        print(f\"{table}: {count} rows\")\n</code></pre>"},{"location":"development/database/#migration-testing","title":"Migration Testing","text":"<pre><code># Test migration on copy\ndef test_migration():\n    # Create backup\n    shutil.copy('personal_ai_agent.db', 'test_migration.db')\n\n    # Apply migration to test database\n    test_engine = create_engine('sqlite:///test_migration.db')\n    # Run migration logic\n\n    # Verify results\n    # Cleanup test database\n    os.remove('test_migration.db')\n</code></pre>"},{"location":"development/database/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/database/#common-issues","title":"Common Issues","text":"<p>Database Lock Errors: <pre><code># Check for active connections\nlsof personal_ai_agent.db\n\n# Force unlock (SQLite)\npython -c \"\nimport sqlite3\nconn = sqlite3.connect('personal_ai_agent.db')\nconn.execute('BEGIN IMMEDIATE;')\nconn.rollback()\n\"\n</code></pre></p> <p>Migration Failures: <pre><code># Check current schema version\npython -c \"\nfrom app.db.database import engine\nfrom sqlalchemy import text\nwith engine.connect() as conn:\n    try:\n        result = conn.execute(text('SELECT version FROM schema_version'))\n        print(result.fetchone())\n    except:\n        print('No schema version table')\n\"\n\n# Reset to clean state\nrm personal_ai_agent.db\npython setup_db.py\n</code></pre></p> <p>Performance Issues: <pre><code># Analyze query performance\npython -c \"\nfrom app.db.database import engine\nfrom sqlalchemy import text\nwith engine.connect() as conn:\n    conn.execute(text('EXPLAIN QUERY PLAN SELECT * FROM documents'))\n\"\n\n# Rebuild indexes\npython migrate_add_performance_indexes.py\n</code></pre></p> <p>This database documentation provides a comprehensive overview of the data architecture and management procedures for Personal AI Agent.</p>"},{"location":"development/processing/","title":"Document Processing Pipeline","text":"<p>Detailed overview of how documents and emails are processed from upload to searchable content.</p>"},{"location":"development/processing/#processing-overview","title":"Processing Overview","text":"<p>The Personal AI Agent employs a sophisticated multi-stage processing pipeline optimized for different content types.</p>"},{"location":"development/processing/#document-processing-pipeline_1","title":"Document Processing Pipeline","text":""},{"location":"development/processing/#stage-1-upload-and-validation","title":"Stage 1: Upload and Validation","text":"<ul> <li>File type verification (PDF required)</li> <li>Size limit enforcement</li> <li>Virus scanning (optional)</li> <li>User authentication check</li> </ul>"},{"location":"development/processing/#stage-2-text-extraction","title":"Stage 2: Text Extraction","text":"<ul> <li>PyPDF-based text extraction</li> <li>Metadata extraction (page count, creation date)</li> <li>Structure analysis (headers, tables, formatting)</li> </ul>"},{"location":"development/processing/#stage-3-classification","title":"Stage 3: Classification","text":"<ul> <li>Content pattern analysis</li> <li>Document type determination</li> <li>Confidence score assignment</li> </ul>"},{"location":"development/processing/#stage-4-category-specific-processing","title":"Stage 4: Category-Specific Processing","text":"<ul> <li>Financial: 500-character chunks, transaction focus</li> <li>Long-form: 1500-character chunks, context preservation</li> <li>Generic: 1000-character chunks, balanced approach</li> </ul>"},{"location":"development/processing/#stage-5-embedding-generation","title":"Stage 5: Embedding Generation","text":"<ul> <li>Sentence transformer model (MiniLM)</li> <li>Vector representation creation</li> <li>Normalization and optimization</li> </ul>"},{"location":"development/processing/#stage-6-storage-and-indexing","title":"Stage 6: Storage and Indexing","text":"<ul> <li>FAISS vector index creation</li> <li>Database metadata storage</li> <li>User namespace organization</li> </ul>"},{"location":"development/processing/#email-processing-pipeline","title":"Email Processing Pipeline","text":""},{"location":"development/processing/#stage-1-oauth-authentication","title":"Stage 1: OAuth Authentication","text":"<ul> <li>Google OAuth2 flow</li> <li>Token validation and refresh</li> <li>Permission verification</li> </ul>"},{"location":"development/processing/#stage-2-email-ingestion","title":"Stage 2: Email Ingestion","text":"<ul> <li>Gmail API integration</li> <li>Batch fetching with rate limiting</li> <li>Thread context preservation</li> </ul>"},{"location":"development/processing/#stage-3-email-classification","title":"Stage 3: Email Classification","text":"<ul> <li>Content analysis for category determination</li> <li>Sender pattern recognition</li> <li>Subject line analysis</li> </ul>"},{"location":"development/processing/#stage-4-content-processing","title":"Stage 4: Content Processing","text":"<ul> <li>Text extraction from HTML/plain text</li> <li>Attachment processing</li> <li>Thread relationship mapping</li> </ul>"},{"location":"development/processing/#stage-5-vector-generation","title":"Stage 5: Vector Generation","text":"<ul> <li>Similar to document processing</li> <li>Email-specific optimizations</li> <li>Thread-aware chunking</li> </ul>"},{"location":"development/processing/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/processing/#optimization-strategies","title":"Optimization Strategies","text":"<ul> <li>Parallel processing for large batches</li> <li>Incremental processing for updates</li> <li>Cache optimization for repeated operations</li> <li>Resource monitoring and throttling</li> </ul>"},{"location":"development/processing/#error-handling","title":"Error Handling","text":"<ul> <li>Graceful degradation for processing failures</li> <li>Retry mechanisms with exponential backoff</li> <li>Comprehensive logging and monitoring</li> <li>User notification for failed processing</li> </ul> <p>This is a placeholder for detailed processing pipeline documentation. Full implementation would include code examples, error handling strategies, and performance optimization techniques.</p>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>Comprehensive testing strategy and guidelines for the Personal AI Agent.</p>"},{"location":"development/testing/#testing-philosophy","title":"Testing Philosophy","text":"<p>The Personal AI Agent follows a multi-layered testing approach:</p> <ol> <li>Unit Tests: Individual component testing</li> <li>Integration Tests: Cross-component workflows</li> <li>API Tests: Endpoint functionality and contracts</li> <li>Performance Tests: System performance and scalability</li> <li>Manual Tests: User workflow validation</li> </ol>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":""},{"location":"development/testing/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 test_document_classifier.py\n\u2502   \u251c\u2500\u2500 test_email_classifier.py\n\u2502   \u2514\u2500\u2500 test_processors.py\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 test_document_workflow.py\n\u2502   \u251c\u2500\u2500 test_email_workflow.py\n\u2502   \u2514\u2500\u2500 test_query_workflow.py\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 test_auth_endpoints.py\n\u2502   \u251c\u2500\u2500 test_document_endpoints.py\n\u2502   \u2514\u2500\u2500 test_query_endpoints.py\n\u2514\u2500\u2500 performance/\n    \u251c\u2500\u2500 test_vector_search.py\n    \u2514\u2500\u2500 test_concurrent_processing.py\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#all-tests","title":"All Tests","text":"<pre><code># Run complete test suite\npython -m pytest tests/\n\n# Run with coverage\npython -m pytest tests/ --cov=app --cov-report=html\n</code></pre>"},{"location":"development/testing/#specific-test-categories","title":"Specific Test Categories","text":"<pre><code># Unit tests only\npython -m pytest tests/unit/\n\n# Integration tests\npython -m pytest tests/integration/\n\n# API tests\npython -m pytest tests/api/\n\n# Performance tests\npython -m pytest tests/performance/\n</code></pre>"},{"location":"development/testing/#individual-test-files","title":"Individual Test Files","text":"<pre><code># Document classifier tests\npython -m pytest tests/test_document_classifier.py\n\n# Specific test function\npython -m pytest tests/test_document_classifier.py::test_financial_classification\n</code></pre>"},{"location":"development/testing/#test-scripts","title":"Test Scripts","text":"<p>The project includes numerous test scripts for manual and automated testing:</p>"},{"location":"development/testing/#model-and-system-tests","title":"Model and System Tests","text":""},{"location":"development/testing/#model-loading-tests","title":"Model Loading Tests","text":"<pre><code># Test LLM model loading\npython test_model_loading.py\n\n# Test Mistral model specifically\npython test_mistral_model.py\n\n# Test embedding model\npython download_embedding_model.py\n</code></pre>"},{"location":"development/testing/#configuration-tests","title":"Configuration Tests","text":"<pre><code># Test configuration system\npython test_config_system.py\n\n# Test error handling\npython test_error_handling.py\n</code></pre>"},{"location":"development/testing/#document-processing-tests","title":"Document Processing Tests","text":""},{"location":"development/testing/#classification-tests","title":"Classification Tests","text":"<pre><code># Test document classification\npython test_classification_tags_fix.py\n\n# Debug document chunks\npython debug_chunks_detail.py\n</code></pre>"},{"location":"development/testing/#processing-tests","title":"Processing Tests","text":"<pre><code># Test bank document processing\npython test_bank_only.py\n\n# Test direct question processing\npython test_direct_question.py\n\n# Test hallucination prevention\npython test_hallucination_prevention.py\n</code></pre>"},{"location":"development/testing/#email-integration-tests","title":"Email Integration Tests","text":""},{"location":"development/testing/#email-search-tests","title":"Email Search Tests","text":"<pre><code># Test email search functionality\npython test_email_search.py\n\n# Test email sync\npython test_email_sync_fix.py\n\n# Test concurrent token refresh\npython test_concurrent_token_refresh.py\n</code></pre>"},{"location":"development/testing/#email-processing-tests","title":"Email Processing Tests","text":"<pre><code># Test direct email queries\npython test_direct_query.py\n\n# Test API query functionality\npython test_api_query.py\n</code></pre>"},{"location":"development/testing/#cross-content-tests","title":"Cross-Content Tests","text":""},{"location":"development/testing/#source-attribution-tests","title":"Source Attribution Tests","text":"<pre><code># Test source attribution\npython test_source_attribution_fix.py\n\n# Test direct source fixes\npython test_source_fix_direct.py\n\n# Debug source attribution\npython debug_source_attribution.py\n</code></pre>"},{"location":"development/testing/#mixed-content-tests","title":"Mixed Content Tests","text":"<pre><code># Test mixed sources (PDFs + emails)\npython test_mixed_sources.py\n\n# Test specific amounts\npython test_specific_amounts.py\n</code></pre>"},{"location":"development/testing/#performance-tests","title":"Performance Tests","text":""},{"location":"development/testing/#database-performance","title":"Database Performance","text":"<pre><code># Test performance indexes\npython test_performance_indexes.py\n\n# Add performance indexes\npython migrate_add_performance_indexes.py\n</code></pre>"},{"location":"development/testing/#apple-specific-tests","title":"Apple-Specific Tests","text":"<pre><code># Test Apple-specific queries\npython test_apple_specific.py\n\n# Test final Apple implementation\npython test_final_apple.py\n\n# Test filter debugging\npython test_filter_debug.py\n</code></pre>"},{"location":"development/testing/#unit-testing","title":"Unit Testing","text":""},{"location":"development/testing/#document-classifier-tests","title":"Document Classifier Tests","text":"<pre><code># tests/test_document_classifier.py\nimport pytest\nfrom app.utils.document_classifier import DocumentClassifier\n\nclass TestDocumentClassifier:\n    def test_financial_classification(self):\n        classifier = DocumentClassifier()\n\n        # Test bank statement content\n        content = \"Account Number: 1234567890\\nBalance: $5,432.10\\nTransaction Date: 03/15/2024\"\n        result = classifier.classify(content)\n\n        assert result.document_type == \"financial\"\n        assert result.confidence &gt; 0.8\n\n    def test_long_form_classification(self):\n        classifier = DocumentClassifier()\n\n        # Test research paper content (50+ pages)\n        content = \"Abstract\\n\" + \"Lorem ipsum \" * 1000  # Simulate long content\n        result = classifier.classify(content, page_count=75)\n\n        assert result.document_type == \"long_form\"\n        assert result.confidence &gt; 0.7\n\n    def test_generic_classification(self):\n        classifier = DocumentClassifier()\n\n        # Test resume content\n        content = \"JOHN DOE\\nSoftware Engineer\\nExperience:\\n- Python Development\"\n        result = classifier.classify(content)\n\n        assert result.document_type == \"generic\"\n</code></pre>"},{"location":"development/testing/#email-classifier-tests","title":"Email Classifier Tests","text":"<pre><code># tests/test_email_classifier.py\nimport pytest\nfrom app.services.email.email_classifier import EmailClassifier\n\nclass TestEmailClassifier:\n    def test_business_email_classification(self):\n        classifier = EmailClassifier()\n\n        email_data = {\n            \"subject\": \"Team Meeting Tomorrow at 2 PM\",\n            \"sender\": \"manager@company.com\",\n            \"content\": \"Hi team, let's discuss the quarterly results...\"\n        }\n\n        result = classifier.classify_email(email_data)\n        assert result.category == \"business\"\n        assert result.confidence &gt; 0.8\n\n    def test_transactional_email_classification(self):\n        classifier = EmailClassifier()\n\n        email_data = {\n            \"subject\": \"Your Receipt from Apple Store\",\n            \"sender\": \"noreply@apple.com\",\n            \"content\": \"Thank you for your purchase. Amount: $999.00\"\n        }\n\n        result = classifier.classify_email(email_data)\n        assert result.category == \"transactional\"\n        assert result.confidence &gt; 0.9\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"development/testing/#document-processing-workflow","title":"Document Processing Workflow","text":"<pre><code># tests/integration/test_document_workflow.py\nimport pytest\nfrom app.api.endpoints.documents import upload_document\nfrom app.services.vector_store_service import VectorStoreService\n\nclass TestDocumentWorkflow:\n    async def test_complete_document_processing(self):\n        # Upload document\n        document = await upload_document(test_pdf_file, user_id=1)\n\n        # Verify classification\n        assert document.document_type in [\"financial\", \"long_form\", \"generic\"]\n\n        # Verify processing\n        assert document.processing_status == \"completed\"\n        assert document.chunk_count &gt; 0\n\n        # Verify vector storage\n        vector_service = VectorStoreService()\n        vectors = await vector_service.search(\n            user_id=1,\n            query=\"test query\",\n            document_types=[document.document_type]\n        )\n\n        assert len(vectors) &gt; 0\n</code></pre>"},{"location":"development/testing/#email-processing-workflow","title":"Email Processing Workflow","text":"<pre><code># tests/integration/test_email_workflow.py\nimport pytest\nfrom app.services.gmail_service import GmailService\nfrom app.services.email.email_processor import EmailProcessor\n\nclass TestEmailWorkflow:\n    async def test_email_sync_and_search(self):\n        # Mock Gmail API response\n        gmail_service = GmailService()\n        emails = await gmail_service.sync_emails(user_id=1, limit=10)\n\n        # Verify processing\n        assert len(emails) &gt; 0\n\n        for email in emails:\n            assert email.category in [\"business\", \"personal\", \"promotional\", \"transactional\", \"support\"]\n            assert email.processing_status == \"completed\"\n\n        # Test search functionality\n        search_results = await gmail_service.search_emails(\n            user_id=1,\n            query=\"test query\"\n        )\n\n        assert isinstance(search_results, list)\n</code></pre>"},{"location":"development/testing/#api-testing","title":"API Testing","text":""},{"location":"development/testing/#authentication-tests","title":"Authentication Tests","text":"<pre><code># tests/api/test_auth_endpoints.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\nclass TestAuthEndpoints:\n    def test_register_user(self):\n        response = client.post(\"/api/v1/auth/register\", json={\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"password\": \"testpassword123\"\n        })\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"username\"] == \"testuser\"\n        assert data[\"email\"] == \"test@example.com\"\n\n    def test_login_user(self):\n        # First register\n        client.post(\"/api/v1/auth/register\", json={\n            \"username\": \"testuser2\",\n            \"email\": \"test2@example.com\",\n            \"password\": \"testpassword123\"\n        })\n\n        # Then login\n        response = client.post(\"/api/v1/auth/login\", json={\n            \"username\": \"testuser2\",\n            \"password\": \"testpassword123\"\n        })\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"access_token\" in data\n        assert data[\"token_type\"] == \"bearer\"\n</code></pre>"},{"location":"development/testing/#document-api-tests","title":"Document API Tests","text":"<pre><code># tests/api/test_document_endpoints.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\nclass TestDocumentEndpoints:\n    def test_upload_document(self):\n        # Login first to get token\n        login_response = client.post(\"/api/v1/auth/login\", json={\n            \"username\": \"testuser\",\n            \"password\": \"testpassword123\"\n        })\n        token = login_response.json()[\"access_token\"]\n\n        # Upload document\n        with open(\"test_document.pdf\", \"rb\") as f:\n            response = client.post(\n                \"/api/v1/documents/upload\",\n                files={\"file\": f},\n                headers={\"Authorization\": f\"Bearer {token}\"}\n            )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"id\" in data\n        assert data[\"processing_status\"] in [\"processing\", \"completed\"]\n\n    def test_list_documents(self):\n        token = self.get_auth_token()\n\n        response = client.get(\n            \"/api/v1/documents/\",\n            headers={\"Authorization\": f\"Bearer {token}\"}\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"documents\" in data\n        assert isinstance(data[\"documents\"], list)\n</code></pre>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"development/testing/#vector-search-performance","title":"Vector Search Performance","text":"<pre><code># tests/performance/test_vector_search.py\nimport time\nimport pytest\nfrom app.services.vector_store_service import VectorStoreService\n\nclass TestVectorSearchPerformance:\n    def test_search_response_time(self):\n        vector_service = VectorStoreService()\n\n        start_time = time.time()\n        results = vector_service.search(\n            user_id=1,\n            query=\"test query\",\n            limit=10\n        )\n        end_time = time.time()\n\n        response_time = end_time - start_time\n        assert response_time &lt; 2.0  # Should respond within 2 seconds\n        assert len(results) &lt;= 10\n\n    def test_concurrent_searches(self):\n        import asyncio\n\n        async def perform_search():\n            vector_service = VectorStoreService()\n            return await vector_service.search(\n                user_id=1,\n                query=\"concurrent test query\"\n            )\n\n        # Run 10 concurrent searches\n        start_time = time.time()\n        tasks = [perform_search() for _ in range(10)]\n        results = asyncio.run(asyncio.gather(*tasks))\n        end_time = time.time()\n\n        total_time = end_time - start_time\n        assert total_time &lt; 10.0  # All searches within 10 seconds\n        assert len(results) == 10\n</code></pre>"},{"location":"development/testing/#memory-usage-tests","title":"Memory Usage Tests","text":"<pre><code># tests/performance/test_memory_usage.py\nimport psutil\nimport pytest\nfrom app.utils.llm import LLMService\n\nclass TestMemoryUsage:\n    def test_llm_memory_usage(self):\n        process = psutil.Process()\n        initial_memory = process.memory_info().rss\n\n        # Load LLM\n        llm_service = LLMService()\n        llm_service.load_model()\n\n        loaded_memory = process.memory_info().rss\n        memory_increase = loaded_memory - initial_memory\n\n        # Should use less than 8GB (in bytes)\n        assert memory_increase &lt; 8 * 1024 * 1024 * 1024\n</code></pre>"},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":""},{"location":"development/testing/#pytest-configuration","title":"pytest Configuration","text":"<pre><code># pytest.ini\n[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts = \n    --strict-markers\n    --disable-warnings\n    -v\nmarkers =\n    slow: marks tests as slow\n    integration: marks tests as integration tests\n    api: marks tests as API tests\n    performance: marks tests as performance tests\n</code></pre>"},{"location":"development/testing/#test-environment","title":"Test Environment","text":"<pre><code># .env.testing\nDATABASE_URL=sqlite:///./test_personal_ai_agent.db\nSECRET_KEY=test_secret_key_for_testing_only\nLLM_MODEL_PATH=./models/test_model.gguf\nDEBUG=true\nLOG_LEVEL=DEBUG\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/test.yml\nname: Test Suite\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: 3.9\n\n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n        pip install pytest pytest-cov\n\n    - name: Run tests\n      run: |\n        pytest tests/ --cov=app --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v1\n</code></pre>"},{"location":"development/testing/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"development/testing/#test-data-management","title":"Test Data Management","text":"<ol> <li>Use fixtures for common test data</li> <li>Clean up after tests (database, files)</li> <li>Mock external services (Gmail API, etc.)</li> <li>Use test-specific data to avoid conflicts</li> </ol>"},{"location":"development/testing/#test-isolation","title":"Test Isolation","text":"<ol> <li>Independent tests - each test should work in isolation</li> <li>Clean state - reset database/vector store between tests</li> <li>No shared state between test methods</li> <li>Deterministic results - avoid randomness in tests</li> </ol>"},{"location":"development/testing/#performance-testing_1","title":"Performance Testing","text":"<ol> <li>Set realistic thresholds for response times</li> <li>Test with realistic data sizes</li> <li>Monitor memory usage during tests</li> <li>Test concurrent scenarios</li> </ol>"},{"location":"development/testing/#manual-testing-checklist","title":"Manual Testing Checklist","text":""},{"location":"development/testing/#document-upload-flow","title":"Document Upload Flow","text":"<ul> <li>[ ] Upload various PDF types (financial, long-form, generic)</li> <li>[ ] Verify classification accuracy</li> <li>[ ] Test processing status updates</li> <li>[ ] Validate vector storage</li> </ul>"},{"location":"development/testing/#gmail-integration-flow","title":"Gmail Integration Flow","text":"<ul> <li>[ ] OAuth2 authorization flow</li> <li>[ ] Email sync functionality</li> <li>[ ] Email classification accuracy</li> <li>[ ] Search functionality</li> </ul>"},{"location":"development/testing/#query-processing-flow","title":"Query Processing Flow","text":"<ul> <li>[ ] Simple document queries</li> <li>[ ] Complex cross-content queries</li> <li>[ ] Source attribution accuracy</li> <li>[ ] Response quality</li> </ul>"},{"location":"development/testing/#error-handling","title":"Error Handling","text":"<ul> <li>[ ] Invalid file uploads</li> <li>[ ] Network connectivity issues</li> <li>[ ] Authentication failures</li> <li>[ ] Rate limiting scenarios</li> </ul>"},{"location":"development/vector-storage/","title":"Vector Storage System","text":"<p>Understanding the FAISS-based vector storage architecture for semantic search capabilities.</p>"},{"location":"development/vector-storage/#overview","title":"Overview","text":"<p>Personal AI Agent uses FAISS (Facebook AI Similarity Search) for efficient vector storage and retrieval, enabling semantic search across documents and emails.</p>"},{"location":"development/vector-storage/#architecture","title":"Architecture","text":""},{"location":"development/vector-storage/#storage-organization","title":"Storage Organization","text":"<pre><code>data/vector_db/\n\u251c\u2500\u2500 financial/          # Financial documents\n\u251c\u2500\u2500 long_form/         # Long-form documents  \n\u251c\u2500\u2500 generic/           # Generic documents\n\u2514\u2500\u2500 emails/            # Email messages\n</code></pre>"},{"location":"development/vector-storage/#index-structure","title":"Index Structure","text":"<p>Each content item gets its own FAISS index: - <code>user_{id}_doc_{filename}.index</code> - FAISS index file - <code>user_{id}_doc_{filename}.pkl</code> - Metadata pickle file</p>"},{"location":"development/vector-storage/#implementation-details","title":"Implementation Details","text":""},{"location":"development/vector-storage/#embedding-generation","title":"Embedding Generation","text":"<pre><code>from sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\nembeddings = model.encode(text_chunks)\n</code></pre>"},{"location":"development/vector-storage/#index-creation","title":"Index Creation","text":"<pre><code>import faiss\nimport numpy as np\n\n# Create FAISS index\ndimension = 384  # MiniLM embedding dimension\nindex = faiss.IndexFlatIP(dimension)  # Inner product similarity\n\n# Add vectors\nvectors = np.array(embeddings).astype('float32')\nindex.add(vectors)\n\n# Save index\nfaiss.write_index(index, f\"{namespace}.index\")\n</code></pre>"},{"location":"development/vector-storage/#search-implementation","title":"Search Implementation","text":"<pre><code>def search_vectors(query_vector, top_k=5):\n    # Load index\n    index = faiss.read_index(f\"{namespace}.index\")\n\n    # Search\n    scores, indices = index.search(query_vector, top_k)\n\n    return scores, indices\n</code></pre>"},{"location":"development/vector-storage/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/vector-storage/#index-types","title":"Index Types","text":"<ul> <li>IndexFlatIP: Exact search, good for smaller datasets</li> <li>IndexIVFFlat: Approximate search, better for large datasets</li> <li>IndexHNSW: Graph-based, excellent for high-dimensional data</li> </ul>"},{"location":"development/vector-storage/#memory-management","title":"Memory Management","text":"<ul> <li>Lazy loading of indexes</li> <li>LRU cache for frequently accessed indexes</li> <li>Batch processing for embedding generation</li> </ul>"},{"location":"development/vector-storage/#user-data-isolation","title":"User Data Isolation","text":"<p>Each user's vectors are stored in separate indexes with user-specific namespaces, ensuring complete data isolation and privacy.</p> <p>This is a placeholder for detailed vector storage documentation. Full implementation details would include FAISS configuration, optimization strategies, and maintenance procedures.</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>Comprehensive configuration options for Personal AI Agent.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>The application uses environment variables for configuration. Copy <code>.env.example</code> to <code>.env</code> and customize:</p>"},{"location":"getting-started/configuration/#core-settings","title":"Core Settings","text":"<pre><code># Server Configuration\nHOST=localhost\nPORT=8000\nDEBUG=true\n\n# Database Configuration\nDATABASE_URL=sqlite:///./personal_ai_agent.db\n# For PostgreSQL:\n# DATABASE_URL=postgresql://user:password@localhost/dbname\n</code></pre>"},{"location":"getting-started/configuration/#security-configuration","title":"Security Configuration","text":"<pre><code># Security - IMPORTANT: Change in production!\nSECRET_KEY=your_super_secure_secret_key_minimum_32_characters\nALGORITHM=HS256\nACCESS_TOKEN_EXPIRE_MINUTES=30\n</code></pre> <p>Security Warning</p> <p>Always change the <code>SECRET_KEY</code> in production. Use a secure random string of at least 32 characters.</p>"},{"location":"getting-started/configuration/#llm-configuration","title":"LLM Configuration","text":"<pre><code># Model Settings\nLLM_MODEL_PATH=./models/mistral-7b-instruct-v0.1.Q4_K_M.gguf\nLLM_CONTEXT_WINDOW=8192\nLLM_THREADS=4\n\n# Hardware Acceleration\nUSE_METAL=true           # macOS Metal acceleration\nMETAL_N_GPU_LAYERS=1     # Number of GPU layers\n</code></pre>"},{"location":"getting-started/configuration/#model-options","title":"Model Options","text":"Model Size Performance Memory Mistral 7B Q4_K_M 4.1GB Balanced 6GB RAM Mistral 7B Q8_0 7.7GB High Quality 10GB RAM Phi-2 Q4_K_M 1.7GB Fast 3GB RAM"},{"location":"getting-started/configuration/#embedding-configuration","title":"Embedding Configuration","text":"<pre><code># Embedding Model\nEMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2\nEMBEDDING_BATCH_SIZE=32\nEMBEDDING_NORMALIZE=true\n</code></pre>"},{"location":"getting-started/configuration/#vector-storage","title":"Vector Storage","text":"<pre><code># Vector Database Paths\nVECTOR_DB_PATH=./data/vector_db\nEMAIL_VECTOR_DB_PATH=./data/email_vectors\n\n# Search Parameters\nVECTOR_SEARCH_TOP_K=5\nVECTOR_SIMILARITY_THRESHOLD=0.3\n</code></pre>"},{"location":"getting-started/configuration/#file-upload-settings","title":"File Upload Settings","text":"<pre><code># File Limits\nMAX_FILE_SIZE=10485760    # 10MB in bytes\nUPLOAD_DIR=./static/uploads\n\n# Supported formats are automatically detected\n</code></pre>"},{"location":"getting-started/configuration/#gmail-integration","title":"Gmail Integration","text":"<pre><code># OAuth2 Credentials (from Google Cloud Console)\nGMAIL_CLIENT_ID=your_gmail_client_id\nGMAIL_CLIENT_SECRET=your_gmail_client_secret\nGMAIL_REDIRECT_URI=http://localhost:8000/api/gmail/callback\n\n# Sync Settings\nGMAIL_MAX_EMAILS_PER_SYNC=1000\nGMAIL_DEFAULT_SYNC_LIMIT=100\n</code></pre>"},{"location":"getting-started/configuration/#setting-up-gmail-oauth","title":"Setting up Gmail OAuth","text":"<ol> <li>Go to Google Cloud Console</li> <li>Create or select a project</li> <li>Enable Gmail API</li> <li>Create OAuth2 credentials</li> <li>Add authorized redirect URI: <code>http://localhost:8000/api/gmail/callback</code></li> <li>Copy client ID and secret to <code>.env</code></li> </ol>"},{"location":"getting-started/configuration/#cors-configuration","title":"CORS Configuration","text":"<pre><code># CORS Settings (for production)\nALLOWED_ORIGINS=http://localhost:3000,https://yourdomain.com\nCORS_ALLOW_CREDENTIALS=true\n</code></pre>"},{"location":"getting-started/configuration/#logging-configuration","title":"Logging Configuration","text":"<pre><code># Logging Level\nLOG_LEVEL=INFO          # DEBUG, INFO, WARNING, ERROR, CRITICAL\n\n# Log file settings are configured in app/utils/logging_config.py\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#database-migration","title":"Database Migration","text":"<p>For existing installations, migrate the database:</p> <pre><code># General migration\npython migrate_db.py\n\n# Add constraints\npython migrate_db_constraints.py\n\n# Email-specific migration\npython migrate_email_db.py\n</code></pre>"},{"location":"getting-started/configuration/#model-switching","title":"Model Switching","text":"<p>Switch between different LLM models:</p> <pre><code># Interactive model switching\npython switch_model.py\n</code></pre>"},{"location":"getting-started/configuration/#performance-tuning","title":"Performance Tuning","text":""},{"location":"getting-started/configuration/#memory-optimization","title":"Memory Optimization","text":"<pre><code># Reduce memory usage\nLLM_THREADS=2\nEMBEDDING_BATCH_SIZE=16\nMETAL_N_GPU_LAYERS=0    # Disable GPU if memory constrained\n</code></pre>"},{"location":"getting-started/configuration/#speed-optimization","title":"Speed Optimization","text":"<pre><code># Maximize performance\nLLM_THREADS=8           # Use more CPU cores\nEMBEDDING_BATCH_SIZE=64 # Larger batches\nUSE_METAL=true          # Enable GPU acceleration\nMETAL_N_GPU_LAYERS=1\n</code></pre>"},{"location":"getting-started/configuration/#document-processing","title":"Document Processing","text":""},{"location":"getting-started/configuration/#financial-document-settings","title":"Financial Document Settings","text":"<pre><code># In app/utils/processors/financial_processor.py\nCHUNK_SIZE = 500        # Small chunks for transactions\nOVERLAP = 50           # Minimal overlap\n</code></pre>"},{"location":"getting-started/configuration/#long-form-document-settings","title":"Long-form Document Settings","text":"<pre><code># In app/utils/processors/pdf_processor.py\nCHUNK_SIZE = 1500      # Large chunks for context\nOVERLAP = 300          # Significant overlap\n</code></pre>"},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"getting-started/configuration/#main-configuration","title":"Main Configuration","text":"<ul> <li><code>app/core/config.py</code> - Primary configuration class</li> <li><code>app/core/constants.py</code> - Application constants</li> <li><code>.env</code> - Environment variables</li> </ul>"},{"location":"getting-started/configuration/#development-configurations","title":"Development Configurations","text":"<ul> <li><code>.env.development</code> - Development settings</li> <li><code>.env.testing</code> - Testing environment</li> <li><code>.env.production</code> - Production settings</li> </ul>"},{"location":"getting-started/configuration/#validation-and-testing","title":"Validation and Testing","text":""},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Test configuration system\npython test_config_system.py\n\n# Verify model loading\npython test_model_loading.py\n</code></pre>"},{"location":"getting-started/configuration/#environment-specific-testing","title":"Environment-Specific Testing","text":"<pre><code># Test with specific environment\nENV=testing python test_api_query.py\n\n# Test Gmail configuration\npython test_email_search.py\n</code></pre>"},{"location":"getting-started/configuration/#production-considerations","title":"Production Considerations","text":""},{"location":"getting-started/configuration/#security","title":"Security","text":"<ul> <li>Use strong <code>SECRET_KEY</code></li> <li>Configure specific <code>ALLOWED_ORIGINS</code></li> <li>Use PostgreSQL instead of SQLite</li> <li>Enable HTTPS</li> <li>Set <code>DEBUG=false</code></li> </ul>"},{"location":"getting-started/configuration/#performance","title":"Performance","text":"<ul> <li>Use production-grade database</li> <li>Configure proper logging levels</li> <li>Set up monitoring</li> <li>Use reverse proxy (nginx)</li> <li>Configure file upload limits</li> </ul>"},{"location":"getting-started/configuration/#monitoring","title":"Monitoring","text":"<pre><code># Add monitoring configuration\nLOG_LEVEL=WARNING\nSENTRY_DSN=your_sentry_dsn  # Optional error tracking\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<p>Model Not Loading <pre><code># Check model path\nls -la ./models/\npython test_model_loading.py\n</code></pre></p> <p>Database Connection Issues <pre><code># Test database\npython -c \"from app.db.database import engine; print(engine.url)\"\n</code></pre></p> <p>Gmail OAuth Errors - Verify redirect URI matches exactly - Check client ID and secret - Ensure Gmail API is enabled</p> <p>For more help, see Troubleshooting Guide.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you set up the Personal AI Agent on your local machine.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>4GB+ RAM (for local LLM processing)</li> <li>Git</li> </ul>"},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/your-username/personal-ai-agent.git\ncd personal-ai-agent\n</code></pre>"},{"location":"getting-started/installation/#step-2-create-virtual-environment","title":"Step 2: Create Virtual Environment","text":"Linux/macOSWindows <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre> <pre><code>python -m venv .venv\n.venv\\Scripts\\activate\n</code></pre>"},{"location":"getting-started/installation/#step-3-install-dependencies","title":"Step 3: Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre> <p>Installation Time</p> <p>The installation may take several minutes as it includes machine learning libraries like transformers and FAISS.</p>"},{"location":"getting-started/installation/#step-4-download-ai-models","title":"Step 4: Download AI Models","text":"<p>Download the required language model and embedding model:</p> <pre><code># Download Mistral 7B model (this may take some time)\npython download_model.py\n\n# Download embedding model\npython download_embedding_model.py\n</code></pre> <p>Model Size</p> <p>The Mistral 7B model is approximately 4GB. Ensure you have sufficient disk space and a stable internet connection.</p>"},{"location":"getting-started/installation/#step-5-environment-configuration","title":"Step 5: Environment Configuration","text":"<ol> <li> <p>Copy the example environment file:    <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>Edit the <code>.env</code> file with your configuration:    <pre><code># Database Configuration\nDATABASE_URL=sqlite:///./personal_ai_agent.db\n\n# Security Configuration\nSECRET_KEY=your_super_secure_secret_key_here\n\n# Server Configuration\nHOST=localhost\nPORT=8000\nDEBUG=true\n\n# LLM Configuration\nLLM_MODEL_PATH=./models/mistral-7b-instruct-v0.1.Q4_K_M.gguf\nUSE_METAL=true  # Set to false if not on macOS\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#step-6-database-setup","title":"Step 6: Database Setup","text":"<p>Initialize the database:</p> <pre><code>python setup_db.py\n</code></pre>"},{"location":"getting-started/installation/#step-7-create-admin-user","title":"Step 7: Create Admin User","text":"<p>Create an administrative user:</p> <pre><code>python create_admin.py\n</code></pre> <p>Follow the prompts to set up your admin credentials.</p>"},{"location":"getting-started/installation/#step-8-start-the-application","title":"Step 8: Start the Application","text":"<pre><code>python main.py\n</code></pre> <p>The application will be available at <code>http://localhost:8000</code>.</p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<ol> <li>Open your browser and navigate to <code>http://localhost:8000</code></li> <li>You should see the Personal AI Agent interface</li> <li>Check the health endpoint: <code>http://localhost:8000/api/v1/health-check</code></li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Learn basic usage</li> <li>Gmail Integration - Connect your Gmail account</li> <li>Configuration Guide - Advanced configuration options</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Model Loading Fails <pre><code># Test model loading\npython test_model_loading.py\n</code></pre></p> <p>Database Errors <pre><code># Reset database\nrm personal_ai_agent.db\npython setup_db.py\n</code></pre></p> <p>Port Already in Use <pre><code># Change port in .env file\nPORT=8001\n</code></pre></p> <p>For more troubleshooting help, see our Troubleshooting Guide.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with Personal AI Agent in minutes.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Make sure you've completed the installation process.</p>"},{"location":"getting-started/quickstart/#1-start-the-server","title":"1. Start the Server","text":"<pre><code># Activate your virtual environment\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate     # Windows\n\n# Start the server\npython main.py\n</code></pre> <p>The server will start on <code>http://localhost:8000</code>.</p>"},{"location":"getting-started/quickstart/#2-upload-your-first-document","title":"2. Upload Your First Document","text":""},{"location":"getting-started/quickstart/#via-web-interface","title":"Via Web Interface","text":"<ol> <li>Open <code>http://localhost:8000</code> in your browser</li> <li>Log in with your admin credentials</li> <li>Click \"Upload Document\"</li> <li>Select a PDF file</li> <li>Wait for processing to complete</li> </ol>"},{"location":"getting-started/quickstart/#via-api","title":"Via API","text":"<pre><code>curl -X POST \"http://localhost:8000/api/v1/documents/upload\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -F \"file=@/path/to/your/document.pdf\"\n</code></pre>"},{"location":"getting-started/quickstart/#3-ask-your-first-question","title":"3. Ask Your First Question","text":""},{"location":"getting-started/quickstart/#via-web-interface_1","title":"Via Web Interface","text":"<ol> <li>Navigate to the query section</li> <li>Type your question: \"What is this document about?\"</li> <li>Press Enter or click \"Ask\"</li> <li>View the AI-generated response with source citations</li> </ol>"},{"location":"getting-started/quickstart/#via-api_1","title":"Via API","text":"<pre><code>curl -X POST \"http://localhost:8000/api/v1/queries/\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"What is this document about?\",\n    \"include_sources\": true\n  }'\n</code></pre>"},{"location":"getting-started/quickstart/#4-connect-gmail-optional","title":"4. Connect Gmail (Optional)","text":"<ol> <li> <p>Set up Gmail OAuth credentials in your <code>.env</code> file:    <pre><code>GMAIL_CLIENT_ID=your_client_id\nGMAIL_CLIENT_SECRET=your_client_secret\n</code></pre></p> </li> <li> <p>Initialize Gmail connection:    <pre><code>python setup_gmail.py\n</code></pre></p> </li> <li> <p>Authorize via web interface or API endpoint</p> </li> </ol>"},{"location":"getting-started/quickstart/#5-query-across-content-types","title":"5. Query Across Content Types","text":"<p>Once you have both PDFs and emails, you can ask questions that span both:</p> <pre><code>\"Find information about my Apple expenses from both my bank statements and emails\"\n</code></pre> <p>The system will automatically search across all your content types and provide unified results.</p>"},{"location":"getting-started/quickstart/#example-queries","title":"Example Queries","text":""},{"location":"getting-started/quickstart/#pdf-document-queries","title":"PDF Document Queries","text":"<ul> <li>Financial: \"What were my total expenses in March?\"</li> <li>Research: \"Summarize the key findings about machine learning\"</li> <li>Personal: \"What skills are listed on my resume?\"</li> </ul>"},{"location":"getting-started/quickstart/#email-queries","title":"Email Queries","text":"<ul> <li>Business: \"Find emails about the quarterly review meeting\"</li> <li>Personal: \"Show me emails from my family last month\"</li> <li>Support: \"Find my conversation with customer service\"</li> </ul>"},{"location":"getting-started/quickstart/#cross-content-queries","title":"Cross-Content Queries","text":"<ul> <li>Mixed: \"Find all information about my Apple purchases\"</li> <li>Timeline: \"Show me all communications about project X\"</li> <li>Financial: \"Compare expenses from statements and email receipts\"</li> </ul>"},{"location":"getting-started/quickstart/#understanding-document-classification","title":"Understanding Document Classification","text":"<p>The system automatically classifies your content:</p>"},{"location":"getting-started/quickstart/#pdf-documents","title":"PDF Documents","text":"<ul> <li>Financial: Bank statements, invoices \u2192 Small chunks for precise transactions</li> <li>Long-form: Research papers, reports \u2192 Large chunks for context</li> <li>Generic: Resumes, letters \u2192 Balanced processing</li> </ul>"},{"location":"getting-started/quickstart/#emails","title":"Emails","text":"<ul> <li>Business: Work communications \u2192 Professional context</li> <li>Personal: Family/friends \u2192 Personal context</li> <li>Promotional: Marketing \u2192 Content filtering</li> <li>Transactional: Receipts \u2192 Transaction parsing</li> <li>Support: Customer service \u2192 Issue tracking</li> </ul>"},{"location":"getting-started/quickstart/#tips-for-better-results","title":"Tips for Better Results","text":"<ol> <li>Be Specific: \"Find Apple transactions in March\" vs \"Find expenses\"</li> <li>Use Context: \"In my bank statement\" or \"from my emails\"</li> <li>Ask Follow-ups: The system maintains query context</li> <li>Check Sources: Always verify the provided citations</li> </ol>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Gmail Integration</li> <li>Explore Document Classification</li> <li>Advanced Configuration</li> <li>API Reference</li> </ul>"},{"location":"getting-started/quickstart/#performance-tips","title":"Performance Tips","text":"<ul> <li>Model Performance: Use Metal acceleration on macOS (<code>USE_METAL=true</code>)</li> <li>Batch Uploads: Upload multiple documents at once for efficiency</li> <li>Regular Cleanup: Periodically clean up old documents and emails</li> <li>Memory Usage: Monitor system resources during large processing jobs</li> </ul>"},{"location":"troubleshooting/common-issues/","title":"Common Issues and Solutions","text":"<p>This guide addresses the most frequently encountered issues and their solutions.</p>"},{"location":"troubleshooting/common-issues/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/common-issues/#python-version-problems","title":"Python Version Problems","text":"<p>Issue: \"Python version not supported\" <pre><code>python: command not found\n# or\nPython 3.7.x is not supported\n</code></pre></p> <p>Solutions: <pre><code># Check Python version\npython --version\npython3 --version\n\n# Install Python 3.8+ on macOS\nbrew install python@3.9\n\n# Install Python 3.8+ on Ubuntu\nsudo apt update\nsudo apt install python3.9 python3.9-venv\n\n# Use specific Python version\npython3.9 -m venv .venv\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<p>Issue: \"Cannot activate virtual environment\" <pre><code>bash: .venv/bin/activate: No such file or directory\n</code></pre></p> <p>Solutions: <pre><code># Recreate virtual environment\nrm -rf .venv\npython -m venv .venv\n\n# Windows activation\n.venv\\Scripts\\activate\n\n# Linux/macOS activation\nsource .venv/bin/activate\n\n# Verify activation\nwhich python\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#dependency-installation-failures","title":"Dependency Installation Failures","text":"<p>Issue: \"Failed building wheel for package\" <pre><code>ERROR: Failed building wheel for llama-cpp-python\n</code></pre></p> <p>Solutions: <pre><code># Update pip and setuptools\npip install --upgrade pip setuptools wheel\n\n# Install build dependencies on macOS\nxcode-select --install\nbrew install cmake\n\n# Install build dependencies on Ubuntu\nsudo apt install build-essential cmake\n\n# For specific packages\npip install --no-cache-dir llama-cpp-python\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#model-loading-issues","title":"Model Loading Issues","text":""},{"location":"troubleshooting/common-issues/#model-download-failures","title":"Model Download Failures","text":"<p>Issue: \"Model download failed or corrupted\" <pre><code>ConnectionError: Failed to download model\n# or\nOSError: Unable to load model file\n</code></pre></p> <p>Solutions: <pre><code># Check internet connection\nping huggingface.co\n\n# Clear and re-download\nrm -rf models/\npython download_model.py\n\n# Manual download verification\nls -la models/\nfile models/mistral-7b-instruct-v0.1.Q4_K_M.gguf\n\n# Test model loading\npython test_model_loading.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#memory-issues-with-models","title":"Memory Issues with Models","text":"<p>Issue: \"Insufficient memory to load model\" <pre><code>RuntimeError: CUDA out of memory\n# or\nMemoryError: Unable to allocate memory\n</code></pre></p> <p>Solutions: <pre><code># Check available memory\nfree -h  # Linux\nvm_stat | perl -ne '/page size of (\\d+)/ and $size=$1; /Pages\\s+([^:]+)[^\\d]+(\\d+)/ and printf(\"%-16s % 16.2f MB\\n\", \"$1:\", $2 * $size / 1048576);'  # macOS\n\n# Use smaller model\npython switch_model.py\n# Select phi-2 instead of mistral-7b\n\n# Reduce Metal layers (macOS)\n# In .env file:\nMETAL_N_GPU_LAYERS=0\nUSE_METAL=false\n\n# Reduce context window\nLLM_CONTEXT_WINDOW=4096\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#metalgpu-acceleration-issues","title":"Metal/GPU Acceleration Issues","text":"<p>Issue: \"Metal acceleration not working\" <pre><code>Warning: Metal not available, falling back to CPU\n</code></pre></p> <p>Solutions: <pre><code># Check macOS version (requires macOS 12+)\nsw_vers\n\n# Verify Metal support\nsystem_profiler SPDisplaysDataType\n\n# Update configuration\n# In .env:\nUSE_METAL=true\nMETAL_N_GPU_LAYERS=1\n\n# Test Metal functionality\npython test_mistral_model.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#database-issues","title":"Database Issues","text":""},{"location":"troubleshooting/common-issues/#database-connection-errors","title":"Database Connection Errors","text":"<p>Issue: \"Cannot connect to database\" <pre><code>sqlalchemy.exc.OperationalError: no such table\n# or\nsqlite3.OperationalError: database is locked\n</code></pre></p> <p>Solutions: <pre><code># Reset database\nrm personal_ai_agent.db\npython setup_db.py\n\n# Check database file permissions\nls -la personal_ai_agent.db\nchmod 644 personal_ai_agent.db\n\n# Test database connection\npython -c \"from app.db.database import engine; print(engine.url)\"\n\n# Run database migrations\npython migrate_db.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#migration-failures","title":"Migration Failures","text":"<p>Issue: \"Database migration failed\" <pre><code>sqlalchemy.exc.IntegrityError: UNIQUE constraint failed\n</code></pre></p> <p>Solutions: <pre><code># Check current schema\npython list_documents.py\n\n# Run specific migrations\npython migrate_db_constraints.py\npython migrate_email_db.py\n\n# Backup and reset if needed\ncp personal_ai_agent.db personal_ai_agent.db.backup\nrm personal_ai_agent.db\npython setup_db.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#pdf-processing-issues","title":"PDF Processing Issues","text":""},{"location":"troubleshooting/common-issues/#upload-failures","title":"Upload Failures","text":"<p>Issue: \"PDF upload fails\" <pre><code>HTTP 422: Invalid file type\n# or\nHTTP 413: File too large\n</code></pre></p> <p>Solutions: <pre><code># Check file type\nfile document.pdf\n\n# Check file size\nls -lh document.pdf\n\n# Compress PDF if too large\n# Use PDF compression tools or split document\n\n# Verify PDF structure\npython -c \"import pypdf; pypdf.PdfReader('document.pdf')\"\n\n# Test with sample document\npython test_bank_only.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#text-extraction-issues","title":"Text Extraction Issues","text":"<p>Issue: \"No text extracted from PDF\" <pre><code>Warning: Document contains no extractable text\n</code></pre></p> <p>Solutions: <pre><code># Check if PDF is text-based\n# Try selecting text in PDF viewer\n\n# For scanned documents, use OCR first\n# Install tesseract\nbrew install tesseract  # macOS\nsudo apt install tesseract-ocr  # Ubuntu\n\n# Convert scanned PDF to text-based\n# Use tools like Adobe Acrobat or online OCR\n\n# Test extraction manually\npython -c \"\nimport pypdf\nreader = pypdf.PdfReader('document.pdf')\nprint(reader.pages[0].extract_text())\n\"\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#classification-issues","title":"Classification Issues","text":"<p>Issue: \"Document classified incorrectly\" <pre><code>Warning: Low classification confidence (0.45)\n</code></pre></p> <p>Solutions: <pre><code># Classification is automatic and cannot be manually overridden\n# Processing will work regardless of classification\n\n# Test classification manually\npython debug_chunks_detail.py\n\n# Verify document processing\npython test_classification_tags_fix.py\n\n# Check if document has mixed content\n# Financial + long-form content may confuse classifier\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#gmail-integration-issues","title":"Gmail Integration Issues","text":""},{"location":"troubleshooting/common-issues/#oauth-setup-problems","title":"OAuth Setup Problems","text":"<p>Issue: \"OAuth2 authorization fails\" <pre><code>HTTP 400: invalid_client\n# or\nHTTP 403: access_denied\n</code></pre></p> <p>Solutions: <pre><code># Verify Google Cloud Console setup\n# 1. Gmail API is enabled\n# 2. OAuth2 credentials created\n# 3. Redirect URI matches exactly\n\n# Check environment variables\necho $GMAIL_CLIENT_ID\necho $GMAIL_CLIENT_SECRET\necho $GMAIL_REDIRECT_URI\n\n# Verify redirect URI format\n# Must be: http://localhost:8000/api/v1/gmail/callback\n\n# Test OAuth flow\npython setup_gmail.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#email-sync-issues","title":"Email Sync Issues","text":"<p>Issue: \"Email sync fails or times out\" <pre><code>HTTP 429: Rate limit exceeded\n# or\nTimeoutError: Request timed out\n</code></pre></p> <p>Solutions: <pre><code># Reduce batch size\ncurl -X POST \"http://localhost:8000/api/v1/gmail/sync\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"limit\": 50}'\n\n# Wait for rate limit reset (usually 1 hour)\n# Check Gmail API quotas in Google Cloud Console\n\n# Use more specific queries\ncurl -X POST \"http://localhost:8000/api/v1/gmail/sync\" \\\n  -d '{\"limit\": 100, \"query\": \"in:inbox after:2024/01/01\"}'\n\n# Test connection\npython test_email_search.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#email-classification-issues","title":"Email Classification Issues","text":"<p>Issue: \"Emails classified incorrectly\" <pre><code>Business emails showing as promotional\n</code></pre></p> <p>Solutions: <pre><code># Email classification is automatic\n# System learns from patterns over time\n\n# Verify large sample for accuracy\npython test_classification_tags_fix.py\n\n# Check specific email content\npython debug_email_sync_error.py\n\n# Classification affects search optimization but not functionality\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#query-and-search-issues","title":"Query and Search Issues","text":""},{"location":"troubleshooting/common-issues/#no-results-found","title":"No Results Found","text":"<p>Issue: \"Queries return no results\" <pre><code>\"No relevant content found for the query\"\n</code></pre></p> <p>Solutions: <pre><code># Verify documents are processed\npython list_documents.py\n\n# Check document processing status\n# Ensure status is \"completed\"\n\n# Try broader search terms\n\"apple\" instead of \"apple store purchase\"\n\n# Test with known content\npython test_direct_question.py\n\n# Check vector store integrity\npython test_api_query.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#poor-result-quality","title":"Poor Result Quality","text":"<p>Issue: \"Search results not relevant\" <pre><code>Low relevance scores or incorrect answers\n</code></pre></p> <p>Solutions: <pre><code># Be more specific in queries\n\"Apple transactions in March 2024\" \n# instead of \"Apple stuff\"\n\n# Include document context\n\"From my bank statement, find Apple purchases\"\n\n# Check source attribution\n# Verify results cite correct documents\n\n# Test hallucination prevention\npython test_hallucination_prevention.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#response-generation-issues","title":"Response Generation Issues","text":"<p>Issue: \"LLM responses are slow or fail\" <pre><code>TimeoutError: LLM request timed out\n# or\n\"Unable to generate response\"\n</code></pre></p> <p>Solutions: <pre><code># Check LLM model status\npython test_model_loading.py\n\n# Reduce context window\n# In .env:\nLLM_CONTEXT_WINDOW=4096\n\n# Monitor system resources\ntop  # Linux\nActivity Monitor  # macOS\n\n# Test LLM directly\npython test_mistral_model.py\n\n# Check for memory leaks\n# Restart application if memory usage high\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/common-issues/#slow-processing","title":"Slow Processing","text":"<p>Issue: \"Document processing is very slow\" <pre><code>Processing times &gt; 5 minutes for small documents\n</code></pre></p> <p>Solutions: <pre><code># Check system resources\n# CPU usage, memory, disk I/O\n\n# Optimize for your hardware\n# Enable Metal on macOS:\nUSE_METAL=true\nMETAL_N_GPU_LAYERS=1\n\n# Reduce batch sizes\nEMBEDDING_BATCH_SIZE=16\n\n# Monitor processing\npython test_performance_indexes.py\n\n# Add performance indexes\npython migrate_add_performance_indexes.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#high-memory-usage","title":"High Memory Usage","text":"<p>Issue: \"Application uses excessive memory\" <pre><code>Memory usage &gt; 8GB\n</code></pre></p> <p>Solutions: <pre><code># Monitor memory usage\nps aux | grep python\n# or use htop/Activity Monitor\n\n# Reduce model size\n# Switch to phi-2 model (smaller)\npython switch_model.py\n\n# Optimize configuration\nLLM_THREADS=2\nEMBEDDING_BATCH_SIZE=8\nMETAL_N_GPU_LAYERS=0\n\n# Restart application periodically\n# For long-running processes\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#vector-search-slow","title":"Vector Search Slow","text":"<p>Issue: \"Search queries take too long\" <pre><code>Query response times &gt; 10 seconds\n</code></pre></p> <p>Solutions: <pre><code># Rebuild vector indices\nrm -rf data/vector_db/\n# Re-upload documents to rebuild\n\n# Check index sizes\ndu -sh data/vector_db/\n\n# Optimize search parameters\nVECTOR_SEARCH_TOP_K=3\nVECTOR_SIMILARITY_THRESHOLD=0.4\n\n# Test search performance\npython test_mixed_sources.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#network-and-connectivity","title":"Network and Connectivity","text":""},{"location":"troubleshooting/common-issues/#api-connection-issues","title":"API Connection Issues","text":"<p>Issue: \"Cannot connect to API endpoints\" <pre><code>ConnectionError: [Errno 61] Connection refused\n</code></pre></p> <p>Solutions: <pre><code># Verify server is running\ncurl http://localhost:8000/api/v1/health-check\n\n# Check port availability\nlsof -i :8000\nnetstat -an | grep 8000\n\n# Start server if not running\npython main.py\n\n# Check firewall settings\n# Ensure port 8000 is open\n\n# Try different port\n# In .env:\nPORT=8001\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#gmail-api-connectivity","title":"Gmail API Connectivity","text":"<p>Issue: \"Cannot connect to Gmail API\" <pre><code>ConnectionError: Failed to connect to Gmail\n</code></pre></p> <p>Solutions: <pre><code># Test internet connectivity\nping gmail.googleapis.com\n\n# Check API quotas\n# Review Google Cloud Console quotas\n\n# Verify OAuth tokens\ncurl -X GET \"http://localhost:8000/api/v1/gmail/status\" \\\n  -H \"Authorization: Bearer $TOKEN\"\n\n# Refresh OAuth tokens\n# Re-authorize if needed\n\n# Test Gmail connectivity\npython test_email_sync_fix.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/common-issues/#environment-variables","title":"Environment Variables","text":"<p>Issue: \"Configuration not loading properly\" <pre><code>KeyError: 'SECRET_KEY'\n# or using default values\n</code></pre></p> <p>Solutions: <pre><code># Check .env file exists\nls -la .env\n\n# Verify environment loading\npython -c \"from app.core.config import settings; print(settings.SECRET_KEY)\"\n\n# Copy from example\ncp .env.example .env\n\n# Check for syntax errors in .env\n# No spaces around = sign\nSECRET_KEY=your_key_here\n\n# Test configuration\npython test_config_system.py\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#file-permissions","title":"File Permissions","text":"<p>Issue: \"Permission denied errors\" <pre><code>PermissionError: [Errno 13] Permission denied\n</code></pre></p> <p>Solutions: <pre><code># Check file permissions\nls -la data/\nls -la static/\n\n# Fix permissions\nchmod -R 755 data/\nchmod -R 755 static/\nchmod -R 755 logs/\n\n# Check write access\ntouch data/test_file\nrm data/test_file\n\n# Run with appropriate user\n# Avoid running as root\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#error-monitoring-and-logging","title":"Error Monitoring and Logging","text":""},{"location":"troubleshooting/common-issues/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># In .env file:\nDEBUG=true\nLOG_LEVEL=DEBUG\n\n# Check logs\ntail -f logs/app.log\n\n# Increase log detail for specific issues\n# Check app/utils/logging_config.py\n</code></pre>"},{"location":"troubleshooting/common-issues/#common-error-patterns","title":"Common Error Patterns","text":"<pre><code># Database errors\ngrep \"sqlalchemy\" logs/app.log\n\n# Model loading errors\ngrep \"llama\" logs/app.log\n\n# Email processing errors\ngrep \"gmail\" logs/app.log\n\n# Vector store errors\ngrep \"faiss\" logs/app.log\n</code></pre>"},{"location":"troubleshooting/common-issues/#system-health-checks","title":"System Health Checks","text":"<pre><code># Overall health\ncurl http://localhost:8000/api/v1/health-check\n\n# Test core functionality\npython test_error_handling.py\n\n# Database health\npython list_documents.py\n\n# Model health\npython test_model_loading.py\n\n# Gmail health\ncurl -X GET \"http://localhost:8000/api/v1/gmail/status\" \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"troubleshooting/common-issues/#getting-additional-help","title":"Getting Additional Help","text":""},{"location":"troubleshooting/common-issues/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># System information\npython --version\npip list | grep -E \"(fastapi|sqlalchemy|llama|faiss|sentence)\"\n\n# Configuration check\npython test_config_system.py\n\n# End-to-end test\npython test_mixed_sources.py\n\n# Performance check\npython test_performance_indexes.py\n</code></pre>"},{"location":"troubleshooting/common-issues/#log-analysis","title":"Log Analysis","text":"<pre><code># Recent errors\ntail -100 logs/app.log | grep ERROR\n\n# Processing times\ngrep \"processing_time\" logs/app.log\n\n# Memory usage patterns\ngrep \"memory\" logs/app.log\n</code></pre>"},{"location":"troubleshooting/common-issues/#support-resources","title":"Support Resources","text":"<ul> <li>CLAUDE.md: Development commands and workflows</li> <li>Architecture Documentation: Technical deep dive</li> <li>API Reference: Complete endpoint documentation</li> <li>GitHub Issues: Report bugs and request features</li> </ul>"},{"location":"troubleshooting/faq/","title":"Frequently Asked Questions","text":"<p>Common questions and answers about Personal AI Agent.</p>"},{"location":"troubleshooting/faq/#general-questions","title":"General Questions","text":""},{"location":"troubleshooting/faq/#what-is-personal-ai-agent","title":"What is Personal AI Agent?","text":"<p>Personal AI Agent is a privacy-first AI assistant that helps you search and query your PDF documents and Gmail emails using natural language. It runs completely locally, ensuring your data stays private.</p>"},{"location":"troubleshooting/faq/#how-is-this-different-from-other-ai-assistants","title":"How is this different from other AI assistants?","text":"<ul> <li>100% Privacy: All processing happens locally, no data sent to external APIs</li> <li>Specialized Processing: Optimized for documents and emails with category-specific handling</li> <li>Unified Search: Query across both PDFs and emails simultaneously</li> <li>Source Attribution: All responses include citations to original sources</li> </ul>"},{"location":"troubleshooting/faq/#what-file-formats-are-supported","title":"What file formats are supported?","text":"<p>Currently, the system supports: - PDF documents: Primary format with text extraction - Gmail emails: Full integration with OAuth2 - Email attachments: Text extraction from supported formats</p> <p>Text-based PDFs work best. Scanned documents (images) require OCR preprocessing.</p>"},{"location":"troubleshooting/faq/#is-my-data-secure","title":"Is my data secure?","text":"<p>Yes, your data is processed entirely on your local machine: - No external API calls for document processing - Local LLM (Mistral 7B) for response generation - Gmail OAuth uses industry-standard security - User data isolation in local databases - Configurable data retention policies</p>"},{"location":"troubleshooting/faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"troubleshooting/faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<p>Minimum requirements: - Python 3.8+ - 4GB RAM (8GB recommended) - 10GB free disk space - Internet connection (for setup only)</p> <p>Recommended: - Python 3.9+ - 16GB RAM - SSD storage - macOS (for Metal acceleration) or Linux</p>"},{"location":"troubleshooting/faq/#why-is-the-initial-download-so-large","title":"Why is the initial download so large?","text":"<p>The system downloads AI models locally: - Mistral 7B model: ~4GB (language understanding) - Embedding model: ~100MB (semantic search) - Dependencies: ~2GB (ML libraries)</p> <p>This ensures complete privacy and offline operation.</p>"},{"location":"troubleshooting/faq/#can-i-use-a-different-ai-model","title":"Can I use a different AI model?","text":"<p>Yes, the system supports multiple models: - Mistral 7B: Best quality, higher memory usage - Phi-2: Faster, lower memory usage - Custom models: GGUF format supported</p> <p>Use <code>python switch_model.py</code> to change models.</p>"},{"location":"troubleshooting/faq/#document-processing","title":"Document Processing","text":""},{"location":"troubleshooting/faq/#why-does-document-processing-take-so-long","title":"Why does document processing take so long?","text":"<p>Processing time depends on: - Document size: Larger documents take longer - System resources: CPU, memory, and disk speed - Classification complexity: Mixed content takes more analysis - Hardware acceleration: Metal/GPU speeds up processing</p> <p>Typical times: - Small PDF (1-5 pages): 30-60 seconds - Medium PDF (20-50 pages): 2-5 minutes - Large PDF (100+ pages): 5-15 minutes</p>"},{"location":"troubleshooting/faq/#what-if-my-document-is-classified-incorrectly","title":"What if my document is classified incorrectly?","text":"<p>Document classification is automatic and affects processing optimization, but doesn't prevent functionality:</p> <ul> <li>Financial: Optimized for transactions and amounts</li> <li>Long-form: Optimized for comprehensive context</li> <li>Generic: Balanced processing approach</li> </ul> <p>All document types work with all query types, though optimization may vary.</p>"},{"location":"troubleshooting/faq/#can-i-process-scanned-documents","title":"Can I process scanned documents?","text":"<p>Not directly. Scanned documents are images and require OCR (Optical Character Recognition) first:</p> <ol> <li>Use OCR software (Adobe Acrobat, online tools)</li> <li>Convert to text-based PDF</li> <li>Upload the converted document</li> </ol> <p>The system requires selectable text to function properly.</p>"},{"location":"troubleshooting/faq/#why-cant-i-find-specific-information-i-know-is-in-my-document","title":"Why can't I find specific information I know is in my document?","text":"<p>Several factors affect search quality: - Query specificity: Try more specific terms - Text extraction quality: Check if text was properly extracted - Chunk boundaries: Information might span multiple chunks - Processing status: Ensure document processing completed</p> <p>Try variations of your query and check the original document structure.</p>"},{"location":"troubleshooting/faq/#gmail-integration","title":"Gmail Integration","text":""},{"location":"troubleshooting/faq/#is-it-safe-to-connect-my-gmail-account","title":"Is it safe to connect my Gmail account?","text":"<p>Yes, the integration uses Google's OAuth2 standard with minimal permissions: - Read-only access: Cannot send or delete emails - No external sharing: Emails processed locally only - Revocable access: Can disconnect anytime - Industry standard: Same security as other Google integrations</p>"},{"location":"troubleshooting/faq/#how-many-emails-can-i-sync","title":"How many emails can I sync?","text":"<p>Technical limits: - Maximum per sync: 1000 emails - Recommended batch: 100-500 emails - Total storage: Limited by disk space only</p> <p>Practical recommendations: - Start with recent 3-6 months - Sync incrementally - Focus on important email categories</p>"},{"location":"troubleshooting/faq/#why-are-my-emails-classified-incorrectly","title":"Why are my emails classified incorrectly?","text":"<p>Email classification improves over time and uses multiple signals: - Subject line patterns - Sender information - Content analysis - Email metadata</p> <p>Classification affects search optimization but all emails remain searchable regardless of category.</p>"},{"location":"troubleshooting/faq/#can-i-sync-emails-from-multiple-accounts","title":"Can I sync emails from multiple accounts?","text":"<p>Currently, one Gmail account per user is supported. Future versions may support multiple accounts.</p>"},{"location":"troubleshooting/faq/#querying-and-search","title":"Querying and Search","text":""},{"location":"troubleshooting/faq/#how-do-i-write-effective-queries","title":"How do I write effective queries?","text":"<p>Be specific: - \"Apple transactions in March 2024\" vs \"Apple stuff\" - \"Meeting notes from quarterly review\" vs \"meetings\"</p> <p>Include context: - \"From my bank statement, find grocery expenses\" - \"In my research papers, explain machine learning\"</p> <p>Use natural language: - \"How much did I spend on restaurants last month?\" - \"What did Sarah say about the project timeline?\"</p>"},{"location":"troubleshooting/faq/#why-do-i-get-different-results-for-similar-queries","title":"Why do I get different results for similar queries?","text":"<p>Query results depend on: - Exact wording: Synonyms may find different content - Context clues: Additional words help focus search - Content classification: Different document types optimize differently - Vector similarity: Semantic matching varies with phrasing</p> <p>Try rephrasing queries or being more specific.</p>"},{"location":"troubleshooting/faq/#can-i-search-across-both-pdfs-and-emails-simultaneously","title":"Can I search across both PDFs and emails simultaneously?","text":"<p>Yes! This is a key feature: - Cross-content queries: \"Find all Apple purchases\" - Unified results: Combined from PDFs and emails - Source attribution: Clear identification of source type - Relevance ranking: Best matches from all content</p>"},{"location":"troubleshooting/faq/#how-accurate-are-the-ai-responses","title":"How accurate are the AI responses?","text":"<p>Response accuracy depends on: - Source quality: Better documents = better responses - Query clarity: Specific questions get better answers - Content relevance: Responses limited to your documents - Hallucination prevention: Built-in safeguards against false information</p> <p>Always check source citations for verification.</p>"},{"location":"troubleshooting/faq/#performance-and-optimization","title":"Performance and Optimization","text":""},{"location":"troubleshooting/faq/#why-is-the-system-slow-on-my-computer","title":"Why is the system slow on my computer?","text":"<p>Performance factors: - Available RAM: 8GB+ recommended for smooth operation - CPU speed: Faster processors improve response times - Storage type: SSD significantly faster than HDD - Background apps: Close unnecessary applications</p> <p>Optimization tips: - Enable hardware acceleration (Metal on macOS) - Reduce batch sizes for processing - Use specific queries to limit search scope - Regular cleanup of old documents</p>"},{"location":"troubleshooting/faq/#how-can-i-improve-search-speed","title":"How can I improve search speed?","text":"<p>Query optimization: - Use specific terms rather than broad searches - Filter by document type when possible - Limit result counts for faster responses</p> <p>System optimization: - Enable hardware acceleration - Increase available RAM - Use SSD storage - Regular maintenance of vector databases</p>"},{"location":"troubleshooting/faq/#how-much-disk-space-does-the-system-use","title":"How much disk space does the system use?","text":"<p>Base installation: ~6GB - Models: ~4GB - Dependencies: ~2GB</p> <p>User data (scales with usage): - PDF documents: Original file size - Vector embeddings: ~10-20% of original text size - Email data: ~50-100MB per 1000 emails - Database metadata: Minimal</p> <p>Plan for 2-3x your document storage for optimal performance.</p>"},{"location":"troubleshooting/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"troubleshooting/faq/#the-application-wont-start","title":"The application won't start","text":"<p>Common causes: 1. Python version: Requires 3.8+ 2. Missing dependencies: Run <code>pip install -r requirements.txt</code> 3. Port conflicts: Another service using port 8000 4. Missing models: Run <code>python download_model.py</code> 5. Database issues: Try <code>python setup_db.py</code></p> <p>Check logs in <code>logs/app.log</code> for specific errors.</p>"},{"location":"troubleshooting/faq/#documents-fail-to-upload","title":"Documents fail to upload","text":"<p>Common causes: 1. File size: Check maximum size limit (default 10MB) 2. File format: Only PDF currently supported 3. File corruption: Try opening in PDF viewer first 4. Permissions: Check write access to upload directory 5. Disk space: Ensure sufficient storage available</p>"},{"location":"troubleshooting/faq/#gmail-sync-fails","title":"Gmail sync fails","text":"<p>Common causes: 1. OAuth setup: Verify Google Cloud Console configuration 2. Rate limits: Wait before retrying large syncs 3. Network issues: Check internet connectivity 4. Token expiration: Re-authorize if needed 5. API quotas: Check Google Cloud Console quotas</p>"},{"location":"troubleshooting/faq/#search-returns-no-results","title":"Search returns no results","text":"<p>Common causes: 1. Processing incomplete: Check document processing status 2. Query too specific: Try broader search terms 3. Content not indexed: Verify text extraction worked 4. Database issues: Check vector store integrity 5. Empty documents: Ensure documents contain text</p>"},{"location":"troubleshooting/faq/#data-management","title":"Data Management","text":""},{"location":"troubleshooting/faq/#how-do-i-backup-my-data","title":"How do I backup my data?","text":"<p>Database backup: <pre><code>cp personal_ai_agent.db personal_ai_agent.db.backup\n</code></pre></p> <p>Vector embeddings backup: <pre><code>cp -r data/vector_db/ data/vector_db_backup/\n</code></pre></p> <p>Document files backup: <pre><code>cp -r static/uploads/ static/uploads_backup/\n</code></pre></p>"},{"location":"troubleshooting/faq/#how-do-i-delete-my-data","title":"How do I delete my data?","text":"<p>Delete specific documents: - Use the web interface or API - Removes PDF, embeddings, and metadata</p> <p>Delete Gmail data: <pre><code>curl -X DELETE \"/api/v1/gmail/disconnect\" \\\n  -d '{\"delete_emails\": true}'\n</code></pre></p> <p>Complete cleanup: <pre><code>rm personal_ai_agent.db\nrm -rf data/vector_db/\nrm -rf static/uploads/\n</code></pre></p>"},{"location":"troubleshooting/faq/#can-i-export-my-data","title":"Can I export my data?","text":"<p>Currently, data export options are limited: - Original PDFs: Available in <code>static/uploads/</code> - Database: SQLite format, can be accessed with standard tools - Email content: Stored in database, requires technical extraction</p> <p>Enhanced export features are planned for future releases.</p>"},{"location":"troubleshooting/faq/#privacy-and-security","title":"Privacy and Security","text":""},{"location":"troubleshooting/faq/#what-data-is-stored-locally","title":"What data is stored locally?","text":"<p>Document data: - Original PDF files - Extracted text content - Vector embeddings for search - Processing metadata</p> <p>Email data: - Email content and metadata - Vector embeddings for search - OAuth tokens (encrypted) - Sync history</p> <p>User data: - Account information - Query history - System logs</p>"},{"location":"troubleshooting/faq/#is-my-data-encrypted","title":"Is my data encrypted?","text":"<p>Local storage: - OAuth tokens are encrypted - Database can be encrypted (configuration dependent) - File system encryption recommended</p> <p>In transit: - Gmail OAuth uses HTTPS - Local API calls use HTTP (localhost only) - No external data transmission during normal operation</p>"},{"location":"troubleshooting/faq/#who-can-access-my-data","title":"Who can access my data?","text":"<p>Only you have access to your data: - Single-user system: Designed for personal use - Local processing: No external access required - User isolation: Multiple users have separate data - No telemetry: No usage data collected or transmitted</p>"},{"location":"troubleshooting/faq/#future-development","title":"Future Development","text":""},{"location":"troubleshooting/faq/#what-features-are-planned","title":"What features are planned?","text":"<p>Short term: - Enhanced security and rate limiting - Performance optimizations - Better error handling and recovery</p> <p>Medium term: - Notion integration - Multiple Gmail accounts - Enhanced analytics and insights - Mobile companion app</p> <p>Long term: - Multi-user enterprise features - Cloud deployment options - Additional file format support - Advanced AI capabilities</p>"},{"location":"troubleshooting/faq/#how-can-i-contribute-or-request-features","title":"How can I contribute or request features?","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Discussions: Share ideas and ask questions</li> <li>Pull Requests: Contribute code improvements</li> <li>Documentation: Help improve guides and tutorials</li> </ul>"},{"location":"troubleshooting/faq/#is-there-a-commercial-version","title":"Is there a commercial version?","text":"<p>Currently, Personal AI Agent is open-source and free. Future commercial offerings may include: - Hosted solutions: Cloud-based deployment - Enterprise features: Multi-user, advanced security - Professional support: Installation and customization help - Premium models: Access to larger, more capable AI models</p>"},{"location":"troubleshooting/support/","title":"Support and Help","text":"<p>Get help and support for Personal AI Agent.</p>"},{"location":"troubleshooting/support/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/support/#self-service-resources","title":"Self-Service Resources","text":"<p>Documentation - Installation Guide - Setup and installation - User Guides - How to use features - API Reference - Complete API documentation - Troubleshooting - Common problems and solutions - FAQ - Frequently asked questions</p> <p>Diagnostic Tools <pre><code># System health check\ncurl http://localhost:8000/api/v1/health-check\n\n# Test core functionality\npython test_model_loading.py\npython test_config_system.py\npython test_error_handling.py\n\n# Check logs\ntail -f logs/app.log\n</code></pre></p>"},{"location":"troubleshooting/support/#community-support","title":"Community Support","text":"<p>GitHub Repository - Issues: Report bugs and request features - Discussions: Ask questions and share ideas - Wiki: Community-maintained documentation - Code: Browse source code and contribute</p> <p>Community Guidelines - Search existing issues before creating new ones - Provide detailed information when reporting problems - Be respectful and constructive in discussions - Help others when you can</p>"},{"location":"troubleshooting/support/#reporting-issues","title":"Reporting Issues","text":""},{"location":"troubleshooting/support/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, please include:</p> <p>System Information <pre><code># Python version\npython --version\n\n# Package versions\npip list | grep -E \"(fastapi|llama|faiss)\"\n\n# Operating system\nuname -a  # Linux/macOS\n# or systeminfo  # Windows\n\n# Available memory\nfree -h  # Linux\n# or vm_stat  # macOS\n</code></pre></p> <p>Application Information <pre><code># Configuration (sanitized)\npython -c \"from app.core.config import settings; print(f'Debug: {settings.DEBUG}, Model: {settings.LLM_MODEL_PATH}')\"\n\n# Database status\npython list_documents.py\n\n# Recent logs\ntail -20 logs/app.log\n</code></pre></p> <p>Error Details - Complete error messages - Steps to reproduce the issue - Expected vs actual behavior - Screenshots if applicable</p>"},{"location":"troubleshooting/support/#feature-requests","title":"Feature Requests","text":"<p>For feature requests, please describe: - Use case: What problem does this solve? - Proposed solution: How should it work? - Alternatives considered: Other approaches you've thought about - Additional context: Any other relevant information</p>"},{"location":"troubleshooting/support/#professional-support","title":"Professional Support","text":""},{"location":"troubleshooting/support/#enterprise-support","title":"Enterprise Support","text":"<p>For organizations requiring professional support:</p> <p>Available Services - Installation and setup assistance - Custom configuration and optimization - Training and onboarding - Priority bug fixes and feature development - Security audits and compliance assistance</p> <p>Contact Information - Email: enterprise@personal-ai-agent.com - Business hours: Monday-Friday, 9 AM - 5 PM EST - Response time: 24-48 hours for initial response</p>"},{"location":"troubleshooting/support/#consulting-services","title":"Consulting Services","text":"<p>Available Consulting - Architecture design and review - Performance optimization - Security assessment - Custom feature development - Integration assistance</p>"},{"location":"troubleshooting/support/#contributing-back","title":"Contributing Back","text":""},{"location":"troubleshooting/support/#how-to-contribute","title":"How to Contribute","text":"<p>Code Contributions 1. Fork the repository 2. Create a feature branch 3. Make your changes 4. Add tests for new functionality 5. Submit a pull request</p> <p>Documentation Contributions 1. Identify gaps or improvements needed 2. Update or create documentation 3. Test examples and instructions 4. Submit pull request with changes</p> <p>Community Contributions - Answer questions in discussions - Help with issue triage - Improve documentation - Share usage examples and tips</p>"},{"location":"troubleshooting/support/#recognition","title":"Recognition","text":"<p>Contributors are recognized through: - GitHub contributor listings - Release notes acknowledgments - Community spotlight features - Maintainer role opportunities</p>"},{"location":"troubleshooting/support/#emergency-support","title":"Emergency Support","text":""},{"location":"troubleshooting/support/#critical-issues","title":"Critical Issues","text":"<p>For security vulnerabilities or critical system failures:</p> <p>Security Issues - Email: security@personal-ai-agent.com - Use GPG encryption for sensitive reports - Include detailed vulnerability information - Do not publicly disclose until patched</p> <p>System Failures - Check [Status Page] for known issues - Review troubleshooting guides first - Contact support with diagnostic information - Include business impact assessment</p>"},{"location":"troubleshooting/support/#escalation-process","title":"Escalation Process","text":"<ol> <li>Self-service: Try documentation and troubleshooting guides</li> <li>Community: Post in GitHub discussions or issues</li> <li>Professional: Contact enterprise support if available</li> <li>Emergency: Use emergency contact for critical issues</li> </ol>"},{"location":"troubleshooting/support/#feedback-and-improvement","title":"Feedback and Improvement","text":""},{"location":"troubleshooting/support/#feedback-channels","title":"Feedback Channels","text":"<p>Product Feedback - GitHub issues for bugs and features - User surveys and feedback forms - Community discussions - Direct email for sensitive feedback</p> <p>Documentation Feedback - GitHub issues for documentation problems - Pull requests for improvements - Comments on specific pages - Suggestions for new content</p>"},{"location":"troubleshooting/support/#continuous-improvement","title":"Continuous Improvement","text":"<p>We continuously improve based on: - User feedback and suggestions - Common support questions - Performance metrics and analytics - Industry best practices</p>"},{"location":"troubleshooting/support/#training-and-resources","title":"Training and Resources","text":""},{"location":"troubleshooting/support/#learning-resources","title":"Learning Resources","text":"<p>Video Tutorials (Coming Soon) - Installation and setup walkthrough - Basic usage demonstrations - Advanced feature tutorials - Troubleshooting common issues</p> <p>Webinars and Workshops - Monthly community calls - Feature deep-dives - Best practices sessions - Q&amp;A with development team</p> <p>Third-Party Resources - Community blog posts - YouTube tutorials - Conference presentations - Academic papers and research</p>"},{"location":"troubleshooting/support/#training-programs","title":"Training Programs","text":"<p>Self-Paced Learning - Interactive tutorials - Practice exercises - Knowledge assessments - Certification paths</p> <p>Instructor-Led Training - Virtual training sessions - Custom curriculum development - Hands-on workshops - Group training discounts</p>"},{"location":"troubleshooting/support/#contact-information","title":"Contact Information","text":""},{"location":"troubleshooting/support/#general-support","title":"General Support","text":"<ul> <li>Email: support@personal-ai-agent.com</li> <li>GitHub: https://github.com/personal-ai-agent/personal-ai-agent</li> <li>Documentation: https://docs.personal-ai-agent.com</li> </ul>"},{"location":"troubleshooting/support/#business-inquiries","title":"Business Inquiries","text":"<ul> <li>Email: business@personal-ai-agent.com</li> <li>Phone: +1 (555) 123-4567</li> <li>Address: 123 AI Street, Tech City, TC 12345</li> </ul>"},{"location":"troubleshooting/support/#social-media","title":"Social Media","text":"<ul> <li>Twitter: @PersonalAIAgent</li> <li>LinkedIn: Personal AI Agent</li> <li>Blog: https://blog.personal-ai-agent.com</li> </ul>"},{"location":"troubleshooting/support/#service-level-agreements","title":"Service Level Agreements","text":""},{"location":"troubleshooting/support/#community-support_1","title":"Community Support","text":"<ul> <li>Response Time: Best effort, typically 24-72 hours</li> <li>Channels: GitHub issues and discussions</li> <li>Coverage: Community volunteers and maintainers</li> <li>Cost: Free</li> </ul>"},{"location":"troubleshooting/support/#enterprise-support_1","title":"Enterprise Support","text":"<ul> <li>Response Time: 24 hours for critical issues, 48 hours for standard</li> <li>Channels: Direct email and phone support</li> <li>Coverage: Business hours with emergency escalation</li> <li>Cost: Subscription-based pricing</li> </ul>"},{"location":"troubleshooting/support/#custom-support","title":"Custom Support","text":"<ul> <li>Response Time: Negotiated based on requirements</li> <li>Channels: Dedicated support portal and contacts</li> <li>Coverage: 24/7 options available</li> <li>Cost: Custom pricing based on needs</li> </ul> <p>Remember: The Personal AI Agent community is here to help! Don't hesitate to reach out when you need assistance.</p>"},{"location":"user-guide/classification/","title":"Document and Email Classification","text":"<p>Understanding how Personal AI Agent automatically categorizes your content for optimal processing and search.</p>"},{"location":"user-guide/classification/#overview","title":"Overview","text":"<p>Personal AI Agent uses intelligent classification to optimize how your content is processed, stored, and searched. This automatic categorization ensures that each type of content receives the most appropriate handling for maximum accuracy and relevance.</p>"},{"location":"user-guide/classification/#document-classification","title":"Document Classification","text":""},{"location":"user-guide/classification/#classification-process","title":"Classification Process","text":"<p>When you upload a PDF, the system analyzes:</p> <ol> <li>Content Patterns: Keywords, formatting, structure</li> <li>Document Metadata: Page count, creation date, file properties</li> <li>Text Analysis: Language patterns, terminology, data types</li> <li>Structure Recognition: Headers, tables, formatting styles</li> </ol>"},{"location":"user-guide/classification/#document-categories","title":"Document Categories","text":""},{"location":"user-guide/classification/#financial-documents","title":"Financial Documents","text":"<p>Automatic Detection Criteria: - Transaction patterns and monetary amounts - Banking terminology (account, balance, deposit, withdrawal) - Date-amount pairs in tabular format - Financial institution headers and footers - Tax and accounting terminology</p> <p>Examples: - Bank statements - Credit card statements - Investment reports - Tax documents - Invoices and receipts - Financial summaries</p> <p>Processing Optimizations: - Small Chunks (500 characters): Precise transaction matching - Minimal Overlap (50 characters): Avoid duplicate transactions - Pattern Recognition: Enhanced for monetary amounts and dates - Structured Data: Optimized for tabular information</p> <p>Best Query Types: <pre><code>\"How much did I spend on groceries in March?\"\n\"Find all Apple transactions over $100\"\n\"What was my account balance on March 15th?\"\n\"Show me all overdraft fees\"\n</code></pre></p>"},{"location":"user-guide/classification/#long-form-documents","title":"Long-form Documents","text":"<p>Automatic Detection Criteria: - Document length (20+ pages) - Academic or research structure - Complex formatting with sections and subsections - Bibliography or reference sections - Abstract or executive summary presence</p> <p>Examples: - Research papers and studies - Technical reports - Legal contracts - Policy documents - Thesis and dissertations - Comprehensive analyses</p> <p>Processing Optimizations: - Large Chunks (1500 characters): Comprehensive context preservation - Significant Overlap (300 characters): Maintain narrative flow - Deep Analysis: Enhanced semantic understanding - Structure Awareness: Section and hierarchy recognition</p> <p>Best Query Types: <pre><code>\"Summarize the key findings of this research\"\n\"What methodology was used in this study?\"\n\"Explain the main conclusions\"\n\"What are the recommendations in this report?\"\n</code></pre></p>"},{"location":"user-guide/classification/#generic-documents","title":"Generic Documents","text":"<p>Default Classification For: - Short documents (under 20 pages) - Mixed content that doesn't fit other categories - Personal documents (resumes, letters) - General business documents - Reference materials</p> <p>Examples: - Resumes and CVs - Personal correspondence - Product manuals - Meeting notes - Project plans - Miscellaneous reports</p> <p>Processing Optimizations: - Balanced Chunks (1000 characters): Good for varied content - Moderate Overlap (200 characters): Context preservation - Flexible Processing: Adapts to content structure - General Purpose: Works well for diverse queries</p> <p>Best Query Types: <pre><code>\"What skills are mentioned on this resume?\"\n\"Find contact information in these documents\"\n\"Summarize the main points\"\n\"What experience is listed?\"\n</code></pre></p>"},{"location":"user-guide/classification/#classification-confidence","title":"Classification Confidence","text":"<p>Each document receives a confidence score:</p> <ul> <li>High Confidence (85%+): Clear category indicators</li> <li>Medium Confidence (65-85%): Some category features present</li> <li>Low Confidence (&lt;65%): Ambiguous or mixed content</li> </ul> <p>Note: Classification affects optimization but doesn't prevent functionality. All documents work with all query types, though some may be more efficient than others.</p>"},{"location":"user-guide/classification/#email-classification","title":"Email Classification","text":""},{"location":"user-guide/classification/#classification-process_1","title":"Classification Process","text":"<p>Emails are classified by analyzing:</p> <ol> <li>Subject Line Patterns: Keywords and formatting</li> <li>Sender Information: Domain, sender reputation, frequency</li> <li>Content Analysis: Message body, tone, terminology</li> <li>Metadata: Labels, threading, importance markers</li> <li>Recipient Context: To/CC/BCC patterns</li> </ol>"},{"location":"user-guide/classification/#email-categories","title":"Email Categories","text":""},{"location":"user-guide/classification/#business-emails","title":"Business Emails","text":"<p>Automatic Detection Criteria: - Work-related keywords (meeting, project, deadline, client) - Professional email domains (@company.com) - Calendar invitations and meeting requests - Corporate terminology and formal language - Work schedule and business hour timing</p> <p>Examples: - Meeting invitations and calendar events - Project updates and status reports - Team communications and announcements - Client correspondence - Work-related notifications</p> <p>Processing Optimizations: - Professional Context: Work-focused keyword recognition - Thread Awareness: Full conversation context - Temporal Patterns: Business hour weighting - Hierarchy Recognition: Manager/team relationships</p> <p>Best Query Types: <pre><code>\"Find emails about the quarterly review meeting\"\n\"What did my manager say about the project timeline?\"\n\"Show me all team communications from last week\"\n\"Find client emails about budget approval\"\n</code></pre></p>"},{"location":"user-guide/classification/#personal-emails","title":"Personal Emails","text":"<p>Automatic Detection Criteria: - Personal relationships (family, friends) - Informal language and casual tone - Personal domains (@gmail.com, @yahoo.com) - Social and family-related content - Personal event and activity references</p> <p>Examples: - Family communications - Friend correspondence - Personal invitations - Social updates - Private conversations</p> <p>Processing Optimizations: - Relationship Context: Personal name recognition - Informal Language: Casual conversation patterns - Social Patterns: Personal event recognition - Emotional Context: Tone and sentiment awareness</p> <p>Best Query Types: <pre><code>\"Find emails from my family about vacation plans\"\n\"What did Sarah say about the birthday party?\"\n\"Show me personal emails from last month\"\n\"Find conversations about weekend activities\"\n</code></pre></p>"},{"location":"user-guide/classification/#promotional-emails","title":"Promotional Emails","text":"<p>Automatic Detection Criteria: - Marketing language (sale, deal, offer, discount) - Newsletter formats and structures - Promotional sender patterns - Unsubscribe links and marketing footers - Product announcements and campaigns</p> <p>Examples: - Marketing emails and advertisements - Newsletter subscriptions - Product announcements - Sales notifications - Promotional campaigns</p> <p>Processing Optimizations: - Marketing Keywords: Deal and promotion recognition - Brand Recognition: Company and product identification - Offer Extraction: Price and discount detection - Content Filtering: Focus on relevant promotional content</p> <p>Best Query Types: <pre><code>\"Find deals from Amazon last month\"\n\"Show me all newsletter emails\"\n\"What promotions did I receive from Apple?\"\n\"Find discount offers over 50%\"\n</code></pre></p>"},{"location":"user-guide/classification/#transactional-emails","title":"Transactional Emails","text":"<p>Automatic Detection Criteria: - Transaction confirmations and receipts - Account notifications and updates - Service confirmations - Payment and billing information - Order and shipping notifications</p> <p>Examples: - Purchase receipts - Account statements - Service confirmations - Booking confirmations - Payment notifications</p> <p>Processing Optimizations: - Transaction Data: Amount and date extraction - Service Recognition: Vendor and service identification - Account Context: User account pattern recognition - Financial Integration: Links to financial document data</p> <p>Best Query Types: <pre><code>\"Find my receipt from Apple Store\"\n\"Show me all Uber receipts from March\"\n\"What subscriptions renewed this month?\"\n\"Find all purchase confirmations over $100\"\n</code></pre></p>"},{"location":"user-guide/classification/#support-emails","title":"Support Emails","text":"<p>Automatic Detection Criteria: - Customer service interactions - Technical support conversations - Help desk communications - Ticket numbers and case references - Problem resolution language</p> <p>Examples: - Customer service responses - Technical support tickets - Help desk communications - Product support - Account assistance</p> <p>Processing Optimizations: - Issue Tracking: Problem and solution identification - Support Context: Ticket and case recognition - Resolution Patterns: Problem-solution pairing - Service Quality: Response time and satisfaction tracking</p> <p>Best Query Types: <pre><code>\"Find my support conversation about billing issues\"\n\"What did customer service say about my refund?\"\n\"Show me all technical support tickets\"\n\"Find the resolution to my account problem\"\n</code></pre></p>"},{"location":"user-guide/classification/#classification-benefits","title":"Classification Benefits","text":""},{"location":"user-guide/classification/#processing-optimization","title":"Processing Optimization","text":"<p>Document-Specific Benefits: - Financial: Optimized for precise transaction matching - Long-form: Enhanced for comprehensive understanding - Generic: Balanced for flexible content types</p> <p>Email-Specific Benefits: - Business: Work context and professional terminology - Personal: Relationship and social context - Promotional: Marketing and offer recognition - Transactional: Purchase and service data - Support: Problem-solution tracking</p>"},{"location":"user-guide/classification/#search-enhancement","title":"Search Enhancement","text":"<p>Improved Relevance: - Category-specific keyword weighting - Context-aware result ranking - Optimized chunking for query types - Enhanced source attribution</p> <p>Performance Benefits: - Faster search within categories - Reduced false positives - More accurate semantic matching - Better cross-content queries</p>"},{"location":"user-guide/classification/#working-with-classification","title":"Working with Classification","text":""},{"location":"user-guide/classification/#understanding-results","title":"Understanding Results","text":"<p>When viewing classification results:</p> <pre><code>{\n  \"document_type\": \"financial\",\n  \"confidence\": 0.92,\n  \"processing_metadata\": {\n    \"chunk_size\": 500,\n    \"overlap\": 50,\n    \"optimization\": \"transaction_focused\"\n  }\n}\n</code></pre> <p>Key Information: - Type: The assigned category - Confidence: How certain the system is - Optimization: Processing strategy used</p>"},{"location":"user-guide/classification/#classification-accuracy","title":"Classification Accuracy","text":"<p>High Accuracy Categories: - Financial documents with clear transaction patterns - Business emails with professional formatting - Promotional emails with marketing language</p> <p>Moderate Accuracy Categories: - Mixed-content documents - Personal emails with varied topics - Generic documents with diverse content</p> <p>Note: Lower accuracy doesn't mean poor functionality. The system is designed to work effectively regardless of classification confidence.</p>"},{"location":"user-guide/classification/#manual-verification","title":"Manual Verification","text":"<p>While classification is automatic, you can verify accuracy:</p> <ol> <li>Check Processing Details: Review document metadata</li> <li>Test Queries: Try category-specific query patterns</li> <li>Compare Results: Note if results match expectations</li> <li>Monitor Performance: Observe search quality over time</li> </ol>"},{"location":"user-guide/classification/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/classification/#document-upload","title":"Document Upload","text":"<ol> <li>Use Descriptive Filenames: Help with context recognition</li> <li>Single Category Per File: Avoid mixed-content documents when possible</li> <li>Clear Structure: Well-formatted documents classify better</li> <li>Verify Processing: Check that classification makes sense</li> </ol>"},{"location":"user-guide/classification/#email-management","title":"Email Management","text":"<ol> <li>Regular Sync: Keep email classification current</li> <li>Category Awareness: Understand your email patterns</li> <li>Query Adaptation: Use category-appropriate query styles</li> <li>Performance Monitoring: Note search quality across categories</li> </ol>"},{"location":"user-guide/classification/#query-optimization","title":"Query Optimization","text":"<ol> <li>Category-Specific Queries: Use optimized patterns for each type</li> <li>Cross-Category Search: Leverage unified search when appropriate</li> <li>Result Verification: Check that sources match expectations</li> <li>Iterative Improvement: Refine query techniques based on results</li> </ol>"},{"location":"user-guide/classification/#troubleshooting-classification","title":"Troubleshooting Classification","text":""},{"location":"user-guide/classification/#incorrect-classification","title":"Incorrect Classification","text":"<p>Common Causes: - Mixed content in single document - Ambiguous formatting or structure - Unusual document types - Poor text extraction quality</p> <p>Solutions: - Classification doesn't prevent functionality - Try different query approaches - Focus on content rather than category - Report patterns for future improvement</p>"},{"location":"user-guide/classification/#low-confidence-scores","title":"Low Confidence Scores","text":"<p>Understanding Low Confidence: - Document has mixed characteristics - Unusual formatting or structure - Limited content for analysis - Borderline between categories</p> <p>Working with Low Confidence: - System still processes effectively - May use generic processing approach - All query types remain available - Performance usually unaffected</p>"},{"location":"user-guide/classification/#category-mismatch","title":"Category Mismatch","text":"<p>When Classification Seems Wrong: - Remember it's optimization, not limitation - All categories support all query types - Focus on query techniques rather than classification - System learns and improves over time</p> <p>The classification system is designed to enhance your experience while maintaining full functionality regardless of category assignment.</p>"},{"location":"user-guide/gmail-integration/","title":"Gmail Integration User Guide","text":"<p>Connect your Gmail account to Personal AI Agent for unified email and document search capabilities.</p>"},{"location":"user-guide/gmail-integration/#getting-started","title":"Getting Started","text":""},{"location":"user-guide/gmail-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Active Gmail account</li> <li>Personal AI Agent account</li> <li>Internet connection for OAuth setup</li> </ul>"},{"location":"user-guide/gmail-integration/#initial-setup","title":"Initial Setup","text":"<ol> <li>Configure OAuth Credentials</li> <li>Go to Google Cloud Console</li> <li>Create a new project or select existing</li> <li>Enable Gmail API</li> <li>Create OAuth2 credentials</li> <li> <p>Add redirect URI: <code>http://localhost:8000/api/v1/gmail/callback</code></p> </li> <li> <p>Update Environment Configuration <pre><code>GMAIL_CLIENT_ID=your_client_id_here\nGMAIL_CLIENT_SECRET=your_client_secret_here\nGMAIL_REDIRECT_URI=http://localhost:8000/api/v1/gmail/callback\n</code></pre></p> </li> <li> <p>Initialize Gmail Connection <pre><code>python setup_gmail.py\n</code></pre></p> </li> </ol>"},{"location":"user-guide/gmail-integration/#authorization-process","title":"Authorization Process","text":""},{"location":"user-guide/gmail-integration/#web-interface-authorization","title":"Web Interface Authorization","text":"<ol> <li>Navigate to Gmail integration section</li> <li>Click \"Connect Gmail Account\"</li> <li>You'll be redirected to Google authorization</li> <li>Sign in to your Gmail account</li> <li>Grant permissions to Personal AI Agent</li> <li>You'll be redirected back with confirmation</li> </ol>"},{"location":"user-guide/gmail-integration/#api-authorization","title":"API Authorization","text":"<pre><code># Get authorization URL\ncurl -X GET \"http://localhost:8000/api/v1/gmail/auth-url\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n\n# Follow the returned URL in your browser\n# Google will redirect to callback URL automatically\n</code></pre>"},{"location":"user-guide/gmail-integration/#permissions-requested","title":"Permissions Requested","text":"<ul> <li>Read access to Gmail: View your email messages and settings</li> <li>No send permissions: Cannot send emails on your behalf</li> <li>No delete permissions: Cannot delete your emails</li> <li>Offline access: Maintain connection when you're not actively using the app</li> </ul>"},{"location":"user-guide/gmail-integration/#email-sync-process","title":"Email Sync Process","text":""},{"location":"user-guide/gmail-integration/#initial-sync","title":"Initial Sync","text":"<p>After authorization, perform your first email sync:</p> <ol> <li>Choose sync parameters:</li> <li>Number of emails (default: 100, max: 1000)</li> <li>Date range (optional)</li> <li> <p>Specific Gmail query (optional)</p> </li> <li> <p>Start sync process:    <pre><code># Sync recent 200 emails\ncurl -X POST \"http://localhost:8000/api/v1/gmail/sync\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"limit\": 200}'\n</code></pre></p> </li> <li> <p>Monitor progress:</p> </li> <li>Processing status updates</li> <li>Email classification results</li> <li>Completion notification</li> </ol>"},{"location":"user-guide/gmail-integration/#sync-strategies","title":"Sync Strategies","text":""},{"location":"user-guide/gmail-integration/#recent-emails-recommended","title":"Recent Emails (Recommended)","text":"<pre><code>{\n  \"limit\": 500,\n  \"query\": \"in:inbox after:2024/01/01\"\n}\n</code></pre>"},{"location":"user-guide/gmail-integration/#specific-senders","title":"Specific Senders","text":"<pre><code>{\n  \"limit\": 200,\n  \"query\": \"from:important@company.com OR from:client@example.com\"\n}\n</code></pre>"},{"location":"user-guide/gmail-integration/#date-range","title":"Date Range","text":"<pre><code>{\n  \"limit\": 1000,\n  \"query\": \"after:2024/01/01 before:2024/03/31\"\n}\n</code></pre>"},{"location":"user-guide/gmail-integration/#category-filtering","title":"Category Filtering","text":"<pre><code>{\n  \"limit\": 300,\n  \"query\": \"category:primary -category:promotions\"\n}\n</code></pre>"},{"location":"user-guide/gmail-integration/#email-classification","title":"Email Classification","text":"<p>Emails are automatically classified into five categories:</p>"},{"location":"user-guide/gmail-integration/#business-emails","title":"Business Emails","text":"<p>Characteristics: - Meeting invitations and calendar events - Project updates and work communications - Team notifications and announcements - Professional correspondence</p> <p>Examples: - \"Team standup meeting tomorrow at 10 AM\" - \"Q4 project milestone update\" - \"Client presentation feedback\"</p> <p>Search optimization: - Work-related keywords - Professional terminology - Meeting and project references</p>"},{"location":"user-guide/gmail-integration/#personal-emails","title":"Personal Emails","text":"<p>Characteristics: - Family and friend communications - Personal invitations and social events - Private conversations and updates - Non-work related correspondence</p> <p>Examples: - \"Family dinner this Sunday\" - \"Happy birthday! Hope you have a great day\" - \"Weekend hiking plans\"</p> <p>Search optimization: - Personal names and relationships - Social and family contexts - Informal communication patterns</p>"},{"location":"user-guide/gmail-integration/#promotional-emails","title":"Promotional Emails","text":"<p>Characteristics: - Marketing and advertising content - Newsletter subscriptions - Product announcements and deals - Promotional campaigns</p> <p>Examples: - \"50% off sale this weekend only\" - \"New features in our latest update\" - \"Monthly newsletter from your favorite blog\"</p> <p>Search optimization: - Marketing keywords - Deal and promotion terms - Brand and product names</p>"},{"location":"user-guide/gmail-integration/#transactional-emails","title":"Transactional Emails","text":"<p>Characteristics: - Purchase receipts and confirmations - Account notifications and updates - Service confirmations and bookings - Billing and payment information</p> <p>Examples: - \"Your receipt from Apple Store\" - \"Netflix subscription renewed\" - \"Uber trip receipt\"</p> <p>Search optimization: - Transaction amounts and dates - Service and vendor names - Purchase and payment terms</p>"},{"location":"user-guide/gmail-integration/#support-emails","title":"Support Emails","text":"<p>Characteristics: - Customer service interactions - Technical support conversations - Help desk communications - Problem resolution threads</p> <p>Examples: - \"Your support ticket #12345 has been updated\" - \"Follow-up on your technical issue\" - \"Solution to your billing question\"</p> <p>Search optimization: - Support and help keywords - Issue and problem descriptions - Ticket and case references</p>"},{"location":"user-guide/gmail-integration/#thread-processing","title":"Thread Processing","text":""},{"location":"user-guide/gmail-integration/#thread-awareness","title":"Thread Awareness","text":"<p>The system maintains email thread context:</p> <ul> <li>Conversation History: Full thread preserved</li> <li>Chronological Order: Messages ordered by time</li> <li>Context Preservation: Related emails linked</li> <li>Reply Chain: Complete conversation flow</li> </ul>"},{"location":"user-guide/gmail-integration/#benefits","title":"Benefits","text":"<ol> <li>Better Understanding: Full conversation context</li> <li>Accurate Responses: Complete information</li> <li>Relationship Mapping: Understand email relationships</li> <li>Follow-up Tracking: Monitor conversation progress</li> </ol>"},{"location":"user-guide/gmail-integration/#email-search-capabilities","title":"Email Search Capabilities","text":""},{"location":"user-guide/gmail-integration/#natural-language-queries","title":"Natural Language Queries","text":"<pre><code># Find specific conversations\n\"Find emails about the quarterly review meeting\"\n\"Show me all receipts from Apple\"\n\"What did John say about the project deadline?\"\n\n# Category-specific searches\n\"Find business emails from last week\"\n\"Show me all promotional emails from Amazon\"\n\"Find support conversations about billing issues\"\n\n# Content-based searches\n\"Emails containing financial information\"\n\"Find discussions about vacation plans\"\n\"Show me all meeting invitations\"\n</code></pre>"},{"location":"user-guide/gmail-integration/#advanced-filtering","title":"Advanced Filtering","text":"<pre><code># Date-based queries\n\"Find emails from March 2024\"\n\"Show me recent support emails\"\n\"Find promotional emails from last month\"\n\n# Sender-based queries\n\"All emails from my manager\"\n\"Find emails from family members\"\n\"Show me customer service responses\"\n\n# Content and context\n\"Find emails with attachments about reports\"\n\"Show me email threads longer than 5 messages\"\n\"Find urgent or important emails\"\n</code></pre>"},{"location":"user-guide/gmail-integration/#cross-content-queries","title":"Cross-Content Queries","text":"<p>Combine email and document search:</p> <pre><code>\"Find all information about Apple purchases\"\n\"Show me everything related to Project Alpha\"\n\"Find financial information from both emails and documents\"\n</code></pre>"},{"location":"user-guide/gmail-integration/#managing-gmail-connection","title":"Managing Gmail Connection","text":""},{"location":"user-guide/gmail-integration/#connection-status","title":"Connection Status","text":"<p>Check your Gmail connection:</p> <pre><code>curl -X GET \"http://localhost:8000/api/v1/gmail/status\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre> <p>Status indicators: - Connected: Active connection with valid tokens - Expired: Connection exists but tokens need refresh - Error: Connection issues or permission problems - Not Connected: No Gmail account linked</p>"},{"location":"user-guide/gmail-integration/#sync-history","title":"Sync History","text":"<p>Monitor sync activities: - Sync ID: Unique identifier for each sync - Email Count: Number of emails processed - Categories: Distribution across email types - Processing Time: Duration of sync operation - Status: Success or error information</p>"},{"location":"user-guide/gmail-integration/#disconnecting-gmail","title":"Disconnecting Gmail","text":"<p>To remove Gmail integration:</p> <pre><code>curl -X DELETE \"http://localhost:8000/api/v1/gmail/disconnect\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"delete_emails\": true,\n    \"revoke_access\": true\n  }'\n</code></pre> <p>Options: - <code>delete_emails</code>: Remove processed emails from system - <code>revoke_access</code>: Revoke OAuth tokens with Google</p>"},{"location":"user-guide/gmail-integration/#privacy-and-security","title":"Privacy and Security","text":""},{"location":"user-guide/gmail-integration/#data-privacy","title":"Data Privacy","text":"<ul> <li>Local Processing: Email content processed locally</li> <li>No External Sharing: Data never sent to external services</li> <li>User Isolation: Your emails separate from other users</li> <li>Encrypted Storage: Secure storage of OAuth tokens</li> </ul>"},{"location":"user-guide/gmail-integration/#security-features","title":"Security Features","text":"<ul> <li>OAuth2 Standard: Industry-standard authentication</li> <li>Minimal Permissions: Only necessary Gmail access</li> <li>Token Refresh: Automatic token renewal</li> <li>Revocable Access: Can disconnect anytime</li> </ul>"},{"location":"user-guide/gmail-integration/#data-retention","title":"Data Retention","text":"<ul> <li>Configurable Retention: Set how long to keep emails</li> <li>Selective Deletion: Remove specific email categories</li> <li>Complete Cleanup: Full data removal option</li> <li>Audit Trail: Track data access and modifications</li> </ul>"},{"location":"user-guide/gmail-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/gmail-integration/#authorization-issues","title":"Authorization Issues","text":"<p>\"OAuth error during authorization\" - Verify client ID and secret in configuration - Check redirect URI matches exactly - Ensure Gmail API is enabled in Google Cloud Console - Try re-authorizing with fresh credentials</p> <p>\"Permission denied\" - Check required scopes are granted - Verify account has necessary permissions - Try re-authorization with full permissions - Contact administrator if using organization account</p>"},{"location":"user-guide/gmail-integration/#sync-issues","title":"Sync Issues","text":"<p>\"Sync failed - rate limit exceeded\" - Wait before retrying (usually 1 hour) - Reduce sync batch size - Use more specific Gmail queries - Spread syncs across longer time periods</p> <p>\"No emails found to sync\" - Check Gmail query syntax - Verify date ranges are correct - Ensure emails exist in specified criteria - Try broader search parameters</p> <p>\"Processing errors during sync\" - Check system resources (memory, disk space) - Review error logs for specific issues - Try smaller batch sizes - Restart sync process</p>"},{"location":"user-guide/gmail-integration/#search-issues","title":"Search Issues","text":"<p>\"No email results found\" - Verify emails were successfully synced - Check email category filters - Try broader search terms - Ensure proper authentication</p> <p>\"Poor search quality\" - Use more specific search terms - Include email context in queries - Try different phrasings - Check email content was properly processed</p>"},{"location":"user-guide/gmail-integration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/gmail-integration/#sync-performance","title":"Sync Performance","text":"<ol> <li>Batch Size Optimization</li> <li>Start with smaller batches (100-200 emails)</li> <li>Increase gradually based on performance</li> <li> <p>Monitor processing times and memory usage</p> </li> <li> <p>Query Optimization</p> </li> <li>Use specific Gmail search queries</li> <li>Filter by date ranges when possible</li> <li> <p>Exclude unnecessary email categories</p> </li> <li> <p>Scheduling</p> </li> <li>Sync during off-peak hours</li> <li>Perform regular incremental syncs</li> <li>Avoid concurrent large syncs</li> </ol>"},{"location":"user-guide/gmail-integration/#search-performance","title":"Search Performance","text":"<ol> <li>Query Specificity</li> <li>Use precise search terms</li> <li>Include relevant context</li> <li> <p>Filter by email categories</p> </li> <li> <p>Result Limiting</p> </li> <li>Set reasonable result limits</li> <li>Use pagination for large result sets</li> <li>Cache frequently accessed results</li> </ol>"},{"location":"user-guide/gmail-integration/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/gmail-integration/#initial-setup_1","title":"Initial Setup","text":"<ol> <li>Start Small: Begin with recent emails (last 3 months)</li> <li>Test Thoroughly: Verify classification accuracy</li> <li>Monitor Resources: Watch system performance</li> <li>Incremental Growth: Gradually increase sync scope</li> </ol>"},{"location":"user-guide/gmail-integration/#ongoing-usage","title":"Ongoing Usage","text":"<ol> <li>Regular Syncs: Schedule periodic email updates</li> <li>Category Review: Occasionally verify classification accuracy</li> <li>Query Refinement: Improve search techniques over time</li> <li>Cleanup: Remove old or irrelevant emails</li> </ol>"},{"location":"user-guide/gmail-integration/#security","title":"Security","text":"<ol> <li>Token Management: Monitor OAuth token status</li> <li>Permission Review: Regularly review granted permissions</li> <li>Access Audit: Track who has access to email data</li> <li>Backup Strategy: Consider backup of important email data</li> </ol>"},{"location":"user-guide/pdf-documents/","title":"PDF Documents User Guide","text":"<p>Learn how to upload, process, and query PDF documents effectively with Personal AI Agent.</p>"},{"location":"user-guide/pdf-documents/#document-upload","title":"Document Upload","text":""},{"location":"user-guide/pdf-documents/#supported-formats","title":"Supported Formats","text":"<ul> <li>PDF Files: Primary supported format</li> <li>Text-based PDFs: Must contain selectable text (not scanned images)</li> <li>File Size: Maximum 10MB (configurable)</li> <li>Languages: English optimized, other languages supported</li> </ul>"},{"location":"user-guide/pdf-documents/#upload-methods","title":"Upload Methods","text":""},{"location":"user-guide/pdf-documents/#web-interface","title":"Web Interface","text":"<ol> <li>Navigate to the upload section</li> <li>Click \"Choose File\" or drag and drop</li> <li>Select your PDF file</li> <li>Wait for processing to complete</li> <li>Review classification and status</li> </ol>"},{"location":"user-guide/pdf-documents/#api-upload","title":"API Upload","text":"<pre><code>curl -X POST \"http://localhost:8000/api/v1/documents/upload\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -F \"file=@/path/to/document.pdf\"\n</code></pre>"},{"location":"user-guide/pdf-documents/#document-classification","title":"Document Classification","text":"<p>The system automatically classifies documents into three categories:</p>"},{"location":"user-guide/pdf-documents/#financial-documents","title":"Financial Documents","text":"<p>Automatically detected from: - Bank statements with transaction patterns - Invoices with dollar amounts and dates - Receipts with purchase information - Financial reports with monetary data</p> <p>Processing characteristics: - Small chunks (500 characters) for precision - Optimized for transaction queries - Enhanced pattern recognition - Exact amount matching</p> <p>Best for: - \"How much did I spend on groceries?\" - \"Find all Apple transactions\" - \"What was my balance in March?\"</p>"},{"location":"user-guide/pdf-documents/#long-form-documents","title":"Long-form Documents","text":"<p>Automatically detected from: - Documents with 20+ pages - Research papers with academic structure - Reports with complex formatting - Contracts with legal language</p> <p>Processing characteristics: - Large chunks (1500 characters) for context - Deep semantic understanding - Narrative flow preservation - Comprehensive analysis</p> <p>Best for: - \"Summarize the key findings\" - \"What are the main recommendations?\" - \"Explain the methodology used\"</p>"},{"location":"user-guide/pdf-documents/#generic-documents","title":"Generic Documents","text":"<p>Default classification for: - Resumes and CVs - Personal letters - Short reports - Miscellaneous documents</p> <p>Processing characteristics: - Balanced chunks (1000 characters) - Hybrid processing approach - Good for general queries - Flexible search capabilities</p> <p>Best for: - \"What skills are mentioned?\" - \"Find contact information\" - \"Summarize this document\"</p>"},{"location":"user-guide/pdf-documents/#processing-pipeline","title":"Processing Pipeline","text":""},{"location":"user-guide/pdf-documents/#1-upload-validation","title":"1. Upload Validation","text":"<p>The system validates: - File format (must be PDF) - File size (under configured limit) - PDF structure (must be valid) - Text content (must be extractable)</p>"},{"location":"user-guide/pdf-documents/#2-text-extraction","title":"2. Text Extraction","text":"<ul> <li>Uses PyPDF for text extraction</li> <li>Preserves document structure</li> <li>Handles various PDF versions</li> <li>Extracts metadata (page count, creation date)</li> </ul>"},{"location":"user-guide/pdf-documents/#3-automatic-classification","title":"3. Automatic Classification","text":"<ul> <li>Analyzes content patterns</li> <li>Considers document structure</li> <li>Uses page count and formatting</li> <li>Assigns confidence scores</li> </ul>"},{"location":"user-guide/pdf-documents/#4-category-specific-processing","title":"4. Category-Specific Processing","text":"<p>Based on classification: - Financial: Transaction-focused chunking - Long-form: Context-preserving segmentation - Generic: Balanced approach</p>"},{"location":"user-guide/pdf-documents/#5-vector-embedding","title":"5. Vector Embedding","text":"<ul> <li>Generates semantic embeddings</li> <li>Uses MiniLM model for consistency</li> <li>Creates searchable vector representations</li> <li>Optimizes for query performance</li> </ul>"},{"location":"user-guide/pdf-documents/#6-storage-and-indexing","title":"6. Storage and Indexing","text":"<ul> <li>Stores in category-specific indices</li> <li>Maintains user data isolation</li> <li>Creates searchable metadata</li> <li>Enables fast retrieval</li> </ul>"},{"location":"user-guide/pdf-documents/#processing-status","title":"Processing Status","text":"<p>Monitor document processing through status indicators:</p> <ul> <li>Pending: Upload received, processing queued</li> <li>Processing: Active text extraction and analysis</li> <li>Completed: Ready for queries</li> <li>Failed: Processing error occurred</li> </ul>"},{"location":"user-guide/pdf-documents/#querying-documents","title":"Querying Documents","text":""},{"location":"user-guide/pdf-documents/#financial-document-queries","title":"Financial Document Queries","text":"<pre><code># Transaction queries\n\"How much did I spend on Amazon in March?\"\n\"Find all Apple transactions over $100\"\n\"What was my total grocery spending?\"\n\n# Balance and account queries\n\"What was my account balance on March 15th?\"\n\"Show me all deposits in February\"\n\"Find overdraft fees\"\n\n# Category analysis\n\"Categorize my March expenses\"\n\"What percentage was spent on dining?\"\n\"Compare Q1 and Q2 spending\"\n</code></pre>"},{"location":"user-guide/pdf-documents/#long-form-document-queries","title":"Long-form Document Queries","text":"<pre><code># Content analysis\n\"Summarize the main findings\"\n\"What methodology was used in this research?\"\n\"List the key recommendations\"\n\n# Deep understanding\n\"Explain the theoretical framework\"\n\"What are the limitations mentioned?\"\n\"How does this relate to previous work?\"\n\n# Structure queries\n\"What are the main sections?\"\n\"Find the conclusion\"\n\"Show me the abstract\"\n</code></pre>"},{"location":"user-guide/pdf-documents/#generic-document-queries","title":"Generic Document Queries","text":"<pre><code># Information extraction\n\"What skills are mentioned on this resume?\"\n\"Find contact information\"\n\"What experience is listed?\"\n\n# Content queries\n\"Summarize this document\"\n\"What are the main points?\"\n\"Find specific requirements\"\n</code></pre>"},{"location":"user-guide/pdf-documents/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/pdf-documents/#document-preparation","title":"Document Preparation","text":"<ol> <li>Ensure text is selectable (not scanned images)</li> <li>Use clear, readable fonts</li> <li>Avoid heavily formatted documents when possible</li> <li>Consider file size before upload</li> <li>Use descriptive filenames</li> </ol>"},{"location":"user-guide/pdf-documents/#query-optimization","title":"Query Optimization","text":"<ol> <li>Be specific in your questions</li> <li>Use relevant keywords from the document</li> <li>Reference document context when helpful</li> <li>Ask follow-up questions for clarification</li> <li>Check source citations for accuracy</li> </ol>"},{"location":"user-guide/pdf-documents/#file-management","title":"File Management","text":"<ol> <li>Organize by category when possible</li> <li>Remove duplicates to avoid confusion</li> <li>Delete old documents you no longer need</li> <li>Use meaningful names for easy identification</li> <li>Regular cleanup to maintain performance</li> </ol>"},{"location":"user-guide/pdf-documents/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/pdf-documents/#upload-issues","title":"Upload Issues","text":"<p>\"Invalid file type\" - Ensure file is PDF format - Check file extension is .pdf - Verify file is not corrupted</p> <p>\"File too large\" - Compress PDF if possible - Split large documents - Check configured size limit</p> <p>\"No text found\" - Document may be scanned image - Use OCR software first - Try different PDF viewer to verify text</p>"},{"location":"user-guide/pdf-documents/#processing-issues","title":"Processing Issues","text":"<p>\"Processing failed\" - Check file integrity - Verify sufficient disk space - Review system logs - Try re-uploading</p> <p>\"Classification incorrect\" - Manual classification not available - Document may have mixed content - Processing will still work effectively</p>"},{"location":"user-guide/pdf-documents/#query-issues","title":"Query Issues","text":"<p>\"No results found\" - Try broader search terms - Check document was processed successfully - Verify you have access to the document - Try different query phrasing</p> <p>\"Poor result quality\" - Be more specific in queries - Use document-relevant terminology - Try breaking complex questions into parts - Check source citations for relevance</p>"},{"location":"user-guide/pdf-documents/#performance-tips","title":"Performance Tips","text":""},{"location":"user-guide/pdf-documents/#upload-performance","title":"Upload Performance","text":"<ul> <li>Upload during off-peak hours for large files</li> <li>Use stable internet connection</li> <li>Close other applications to free memory</li> <li>Monitor system resources during processing</li> </ul>"},{"location":"user-guide/pdf-documents/#query-performance","title":"Query Performance","text":"<ul> <li>Use specific queries rather than broad searches</li> <li>Limit search scope when possible</li> <li>Cache frequently used queries</li> <li>Monitor response times</li> </ul>"},{"location":"user-guide/pdf-documents/#system-optimization","title":"System Optimization","text":"<ul> <li>Regular maintenance of vector databases</li> <li>Periodic cleanup of old documents</li> <li>Monitor disk space usage</li> <li>Update models when available</li> </ul>"},{"location":"user-guide/pdf-documents/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/pdf-documents/#batch-processing","title":"Batch Processing","text":"<p>For multiple documents: 1. Upload documents individually 2. Wait for each to complete processing 3. Query across all documents 4. Use filters to narrow results</p>"},{"location":"user-guide/pdf-documents/#cross-document-queries","title":"Cross-Document Queries","text":"<p>Search across multiple documents: <pre><code>\"Find all mentions of Project Alpha across my documents\"\n\"Compare financial data between Q1 and Q2 reports\"\n\"What do my documents say about machine learning?\"\n</code></pre></p>"},{"location":"user-guide/pdf-documents/#source-attribution","title":"Source Attribution","text":"<p>All responses include: - Source document identification - Page number references - Confidence scores - Original text excerpts - Processing metadata</p>"},{"location":"user-guide/querying/","title":"Querying Your Data","text":"<p>Learn how to effectively search and query your PDF documents and Gmail emails using natural language.</p>"},{"location":"user-guide/querying/#query-types","title":"Query Types","text":"<p>Personal AI Agent supports several types of queries, each optimized for different use cases:</p>"},{"location":"user-guide/querying/#simple-content-queries","title":"Simple Content Queries","text":"<p>Ask direct questions about your documents and emails:</p> <pre><code>\"What is my current bank balance?\"\n\"Find emails from Apple about receipts\"\n\"What skills are mentioned on my resume?\"\n</code></pre>"},{"location":"user-guide/querying/#cross-content-queries","title":"Cross-Content Queries","text":"<p>Search across both PDFs and emails simultaneously:</p> <pre><code>\"Find all information about Apple purchases\"\n\"Show me everything related to Project Alpha\"\n\"What do my documents say about machine learning?\"\n</code></pre>"},{"location":"user-guide/querying/#analytical-queries","title":"Analytical Queries","text":"<p>Get insights and analysis from your data:</p> <pre><code>\"Categorize my March expenses\"\n\"Summarize the key findings in my research papers\"\n\"What are the main topics in my business emails?\"\n</code></pre>"},{"location":"user-guide/querying/#temporal-queries","title":"Temporal Queries","text":"<p>Search by time periods and dates:</p> <pre><code>\"What were my expenses in Q1 2024?\"\n\"Find emails from last week about meetings\"\n\"Show me documents created after January 1st\"\n</code></pre>"},{"location":"user-guide/querying/#query-optimization","title":"Query Optimization","text":""},{"location":"user-guide/querying/#be-specific","title":"Be Specific","text":"<p>Good: \"Apple transactions over $100 in March 2024\" Poor: \"Apple stuff\"</p> <p>Good: \"Meeting notes from quarterly review with Sarah\" Poor: \"meetings\"</p>"},{"location":"user-guide/querying/#include-context","title":"Include Context","text":"<p>Good: \"From my bank statement, find grocery expenses\" Poor: \"groceries\"</p> <p>Good: \"In my research papers, explain the methodology\" Poor: \"methodology\"</p>"},{"location":"user-guide/querying/#use-natural-language","title":"Use Natural Language","text":"<p>The system understands conversational queries:</p> <pre><code>\"How much did I spend on restaurants last month?\"\n\"What did my manager say about the project timeline?\"\n\"Can you explain the main conclusions from this research?\"\n</code></pre>"},{"location":"user-guide/querying/#content-specific-strategies","title":"Content-Specific Strategies","text":""},{"location":"user-guide/querying/#financial-document-queries","title":"Financial Document Queries","text":"<p>Best for transaction analysis and expense tracking:</p> <pre><code># Transaction searches\n\"Find all Amazon purchases in March\"\n\"How much did I spend on groceries?\"\n\"Show me all transactions over $500\"\n\n# Balance and account queries\n\"What was my balance on March 15th?\"\n\"Find all overdraft fees\"\n\"Show me all deposits this quarter\"\n\n# Expense analysis\n\"Categorize my spending by merchant\"\n\"What percentage of my income went to dining?\"\n\"Compare my Q1 and Q2 expenses\"\n</code></pre>"},{"location":"user-guide/querying/#email-queries","title":"Email Queries","text":"<p>Optimized for communication and correspondence:</p> <pre><code># Conversation searches\n\"Find the email thread about budget approval\"\n\"What did John say about the deadline?\"\n\"Show me all emails from customer support\"\n\n# Category-specific searches\n\"Find business emails about meetings\"\n\"Show me all promotional emails from Amazon\"\n\"Find transactional emails with receipts\"\n\n# Content searches\n\"Find emails containing project updates\"\n\"Show me all emails with attachments\"\n\"Find emails marked as important\"\n</code></pre>"},{"location":"user-guide/querying/#research-document-queries","title":"Research Document Queries","text":"<p>Best for long-form content analysis:</p> <pre><code># Content analysis\n\"Summarize the main findings\"\n\"What methodology was used?\"\n\"List the key recommendations\"\n\n# Deep understanding\n\"Explain the theoretical framework\"\n\"What are the limitations mentioned?\"\n\"How does this relate to previous work?\"\n\n# Structure queries\n\"What are the main sections?\"\n\"Find the conclusion\"\n\"Show me the abstract\"\n</code></pre>"},{"location":"user-guide/querying/#advanced-query-techniques","title":"Advanced Query Techniques","text":""},{"location":"user-guide/querying/#using-filters","title":"Using Filters","text":"<p>Narrow your search with built-in filters:</p> <pre><code>{\n  \"query\": \"Apple purchases\",\n  \"content_types\": [\"pdf\"],\n  \"document_types\": [\"financial\"],\n  \"max_results\": 10\n}\n</code></pre>"},{"location":"user-guide/querying/#combining-multiple-criteria","title":"Combining Multiple Criteria","text":"<pre><code>\"Find Apple transactions over $100 from my bank statements in March 2024\"\n</code></pre> <p>This query combines: - Entity: Apple - Amount: over $100 - Source: bank statements - Time: March 2024</p>"},{"location":"user-guide/querying/#follow-up-questions","title":"Follow-up Questions","text":"<p>The system maintains context for follow-up queries:</p> <pre><code>User: \"What were my Apple expenses in March?\"\nAI: \"You spent $1,247.89 on Apple products in March...\"\n\nUser: \"What specific items did I buy?\"\nAI: \"Based on the previous results, you purchased...\"\n</code></pre>"},{"location":"user-guide/querying/#query-response-structure","title":"Query Response Structure","text":""},{"location":"user-guide/querying/#answer-with-sources","title":"Answer with Sources","text":"<p>Every response includes:</p> <ol> <li>Direct Answer: Clear response to your question</li> <li>Source Citations: References to specific documents/emails</li> <li>Confidence Indicators: How certain the AI is about the answer</li> <li>Context: Relevant surrounding information</li> </ol> <p>Example response: <pre><code>Based on your financial documents, you spent $1,247.89 on Apple products in March 2024.\n\nSources:\n- Bank Statement March 2024 (Page 2): \"03/15/2024 APPLE STORE $899.00\"\n- Email from Apple Store: \"Your receipt for iPhone 15 Pro purchase\"\n- Credit Card Statement: \"APPLE.COM/BILL $67.89\"\n</code></pre></p>"},{"location":"user-guide/querying/#understanding-confidence","title":"Understanding Confidence","text":"<ul> <li>High Confidence (90%+): Direct matches with clear source attribution</li> <li>Medium Confidence (70-90%): Good matches with some interpretation</li> <li>Low Confidence (&lt;70%): Possible matches, verify sources carefully</li> </ul>"},{"location":"user-guide/querying/#common-query-patterns","title":"Common Query Patterns","text":""},{"location":"user-guide/querying/#financial-analysis","title":"Financial Analysis","text":"<pre><code>\"How much did I spend on [category] in [time period]?\"\n\"Find all transactions with [merchant/vendor]\"\n\"What was my [account] balance on [date]?\"\n\"Compare my spending between [period1] and [period2]\"\n</code></pre>"},{"location":"user-guide/querying/#email-communication","title":"Email Communication","text":"<pre><code>\"Find emails about [topic] from [person/company]\"\n\"What did [person] say about [subject]?\"\n\"Show me all [category] emails from [time period]\"\n\"Find the conversation thread about [topic]\"\n</code></pre>"},{"location":"user-guide/querying/#document-research","title":"Document Research","text":"<pre><code>\"Summarize [document/topic]\"\n\"What does [document] say about [specific topic]?\"\n\"Find [information type] in [document category]\"\n\"Explain [concept] from my research papers\"\n</code></pre>"},{"location":"user-guide/querying/#cross-content-analysis","title":"Cross-Content Analysis","text":"<pre><code>\"Find all information about [topic]\"\n\"Show me everything related to [project/person/company]\"\n\"Compare information about [topic] from different sources\"\n\"What do my documents and emails say about [subject]?\"\n</code></pre>"},{"location":"user-guide/querying/#troubleshooting-queries","title":"Troubleshooting Queries","text":""},{"location":"user-guide/querying/#no-results-found","title":"No Results Found","text":"<p>Try these approaches:</p> <ol> <li>Broaden your search: Use more general terms</li> <li>Check spelling: Verify terminology matches source documents</li> <li>Simplify query: Break complex questions into parts</li> <li>Verify content: Ensure documents were processed successfully</li> </ol>"},{"location":"user-guide/querying/#poor-result-quality","title":"Poor Result Quality","text":"<p>Improvement strategies:</p> <ol> <li>Add context: Include document type or source hints</li> <li>Be more specific: Use exact terms from your documents</li> <li>Rephrase: Try different ways of asking the same question</li> <li>Check sources: Verify the cited sources are relevant</li> </ol>"},{"location":"user-guide/querying/#slow-response-times","title":"Slow Response Times","text":"<p>Optimization tips:</p> <ol> <li>Use filters: Limit search scope with content type filters</li> <li>Reduce result count: Ask for fewer results initially</li> <li>Specific queries: Avoid very broad search terms</li> <li>Check system resources: Ensure adequate memory and CPU</li> </ol>"},{"location":"user-guide/querying/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/querying/#query-formulation","title":"Query Formulation","text":"<ol> <li>Start specific: Begin with detailed queries and broaden if needed</li> <li>Use your vocabulary: Include terms you know appear in your documents</li> <li>Natural language: Write queries as you would ask a person</li> <li>Context matters: Include relevant background information</li> </ol>"},{"location":"user-guide/querying/#result-verification","title":"Result Verification","text":"<ol> <li>Check sources: Always verify the cited sources</li> <li>Cross-reference: Compare results with original documents</li> <li>Ask follow-ups: Clarify unclear or incomplete answers</li> <li>Report issues: Note any inaccurate or problematic responses</li> </ol>"},{"location":"user-guide/querying/#iterative-improvement","title":"Iterative Improvement","text":"<ol> <li>Learn from results: Note which query styles work best</li> <li>Refine techniques: Develop personal query patterns</li> <li>Explore capabilities: Try different types of questions</li> <li>Stay updated: Learn about new features and improvements</li> </ol>"},{"location":"user-guide/querying/#example-query-session","title":"Example Query Session","text":"<p>Here's an example of an effective query session:</p> <pre><code>User: \"Find my Apple expenses from March 2024\"\n\nAI: \"I found $1,247.89 in Apple-related expenses from March 2024:\n- iPhone 15 Pro: $899.00 (March 15)\n- App Store purchases: $67.89 (various dates)\n- Apple Music: $10.99 (March 1)\n- Apple Care: $269.99 (March 20)\n\nSources: Bank Statement March 2024, Apple Store receipts via email\"\n\nUser: \"Which of these was the most expensive?\"\n\nAI: \"The iPhone 15 Pro at $899.00 was the most expensive Apple purchase in March 2024.\"\n\nUser: \"Show me the original receipt for the iPhone\"\n\nAI: \"Here's the iPhone 15 Pro receipt from your email:\nSubject: 'Your Receipt from Apple Store'\nDate: March 15, 2024\nAmount: $899.00\nPayment method: Visa ending in 4532\"\n</code></pre> <p>This demonstrates effective use of: - Specific initial query - Natural follow-up questions - Context maintenance across the conversation - Detailed source attribution</p>"}]}