#!/usr/bin/env python3
"""
Quick script to check which database files exist and query users
"""
import os
import sqlite3
from pathlib import Path

def check_database_files():
    """Check which database files exist"""
    base_dir = Path(__file__).parent
    
    # Check possible database locations
    db_locations = [
        base_dir / "personal_ai_agent.db",
        base_dir / "data" / "app.db",
        base_dir / "app.db",
        base_dir / "data" / "personal_ai_agent.db"
    ]
    
    print("=== Database File Check ===")
    existing_dbs = []
    
    for db_path in db_locations:
        if db_path.exists():
            size = db_path.stat().st_size
            print(f"✓ Found: {db_path} (size: {size} bytes)")
            existing_dbs.append(db_path)
        else:
            print(f"✗ Missing: {db_path}")
    
    return existing_dbs

def query_users_table(db_path):
    """Query users table in the database"""
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # Check if users table exists
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        if not cursor.fetchone():
            print(f"  ✗ No 'users' table found in {db_path}")
            return False
        
        # Count users
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        print(f"  ✓ Found {user_count} users in {db_path}")
        
        # Get user details
        cursor.execute("SELECT id, username, email, is_active, is_admin FROM users")
        users = cursor.fetchall()
        
        for user in users:
            user_id, username, email, is_active, is_admin = user
            print(f"    - ID: {user_id}, Username: {username}, Email: {email}, Active: {is_active}, Admin: {is_admin}")
        
        # Check specifically for gmail_tester
        cursor.execute("SELECT id, username, email, is_active, is_admin FROM users WHERE username = 'gmail_tester'")
        gmail_user = cursor.fetchone()
        
        if gmail_user:
            user_id, username, email, is_active, is_admin = gmail_user
            print(f"  ✓ Found gmail_tester: ID={user_id}, Email={email}, Active={is_active}, Admin={is_admin}")
        else:
            print(f"  ✗ gmail_tester not found in {db_path}")
        
        conn.close()
        return True
        
    except sqlite3.Error as e:
        print(f"  ✗ Database error for {db_path}: {e}")
        return False

if __name__ == "__main__":
    print("=== Backend Database Investigation ===\n")
    
    # Check which database files exist
    existing_dbs = check_database_files()
    
    if not existing_dbs:
        print("\n✗ No database files found!")
        print("Recommendation: Run 'python setup_db.py' to create database")
    else:
        print(f"\n=== Querying {len(existing_dbs)} database file(s) ===")
        
        for db_path in existing_dbs:
            print(f"\nQuerying {db_path}:")
            query_users_table(db_path)